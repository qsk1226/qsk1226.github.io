<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大爷来玩儿啊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.throne4j.com/"/>
  <updated>2019-08-29T04:56:31.341Z</updated>
  <id>http://www.throne4j.com/</id>
  
  <author>
    <name>我跟人飙车来着</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.throne4j.com/2019/08/29/java/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.throne4j.com/2019/08/29/java/动态代理模式/</id>
    <published>2019-08-29T04:56:31.341Z</published>
    <updated>2019-08-29T04:56:31.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>动态代理为开发提供了一种动态</p><p>jdk提供了一个工具类来动态生成一个代理，允许在执行某一个方法时进行额外的处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span><br><span class="line"></span><br><span class="line">class HWInvocationHandler implements InvocationHandler&#123;</span><br><span class="line">        //目标对象</span><br><span class="line">        private Object target;</span><br><span class="line">        public HWInvocationHandler(Object target)&#123;</span><br><span class="line">            this.target = target;</span><br><span class="line">        &#125;</span><br><span class="line">        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">            System.out.println(&quot;------插入前置通知代码-------------&quot;);</span><br><span class="line">            //执行相应的目标方法</span><br><span class="line">            Object rs = method.invoke(target,args);</span><br><span class="line">            System.out.println(&quot;------插入后置处理代码-------------&quot;);</span><br><span class="line">            return rs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们分析下这个方法的实现，首先生成的代理对象，需要实现参数里面声明的所有接口。接口的实现应给委托给InvocationHandler进行处理，invocationHandler里面可以根据method声明判断是否需要做增强，所以所生成的代理类里面必须能够获取到InvocationHandler,在我们无法知道代理类的具体类型的时候，我们可以通过反射从构造方法里将InvocationHandler传给代理类的实例。<br>所以 总的来说生成代理对象需要两步</p><ul><li>获取代理类的class对象</li><li>通过class对象获取构造方法，通过反射生成代理类的实例，并将InvocationHandler传人</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@CallerSensitive</span><br><span class="line">public static Object newProxyInstance(ClassLoader loader,</span><br><span class="line">                                      Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                      InvocationHandler h)</span><br><span class="line">    throws IllegalArgumentException</span><br><span class="line">&#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    final Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Look up or generate the designated proxy class.</span><br><span class="line">     * 生成代理类</span><br><span class="line">     */</span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Invoke its constructor with the designated invocation handler.</span><br><span class="line">     */</span><br><span class="line">    try &#123;</span><br><span class="line"></span><br><span class="line">        //获取代理类的构造方法</span><br><span class="line">        final Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        final InvocationHandler ih = h;</span><br><span class="line">        if (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(new PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                public Void run() &#123;</span><br><span class="line">                    cons.setAccessible(true);</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        //获取代理类的实例,并且将invocationhandler传人</span><br><span class="line">        return cons.newInstance(new Object[]&#123;h&#125;);</span><br><span class="line">    &#125; catch (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面我们在看下 getProxyClass0 如何获取代理类的class对象，这里idk通过WeakCache来缓存已经生成的class对象，因为生成该class通过字节码生成还是很耗时，同时为了解决之前由于动态代理生成太多class对象导致内存不足，所以这里通过弱引用WeakReference来缓存所生成的代理对象class，当发生GC的时候如果该class对象没有其他的强引用将会被直接回收。<br>生成代理类的class在ProxyGenerator的generateProxyClass方法内实现，该方法返回一个byte[]数组，最后通过一个本地方法加载到虚拟机，所以可以看出生成该对象还是非常耗时的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h1&gt;&lt;p&gt;动态代理为开发提供了一种动态&lt;/p&gt;
&lt;p&gt;jdk提供了一个工具类来动态生成一个代理，允许在执行某一个方法时进行额外的处理。
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解java反射(一)</title>
    <link href="http://www.throne4j.com/2019/06/03/java/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E5%8F%8D%E5%B0%84(%E4%B8%80)/"/>
    <id>http://www.throne4j.com/2019/06/03/java/深入理解java反射(一)/</id>
    <published>2019-06-03T13:38:43.000Z</published>
    <updated>2019-08-29T05:26:41.746Z</updated>
    
    <content type="html"><![CDATA[<p>#深入理解java反射机制<br><code>反射(Reflection)是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。</code></p><p>首先 我们看下java.lang.reflect包下面几个主要类的关系图<br><img src="/2019/06/03/java/深入理解java反射(一)/java.lang.reflect%E5%8C%85%E4%B8%BB%E8%A6%81%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt></p><h2 id="AnnotatedElement"><a href="#AnnotatedElement" class="headerlink" title="AnnotatedElement"></a>AnnotatedElement</h2><p>该接口的实现类代表程序中可以接受注解的程序元素，这个接口提供了获取注解相关的功能，该接口主要有一下几个实现类：</p><ul><li>Class 类定义</li><li>Constructor 构造器定义</li><li>Field 属性成员定义</li><li>Method 方法定义</li><li>Package 包定义<br><img src="/2019/06/03/java/深入理解java反射(一)/%E6%B3%A8%E8%A7%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.jpg" alt></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; <span class="function">T <span class="title">getDeclaredAnnotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass);</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass);</span><br><span class="line">    &lt;T extends Annotation&gt; <span class="function">T <span class="title">getAnnotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span></span>;</span><br><span class="line">    Annotation[] getAnnotations();</span><br><span class="line">    Annotation[] getDeclaredAnnotations();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现用户自定义注解"><a href="#实现用户自定义注解" class="headerlink" title="实现用户自定义注解"></a>实现用户自定义注解</h3><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><h2 id="GenericDeclaration"><a href="#GenericDeclaration" class="headerlink" title="GenericDeclaration"></a>GenericDeclaration</h2><p>提供了获取泛型相关的功能，只有方法和构造方法上支持泛型，所以只有Method，Constructor实现了该接口</p><h2 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h2><p>作为一个对象内部方法和属性的声明的抽象，包含了名称，修饰符，所在的类,其中修饰符包含了 static final public private volatile 等，通过一个整数表示，每一个类型在二进制中占一个位.</p><h2 id="AccessibleObject"><a href="#AccessibleObject" class="headerlink" title="AccessibleObject"></a>AccessibleObject</h2><p>这是一个类，提供了权限管理的功能，例如是否允许在反射中在外部调用一个private方法，获取一个private属性的值，所以method，constructor,field都继承该类，下面这段代码展示了如何在反射中访问一个私有的成员变量，class对象的构造方法不允许对外。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private static void setAccessible0(AccessibleObject obj, boolean flag)</span><br><span class="line">    throws SecurityException</span><br><span class="line">&#123;</span><br><span class="line">    if (obj instanceof Constructor &amp;&amp; flag == true) &#123;</span><br><span class="line">        Constructor&lt;?&gt; c = (Constructor&lt;?&gt;)obj;</span><br><span class="line">        if (c.getDeclaringClass() == Class.class) &#123;</span><br><span class="line">            throw new SecurityException(&quot;Cannot make a java.lang.Class&quot; +</span><br><span class="line">                                        &quot; constructor accessible&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.override = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boolean override;</span><br><span class="line"></span><br><span class="line">public boolean isAccessible() &#123;</span><br><span class="line">    return override;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为 Field里面通过field.get(原始对象)获取属性值得实现,先通过override做校验，如果没有重载该权限，则需要校验访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public Object get(Object obj)</span><br><span class="line">    throws IllegalArgumentException, IllegalAccessException</span><br><span class="line">&#123;</span><br><span class="line">    if (!override) &#123;</span><br><span class="line">        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return getFieldAccessor(obj).get(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#深入理解java反射机制&lt;br&gt;&lt;code&gt;反射(Reflection)是 Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类或对象的内部属性。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先 我们看下java.lang.reflect包下面
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="反射（reflect）" scheme="http://www.throne4j.com/tags/%E5%8F%8D%E5%B0%84%EF%BC%88reflect%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>反射Type详解</title>
    <link href="http://www.throne4j.com/2019/06/03/java/%E5%8F%8D%E5%B0%84Type%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.throne4j.com/2019/06/03/java/反射Type学习记录/</id>
    <published>2019-06-03T13:38:43.000Z</published>
    <updated>2019-08-10T17:04:56.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-lang-reflect-Type"><a href="#java-lang-reflect-Type" class="headerlink" title="java.lang.reflect.Type"></a>java.lang.reflect.Type</h1><h2 id="Type-来历"><a href="#Type-来历" class="headerlink" title="Type 来历"></a>Type 来历</h2><p>来历我们知道，Type 是 JDK5 开始引入的，其引入主要是为了泛型，没有泛型的之前， 只有所谓的原始类型。<br>此时，所有的原始类型都通过字节码文件类 Class 类进行抽象。 Class 类的一个具体对象就代表一个指定的原始类型。</p><p>泛型出现之后，也就扩充了数据类型。从只有原始类型扩充了参数化类型、类型变量类型、泛型数组类型，也就是 Type 的子接口。</p><p>那为什么没有统一到 Class 下，而是增加一个 Type 呢？（Class 也是种类的意思，Type 是类型的意思）? </p><p>是为了程序的扩展性，最终引入了 Type 接口作为 Class，ParameterizedType，GenericArrayType，TypeVariable 和 WildcardType 这几种类型的总的父接口。</p><p>这样实现了 Type 类型参数接受以上五种子类的实参或者返回值类型就是 Type 类型的参数。</p><h2 id="Type应用"><a href="#Type应用" class="headerlink" title="Type应用"></a>Type应用</h2><p>有很多场景下我们可以获得Type，比如：</p><ol><li><p>当我们拿到一个Class，用Class. getGenericInterfaces()方法得到Type[]，也就是这个类实现接口的Type类型列表。</p></li><li><p>当我们拿到一个Class，用Class.getDeclaredFields()方法得到Field[]，也就是类的属性列表，然后用Field. getGenericType()方法得到这个属性的Type类型。</p></li><li><p>当我们拿到一个Method，用Method. getGenericParameterTypes()方法获得Type[]，也就是方法的参数类型列表。</p></li></ol><h2 id="Java-类型分类"><a href="#Java-类型分类" class="headerlink" title="Java 类型分类"></a>Java 类型分类</h2><p>Java 的所有类型包括：</p><ol><li>raw type：原始类型，对应 Class</li><li>parameterized types：参数化类型，对应 ParameterizedType</li><li>array types：数组类型，对应 GenericArrayType</li><li>type variables：类型变量，对应 TypeVariable</li><li>primitive types：基本类型，仍然对应 Class</li></ol><p>1 中的 Class，不仅仅指平常所指的类，还包括数组、接口、注解、枚举等结构。<br>3 中的数组类型 GenericArrayType，应该指的是 2、4 类型数组，而不是一般我们说的数组，我们一般所说的数组是指 1、5 类型数组，他们还是 1，也就是 Class 类型。</p><h3 id="TypeVariable"><a href="#TypeVariable" class="headerlink" title="TypeVariable"></a>TypeVariable</h3><p>类型参数，描述类型，表示泛指任意或相关一类类型，泛型声明所声明的类型参数，仅仅用作参数占位符的标识符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeVariable</span>&lt;<span class="title">D</span> <span class="keyword">extends</span> <span class="title">GenericDeclaration</span>&gt; <span class="keyword">extends</span> <span class="title">Type</span>, <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    AnnotatedType[] getAnnotatedBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回表示此类型变量的上限的 Type对象的数组</span></span><br><span class="line">    Type[] getBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取声明该类型变量实体(即获得类、方法或构造器名)</span></span><br><span class="line">    <span class="function">D <span class="title">getGenericDeclaration</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此类型变量的名称，表示占位符</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeVariable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Type[] types = CustomTypeVariable.class.getTypeParameters();</span><br><span class="line">        TypeVariable typeVariable = (TypeVariable) types[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: T</span></span><br><span class="line">        typeVariable.getName();</span><br><span class="line">        <span class="comment">//Output: Object</span></span><br><span class="line">        typeVariable.getBounds()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.CustomTypeVariable</span></span><br><span class="line">        typeVariable.getGenericDeclaration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ParameterizedType"><a href="#ParameterizedType" class="headerlink" title="ParameterizedType"></a>ParameterizedType</h3><p>参数化类型，形如：Object&lt;T, K&gt;，即常说的泛型，是 Type 的子接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParameterizedType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型参数数组</span></span><br><span class="line">    Type[] getActualTypeArguments();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此类型Type对象</span></span><br><span class="line">    <span class="function">Type <span class="title">getRawType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个 Type对象，表示此类型为其成员的类型</span></span><br><span class="line">    <span class="function">Type <span class="title">getOwnerType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomParameterizedType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;String&gt; contains = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> Map.Entry&lt;String,String&gt; mapEntry;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//字段</span></span><br><span class="line">        Field field = CustomParameterizedType.class.getDeclaredField(<span class="string">"mapEntry"</span>);</span><br><span class="line">        ParameterizedType paramterTypes = (ParameterizedType) field.getGenericType();</span><br><span class="line">        Type[] types = paramterTypes.getActualTypeArguments();</span><br><span class="line">        <span class="comment">//Output: java.util.Map$Entry</span></span><br><span class="line">        String rawType = paramterTypes.getRawType().getTypeName();</span><br><span class="line">        <span class="comment">//Output: java.util.Map</span></span><br><span class="line">        Type ownerType = paramterTypes.getOwnerType();</span><br><span class="line">        <span class="comment">//Output: [java.lang.String, java.lang.String]</span></span><br><span class="line">        Type[] typeArgs = paramterTypes.getActualTypeArguments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GenericArrayType"><a href="#GenericArrayType" class="headerlink" title="GenericArrayType"></a>GenericArrayType</h3><p>泛型数组，描述的是形如：A<t>[] 或 T[] 类型</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericArrayType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回泛型数组类型</span></span><br><span class="line">    <span class="function">Type <span class="title">getGenericComponentType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGenericArrayType</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] <span class="keyword">var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//GenericArrayType实例对象</span></span><br><span class="line">        Type fruitType = CustomGenericArrayType.class.getDeclaredField(<span class="string">"var"</span>).getGenericType();</span><br><span class="line">        <span class="comment">//泛型类型T</span></span><br><span class="line">        Type var1 = ((GenericArrayType)fruitType).getGenericComponentType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WildcardType"><a href="#WildcardType" class="headerlink" title="WildcardType"></a>WildcardType</h3><p>通配符表达式，泛型表达式，也可以说是，限定性的泛型，形如：? extends classA、？super classB。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WildcardType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型变量下限</span></span><br><span class="line">    Type[] getLowerBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型变量上限</span></span><br><span class="line">    Type[] getUpperBounds();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWildcardType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;? extends Fruit&gt; ft1;</span><br><span class="line">    <span class="keyword">private</span> List&lt;? <span class="keyword">super</span> Apple&gt; ft2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//读取参数化类型(ParameterizedType): List&lt;? extends Fruit&gt;</span></span><br><span class="line">        Type var1 = CustomWildcardType.class.getDeclaredField(<span class="string">"ft1"</span>).getGenericType();</span><br><span class="line">        Type var2 = CustomWildcardType.class.getDeclaredField(<span class="string">"ft2"</span>).getGenericType();</span><br><span class="line"></span><br><span class="line">        WildcardType w1 = (WildcardType) ((ParameterizedType) var1).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        WildcardType w2 = (WildcardType) ((ParameterizedType) var2).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.Fruit</span></span><br><span class="line">        Type type1 = w1.getUpperBounds()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.Apple</span></span><br><span class="line">        Type type2 = w2.getLowerBounds()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-core中-SerializableTypeWrapper"><a href="#spring-core中-SerializableTypeWrapper" class="headerlink" title="spring-core中 SerializableTypeWrapper"></a>spring-core中 SerializableTypeWrapper</h2><h3 id="类Type-类型的包装类"><a href="#类Type-类型的包装类" class="headerlink" title="类Type 类型的包装类"></a>类Type 类型的包装类</h3><p>从上面可知，Type 包括：原始类型，而泛型又可以衍生出：类型参数以及通配符表达式。获取类型信息不仅仅是局限于原始类型信息，如果是泛型，还需要知道它的类型参数或通配符参数等信息，那如何提供获取这些信息的工具？这里用到了 SerializableTypeWrapper 包装类，其内部通过不同的 Type 类型实现不同接口的代理类实现。client - &gt;TypeWriter -&gt; Proxy：先看类型包装器接口，TypeProvider 是字段类型、方法入参类型、方法返回类型的包装类，高层模块通过该实例获取类型的相关信息，包括泛型的原始类型、类型参数等等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TypeProvider</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Type <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回类型源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段-Field-对象包装器"><a href="#字段-Field-对象包装器" class="headerlink" title="字段 Field 对象包装器"></a>字段 Field 对象包装器</h3><p>仅仅对字段的封装，可以理解为字段的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fieldName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到目标属性所在类对应的Class对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Field field;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FieldTypeProvider</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fieldName = field.getName();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = field.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.field = field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回字段的声明类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.field.getGenericType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.field = <span class="keyword">this</span>.declaringClass.getDeclaredField(<span class="keyword">this</span>.fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find original class structure"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法参数包装器"><a href="#方法参数包装器" class="headerlink" title="方法参数包装器"></a>方法参数包装器</h3><p>其实就是对方法参数类型的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParameterTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到目标属性所在类对应的Class对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parameterIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> MethodParameter methodParameter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodParameterTypeProvider</span><span class="params">(MethodParameter methodParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.methodName = (methodParameter.getMethod() != <span class="keyword">null</span> ? methodParameter.getMethod().getName() : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.parameterTypes = methodParameter.getExecutable().getParameterTypes();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = methodParameter.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.parameterIndex = methodParameter.getParameterIndex();</span><br><span class="line">        <span class="keyword">this</span>.methodParameter = methodParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.methodParameter.getGenericParameterType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.methodParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.methodName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.methodParameter = <span class="keyword">new</span> MethodParameter(</span><br><span class="line">                        <span class="keyword">this</span>.declaringClass.getDeclaredMethod(<span class="keyword">this</span>.methodName, <span class="keyword">this</span>.parameterTypes), <span class="keyword">this</span>.parameterIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.methodParameter = <span class="keyword">new</span> MethodParameter(</span><br><span class="line">                        <span class="keyword">this</span>.declaringClass.getDeclaredConstructor(<span class="keyword">this</span>.parameterTypes), <span class="keyword">this</span>.parameterIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find original class structure"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回参数包装器"><a href="#返回参数包装器" class="headerlink" title="返回参数包装器"></a>返回参数包装器</h3><p>方法返回类型代理类，注意这里的 provider 属性，它指向泛型实例对象。例如，获取 List<string> 字段的原始类型，即调用代理类的 getRawType() 方法，即最终调用 MethodInvokeTypeProvider.getType()，此时 provider 执行 List 的包装类。</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInvokeTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String methodName; <span class="comment">//方法名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass; <span class="comment">// 所在类对应的Class对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodInvokeTypeProvider</span><span class="params">(TypeProvider provider, Method method, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.provider = provider;</span><br><span class="line">        <span class="keyword">this</span>.methodName = method.getName();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = method.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 延迟调用目标方法</span></span><br><span class="line">            result = ReflectionUtils.invokeMethod(<span class="keyword">this</span>.method, <span class="keyword">this</span>.provider.getType());</span><br><span class="line">            <span class="comment">// 缓存结果</span></span><br><span class="line">            <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (result <span class="keyword">instanceof</span> Type[] ? ((Type[]) result)[<span class="keyword">this</span>.index] : (Type) result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        Method method = ReflectionUtils.findMethod(<span class="keyword">this</span>.declaringClass, <span class="keyword">this</span>.methodName);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot find method on deserialization: "</span> + <span class="keyword">this</span>.methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getReturnType() != Type.class &amp;&amp; method.getReturnType() != Type[].class) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Invalid return type on deserialized method - needs to be Type or Type[]: "</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下 SerializableTypeWrapper 类的类属性常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] SUPPORTED_SERIALIZABLE_TYPES = &#123;</span><br><span class="line">GenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ConcurrentReferenceHashMap&lt;Type, Type&gt; cache = <span class="keyword">new</span> ConcurrentReferenceHashMap&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出：</p><p>定义了一个 Class 类型的数组，其元素分别为 GenericArrayType、ParameterizedType、TypeVariable、WildcardType，也就是为不同的泛型代理实现的接口。<br>使用 cache 缓存已创建的代理</p><p>获取类型对外暴露的静态方法，该方法在类型的代理类中也会被调用，在代理类中调用是为了获取泛型的相关类型信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">static Type forTypeProvider(TypeProvider provider) &#123;</span><br><span class="line">    Type providedType = provider.getType();</span><br><span class="line">    if (providedType == null || providedType instanceof Serializable) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 作为获取原始类型还是与泛型相关的信息(泛型原始类型、参数类型)入口</span><br><span class="line">         * 注意：</span><br><span class="line">         *  1、原始类型，对应 Class，Class实现Serializable接口，直接返回</span><br><span class="line">         *  2、泛型类型如List&lt;String&gt;，返回其代理类</span><br><span class="line">         */</span><br><span class="line">        return providedType;</span><br><span class="line">    &#125;</span><br><span class="line">    if (GraalDetector.inImageCode() || !Serializable.class.isAssignableFrom(Class.class)) &#123;</span><br><span class="line">        // 如果类型在当前运行时环境中通常不可序列化，那么跳过任何包装尝试</span><br><span class="line">        return providedType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取给定提供者的可序列化类型代理</span><br><span class="line">    Type cached = cache.get(providedType);</span><br><span class="line">    if (cached != null) &#123;</span><br><span class="line">        return cached;</span><br><span class="line">    &#125;</span><br><span class="line">    for (Class&lt;?&gt; type : SUPPORTED_SERIALIZABLE_TYPES) &#123;</span><br><span class="line">        if (type.isInstance(providedType)) &#123;</span><br><span class="line">            ClassLoader classLoader = provider.getClass().getClassLoader();</span><br><span class="line">            Class&lt;?&gt;[] interfaces = new Class&lt;?&gt;[] &#123;type, SerializableTypeProxy.class, Serializable.class&#125;;</span><br><span class="line">            InvocationHandler handler = new TypeProxyInvocationHandler(provider);</span><br><span class="line">            cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">            cache.put(providedType, cached);</span><br><span class="line">            return cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new IllegalArgumentException(&quot;Unsupported Type class: &quot; + providedType.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型代理类实现的接口"><a href="#泛型代理类实现的接口" class="headerlink" title="泛型代理类实现的接口"></a>泛型代理类实现的接口</h3><p>定义获取类型包装器 TypeProvider 对象协议：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SerializableTypeProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回基础类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TypeProvider <span class="title">getTypeProvider</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联的调用处理程序，当在代理实例上调用方法时，方法调用将被编码并分派到其调用处理程序的invoke方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类型包装类，例如List&lt;String&gt;的包装类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeProxyInvocationHandler</span><span class="params">(TypeProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.provider = provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, @Nullable Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写equals方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">"equals"</span>) &amp;&amp; args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object other = args[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// Unwrap proxies for speed</span></span><br><span class="line">            <span class="keyword">if</span> (other <span class="keyword">instanceof</span> Type) &#123;</span><br><span class="line">                other = unwrap((Type) other);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 确定给定的对象是否相等</span></span><br><span class="line">            <span class="keyword">return</span> ObjectUtils.nullSafeEquals(<span class="keyword">this</span>.provider.getType(), other);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写hashCode方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 返回给定对象的哈希码</span></span><br><span class="line">            <span class="keyword">return</span> ObjectUtils.nullSafeHashCode(<span class="keyword">this</span>.provider.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现SerializableTypeProxy.getTypeProvider()方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"getTypeProvider"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 执行getTypeProvider方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.provider;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现Type子接口返回Type类型的方法：</span></span><br><span class="line"><span class="comment">         *   GenericArrayType.getGenericComponentType()</span></span><br><span class="line"><span class="comment">         *   ParameterizedType.getRawType()/getOwnerType()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (Type.class == method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, -<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现Type子接口返回Type[]类型的方法：</span></span><br><span class="line"><span class="comment">         *   ParameterizedType.getActualTypeArguments()</span></span><br><span class="line"><span class="comment">         *   TypeVariable.getBounds()</span></span><br><span class="line"><span class="comment">         *   WildcardType.getUpperBounds()/getLowerBounds()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Type[].class == method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1: ParameterizedType.getActualTypeArguments()</span></span><br><span class="line"><span class="comment">             *    返回一个表示此类型的实际类型参数的Type数组,eg: Hash&lt;String, String&gt;返回[class java.lang.String, class java.lang.String]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Type[] result = <span class="keyword">new</span> Type[((Type[]) method.invoke(<span class="keyword">this</span>.provider.getType())).length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">                result[i] = forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>.provider.getType(), args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.getTargetException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看下 SerializableTypeWrapper 对外暴露的其他方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 返回泛型类型的可序列化变体</span><br><span class="line">@Nullable</span><br><span class="line">public static Type forField(Field field) &#123;</span><br><span class="line">    return forTypeProvider(new FieldTypeProvider(field));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回方法参数泛型类型的可序列化变体</span><br><span class="line">@Nullable</span><br><span class="line">public static Type forMethodParameter(MethodParameter methodParameter) &#123;</span><br><span class="line">    return forTypeProvider(new MethodParameterTypeProvider(methodParameter));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回原始类型</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public static &lt;T extends Type&gt; T unwrap(T type) &#123;</span><br><span class="line">    Type unwrapped = type;</span><br><span class="line">    while (unwrapped instanceof SerializableTypeProxy) &#123;</span><br><span class="line">        unwrapped = ((SerializableTypeProxy) type).getTypeProvider().getType();</span><br><span class="line">    &#125;</span><br><span class="line">    return (unwrapped != null ? (T) unwrapped : type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 Type 实例的调用过程：</p><p>总结：通过使用代理类的方式来获取具体的类型信息，特别是想要获取泛型相关的信息时，很直观。</p><p>接下来看下参数化类型 ParameterizedType 代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ParameterizedType</span>, <span class="title">SerializableTypeProxy</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m6;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m7;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// public final boolean equals(Object var1) &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// public final String toString() &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// public final int hashCode() &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getTypeName</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m6, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Type <span class="title">getOwnerType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m5, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TypeProvider <span class="title">getTypeProvider</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (TypeProvider)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m7, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Type[] getActualTypeArguments() <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type[])<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Type <span class="title">getRawType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m6 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getTypeName"</span>);</span><br><span class="line">            m5 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getOwnerType"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m7 = Class.forName(<span class="string">"com.wiket.proxy.Client$SerializableTypeProxy"</span>).getMethod(<span class="string">"getTypeProvider"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getActualTypeArguments"</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getRawType"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-lang-reflect-Type&quot;&gt;&lt;a href=&quot;#java-lang-reflect-Type&quot; class=&quot;headerlink&quot; title=&quot;java.lang.reflect.Type&quot;&gt;&lt;/a&gt;java.lang.reflect.Ty
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="反射（reflect）" scheme="http://www.throne4j.com/tags/%E5%8F%8D%E5%B0%84%EF%BC%88reflect%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>netty权威指南学习（二）</title>
    <link href="http://www.throne4j.com/2019/06/02/netty/netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.throne4j.com/2019/06/02/netty/netty权威指南学习（二）/</id>
    <published>2019-06-02T13:38:43.000Z</published>
    <updated>2019-07-13T19:05:55.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-NIO-入门"><a href="#第二章-NIO-入门" class="headerlink" title="第二章 NIO 入门"></a>第二章 NIO 入门</h1><p>在本章中，我们会分别对JDK的BIO、NIO、NIO2.0的使用进行详细说明。本章主要内容包括：</p><ul><li>传统的同步阻塞式IO编程</li><li>基于NIO的非阻塞编程</li><li>基于NIO2.0的异步非阻塞(AIO)编程</li><li>为什么使用NIO编程</li><li>为什么使用Netty</li></ul><h2 id="2-1传统的BIO编程"><a href="#2-1传统的BIO编程" class="headerlink" title="2.1传统的BIO编程"></a>2.1传统的BIO编程</h2><p>　　网络编程的基本模型是client/server，也就是client进程与server进程通过3次握手之后建立连接，进而实现相互通信。</p><h3 id="2-1-1-BIO通信模型"><a href="#2-1-1-BIO通信模型" class="headerlink" title="2.1.1 BIO通信模型"></a>2.1.1 BIO通信模型</h3><p>　　BIO服务端通信模型（见下图）通常由一个Acceptor 负责接收客户端的请求，它接收到客户端请求之后，为每一个请求新建一个新的线程进行链路处理，处理完成之后，将处理结果数据，以流的方式发送给客户端，然后销毁线程。这就是典型的一请求一应答的通信模式。<br>　　该模型最大的问题就是缺乏弹性伸缩能力，当客户端并发访问量上来之后，服务端的线程和客户访问量呈1:1的关系增加，当服务端线程过多消耗java虚拟机的资源后，导致性能急剧下降，甚至将导致服务端宕机、僵死而无法提供服务。</p><p><img src="/2019/06/02/netty/netty权威指南学习（二）/BIO%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.jpg" alt="BIO通信模型">　　</p><h3 id="2-1-2-同步阻塞式IO创建的TimeServer源码分析"><a href="#2-1-2-同步阻塞式IO创建的TimeServer源码分析" class="headerlink" title="2.1.2 同步阻塞式IO创建的TimeServer源码分析"></a>2.1.2 同步阻塞式IO创建的TimeServer源码分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shengke.netty.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qinshengke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016-06-02 21:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">"The server is started in port:"</span> + port);</span><br><span class="line">            <span class="comment">// 获取server接待的socket</span></span><br><span class="line">            Socket socket = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                socket = server.accept();</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> TimeServerHandler(socket)).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (server != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"The time server close"</span>);</span><br><span class="line">                server.close();</span><br><span class="line">                server = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shengke.netty.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qinshengke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016-06-02 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeServerHandler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取socket 输入流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">this</span>.socket.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(<span class="keyword">this</span>.socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            String currentTime = <span class="keyword">null</span>;</span><br><span class="line">            String body = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                body = in.readLine();</span><br><span class="line">                <span class="keyword">if</span> (body == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">                System.out.println(<span class="string">"The time server receive order :"</span> + body);</span><br><span class="line">                currentTime = <span class="string">"QUERY TIME ORDER"</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> Date(System.currentTimeMillis()).toString() : <span class="string">"BAD ORDER"</span>;</span><br><span class="line">                out.println(currentTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shengke.netty.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qinshengke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-06-02 22:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader in = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, port);</span><br><span class="line">            in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));</span><br><span class="line">            out = <span class="keyword">new</span> PrintWriter(socket.getOutputStream(), <span class="keyword">true</span>);</span><br><span class="line">            out.println(<span class="string">"QUERY TIME ORDER"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Send order 2 server succeed."</span>);</span><br><span class="line">            String resp = in.readLine();</span><br><span class="line">            System.out.println(<span class="string">"Now is :"</span> + resp);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                socket = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　BIO主要问题在于每当有一个新的客户端请求接入时，服务端都必须创建一个新的线程处理新接入的客户端链路，一个线程只能处理一个客户端连接。试想一下，当成千上万甚至百万的客户端请求接入时，对服务器来说无异于灾难来临。　　</p><h2 id="2-2-伪异步IO编程"><a href="#2-2-伪异步IO编程" class="headerlink" title="2.2  伪异步IO编程"></a>2.2  伪异步IO编程</h2><p>为了解决同步阻塞IO面临的一个链路需要一个线程处理的问题，后来有人对他的线程模型进行了优化–后端通过线程池来处理多个客户端的请求接入，形成客户端个数M:线程池最大线程数N的比例关系，其中M可以远远大于N。</p><h3 id="2-2-1伪异步IO模型"><a href="#2-2-1伪异步IO模型" class="headerlink" title="2.2.1伪异步IO模型"></a>2.2.1伪异步IO模型</h3><p>　　采用线程池或者任务队列实现一种伪异步的IO通信框架，它的模型如下图所示:<br><img src="/2019/06/02/netty/netty权威指南学习（二）/%E4%BC%AA%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.jpg" alt><br>　　当有新的客户请求接入的时候，将客户端的socket封装为一个task投递到后端的线程池中进行处理,java线程池维护一个任务队列和N个活跃的线程，因此它消耗资源是可控的，不会造成资源的耗尽。由于伪异步通信模型底层实现依然使用BIO，无法从根本上解决同步阻塞IO的问题。<br>　　下面我们结合代码，了解一下伪异步通信模型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shengke.netty.bio.fake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shengke.netty.bio.TimeServerHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qinshengke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016-06-02 21:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">"The server is started in port:"</span> + port);</span><br><span class="line">            <span class="comment">// 获取server接待的socket</span></span><br><span class="line">            Socket socket = <span class="keyword">null</span>;</span><br><span class="line">            TimeServerHandlerExecutePool executePool = <span class="keyword">new</span> TimeServerHandlerExecutePool(<span class="number">50</span>, <span class="number">10000</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                socket = server.accept();</span><br><span class="line">                executePool.execute(<span class="keyword">new</span> TimeServerHandler(socket));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (server != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"The time server close"</span>);</span><br><span class="line">                server.close();</span><br><span class="line">                server = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shengke.netty.bio.fake;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qinshengke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016-06-02 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandlerExecutePool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeServerHandlerExecutePool</span><span class="params">(<span class="keyword">int</span> maxPoolSize, <span class="keyword">int</span> queueSize)</span> </span>&#123;</span><br><span class="line">        executorService = <span class="keyword">new</span> ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), maxPoolSize,</span><br><span class="line">                <span class="number">120L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(queueSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        executorService.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码没有什么变化，使用2.1.2章节中的 TimeClient。</p><h3 id="2-2-3-伪异步通信模型的弊端"><a href="#2-2-3-伪异步通信模型的弊端" class="headerlink" title="2.2.3 伪异步通信模型的弊端"></a>2.2.3 伪异步通信模型的弊端</h3><p>首先我们看下InputStream的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reads some number of bytes from the input stream and stores them into</span></span><br><span class="line"><span class="comment">     * the buffer array &lt;code&gt;b&lt;/code&gt;. The number of bytes actually read is</span></span><br><span class="line"><span class="comment">     * returned as an integer.  This method blocks until input data is</span></span><br><span class="line"><span class="comment">     * available, end of file is detected, or an exception is thrown.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; If the length of &lt;code&gt;b&lt;/code&gt; is zero, then no bytes are read and</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at</span></span><br><span class="line"><span class="comment">     * least one byte. If no byte is available because the stream is at the</span></span><br><span class="line"><span class="comment">     * end of the file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at</span></span><br><span class="line"><span class="comment">     * least one byte is read and stored into &lt;code&gt;b&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the</span></span><br><span class="line"><span class="comment">     * next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read is,</span></span><br><span class="line"><span class="comment">     * at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the</span></span><br><span class="line"><span class="comment">     * number of bytes actually read; these bytes will be stored in elements</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;,</span></span><br><span class="line"><span class="comment">     * leaving elements &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;b[b.length-1]&lt;/code&gt; unaffected.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * has the same effect as: &lt;pre&gt;&lt;code&gt; read(b, 0, b.length) &lt;/code&gt;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      b   the buffer into which the data is read.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>     the total number of bytes read into the buffer, or</span></span><br><span class="line"><span class="comment">     *             &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of</span></span><br><span class="line"><span class="comment">     *             the stream has been reached.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span>  IOException  If the first byte cannot be read for any reason</span></span><br><span class="line"><span class="comment">     * other than the end of the file, if the input stream has been closed, or</span></span><br><span class="line"><span class="comment">     * if some other I/O error occurs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span>  NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>        java.io.InputStream#read(byte[], int, int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InputStream的API中有一段是这样描述<br><strong><em>This method blocks until input data is available, end of file is detected, or an exception is thrown</em></strong><br>当对socket的输入流进行读取的时候，它会一直阻塞下去，知道发生以下三件事：</p><ul><li>有数据可读</li><li>可用数据已经读取完毕</li><li>发生空指针或者IO异常</li></ul><p>这意味着当对方发送请求或者响应比较慢，或者网络延迟，读取输入流的一方的通信线程将会一直阻塞，在此期间，其他接入消息只能在任务队列中排队等待</p><p>下面我们对输出流OutputStream进行分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStream</span> <span class="keyword">implements</span> <span class="title">Closeable</span>, <span class="title">Flushable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Writes &lt;code&gt;b.length&lt;/code&gt; bytes from the specified byte array</span></span><br><span class="line"><span class="comment">     * to this output stream. The general contract for &lt;code&gt;write(b)&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * is that it should have exactly the same effect as the call</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;write(b, 0, b.length)&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      b   the data.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span>  IOException  if an I/O error occurs.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>        java.io.OutputStream#write(byte[], int, int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        write(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用OutputStream的write方法写入输出流的时候，它将被阻塞，知道所有要发送的数据发送完毕，或发生异常。当数据的接收方数据处理能力低下时，将不能及时的从TCP缓冲区读取数据，这将会导致数据发送方的TCP windows size不断变小，直到为0，双方处于Keep-Alive状态，数据发送方将不能再向TCP缓冲区写入数据，这是如果采用同步阻塞IO，write操作将会被无限期阻塞，知道TCP windows size大于 0 或者发生异常为止。</p><p>下面我们就简单分析下通信对方返回应答时间过长引起的级联故障：<br>（1） 服务端处理缓慢，宴会应答消息消耗60s，平均只需要10ms<br>（2）采用伪异步IO的线程正在读取故障服务节点的响应，由于读取输入流是阻塞的，它将会被同步阻塞60s<br>（3）假设所有线程被阻塞在故障服务器，name后续所有的IO消息都将在任务队列中排队<br>（4）由于线程池采用阻塞队列实现，当队列积压满之后，后续如队列操作将被阻塞，进而acceptor将会拒绝接收客户端请求，导致大量的连接超时。</p><h2 id="2-3-NIO编程"><a href="#2-3-NIO编程" class="headerlink" title="2.3 NIO编程"></a>2.3 NIO编程</h2><p>在开始NIO之前我们首先需要弄明白NIO的概念，什么才是NIO？由于NIO的目标是使Java支持非阻塞IO，所以很多人喜欢称NIO为非阻塞IO（Non-block IO）</p><p>与Socket类和ServerSocket类相对应，NIO也童工了SocketChannel和ServerSocketChannel两种不同的套接字通道实现。这两种新增加的通道都支持阻塞和非阻塞两种模式。阻塞模式使用非常简单但是性能和可靠性不好，非阻塞模式正好相反。</p><h3 id="2-3-1-NIO类库简介"><a href="#2-3-1-NIO类库简介" class="headerlink" title="2.3.1  NIO类库简介"></a>2.3.1  NIO类库简介</h3><p>NIO弥补了原来同步阻塞IO的不足，它在标准Java代码中提供了高速的、面向块的IO。通过定义包含数据的类，以及通过以块的形式处理这些数据，NIO不用使用本机代码就可以利用低级优化，这是原来IO锁无法做到的。下面我们对NIO的一些概念和功能坐下简单介绍，以便大家能够快速地了解NIO类库和相关概念。</p><h4 id="（1）缓冲区Buffer"><a href="#（1）缓冲区Buffer" class="headerlink" title="（1）缓冲区Buffer"></a>（1）缓冲区Buffer</h4><p>Buffer是一个对象，它包含一些要写入或者要读出的数据。在NIO类库中加入Buffer对象，踢向了新库与原IO的一个重要区别。在面向流的IO中，可以将数据直接写入或者将数据直接读到Stream对象中。</p><p>在NIO库中所有数据都是用缓冲区吃力的。在读取数据时，他是直接读到缓冲区中的，在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。</p><p>缓冲区实质上一个数组。通常它是一个字节数组（ByteBuffer），也可以使用其他种类的数组。但是一个缓冲区不仅仅是一个数组，缓冲区提供了对数据的结构化访问以及维护读写位置等信息。</p><p>最常用的缓冲区是ByteBuffer，一个ByteBuffer提供了一组功能用于操作byte数组。除了ByteBuffer，还有其他的一些缓冲区（每种Java基本类型都有对应的缓冲区 boolean除外）</p><ul><li>ByteBuffer 字节缓冲区</li><li>CharBuffer 字符缓冲区</li><li>ShortBuffer  短整型缓冲区</li><li>IntBuffer  整形缓冲区</li><li>LongBuffer 长整型缓冲区</li><li>FloatBuffer  浮点型缓冲区</li><li>DoubleBuffer 双精度浮点型缓冲区</li></ul><h4 id="（2）通道-Channel"><a href="#（2）通道-Channel" class="headerlink" title="（2）通道 Channel"></a>（2）通道 Channel</h4><p>Channel是一个通道，他就像自来水管一样，网络数据通过Channel读取和写入。通道与流的不同之处在于通道是双向的，流只是在一个方向上移动，而通道可以用于读、写或者两者同时进行。<br>因为Channel是全双工的，所以他可以比流更好的映射底层操作系统的API。</p><p>Channel的类图继承关系如下图所示：<br><img src="/2019/06/02/netty/netty权威指南学习（二）/Channel.jpg" alt="NIO channel接口继承图"></p><p>自顶向下看，前三层主要是channel接口，用于定义它的功能，后面是一些具体功能类（抽象类）。从类图可以看出，实际上Channel可以分为两大类：用于网络读写的SelectableChannel和用于文件操作的FileChannel</p><p>本文设计到的SocketChannel、ServerSocketChannel都是SelectableChannel的子类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">ReadableByteChannel (java.nio.channels)</span><br><span class="line">    ReadableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    ScatteringByteChannel (java.nio.channels)</span><br><span class="line">    ByteChannel (java.nio.channels)</span><br><span class="line">        SeekableByteChannel (java.nio.channels)</span><br><span class="line">        SocketChannel (java.nio.channels)</span><br><span class="line">        DatagramChannel (java.nio.channels)</span><br><span class="line">    SourceChannel in Pipe (java.nio.channels)</span><br><span class="line">InterruptibleChannel (java.nio.channels)</span><br><span class="line">    AbstractInterruptibleChannel (java.nio.channels.spi)</span><br><span class="line">        ReadableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">        SelectableChannel (java.nio.channels)</span><br><span class="line">        WritableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">        FileChannel (java.nio.channels)</span><br><span class="line">SelectableChannel (java.nio.channels)</span><br><span class="line">    AbstractSelectableChannel (java.nio.channels.spi)</span><br><span class="line">        SocketChannel (java.nio.channels)</span><br><span class="line">        SinkChannel in Pipe (java.nio.channels)</span><br><span class="line">        DatagramChannel (java.nio.channels)</span><br><span class="line">        SourceChannel in Pipe (java.nio.channels)</span><br><span class="line">        ServerSocketChannel (java.nio.channels)</span><br><span class="line">NetworkChannel (java.nio.channels)</span><br><span class="line">    AsynchronousServerSocketChannel (java.nio.channels)</span><br><span class="line">    SocketChannel (java.nio.channels)</span><br><span class="line">    MulticastChannel (java.nio.channels)</span><br><span class="line">    ServerSocketChannel (java.nio.channels)</span><br><span class="line">    AsynchronousSocketChannel (java.nio.channels)</span><br><span class="line">WritableByteChannel (java.nio.channels)</span><br><span class="line">    SinkChannel in Pipe (java.nio.channels)</span><br><span class="line">    WritableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    ByteChannel (java.nio.channels)</span><br><span class="line">    GatheringByteChannel (java.nio.channels)</span><br><span class="line">AbstractInterruptibleChannel (java.nio.channels.spi)</span><br><span class="line">    ReadableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    SelectableChannel (java.nio.channels)</span><br><span class="line">    WritableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    FileChannel (java.nio.channels)</span><br><span class="line">AsynchronousChannel (java.nio.channels)</span><br><span class="line">    AsynchronousServerSocketChannel (java.nio.channels)</span><br><span class="line">    AsynchronousFileChannel (java.nio.channels)</span><br><span class="line">    AsynchronousByteChannel (java.nio.channels)</span><br></pre></td></tr></table></figure><h4 id="（3）多路复用器Selector"><a href="#（3）多路复用器Selector" class="headerlink" title="（3）多路复用器Selector"></a>（3）多路复用器Selector</h4><p>我们探索下多路复用器Selector，它是Java NIO编程的基础，熟练地掌握Selector对NIO编程至关重要。多路复用器提供选择已经就绪的任务的能力。简单来说Selector会不断的轮询注册在其上的Channel，如果某个Chennel上面发生读或者写事件，这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的IO操作。<br>一个多路复用器Selector可以轮询多个Channel，由于JKD使用epoll代替传统的select，所以它并没有最大句柄 1024/2048的限制。也就是一个Selector就可以负责成千上万的客户端。</p><h3 id="2-3-2-NIO服务端通信序列图分析"><a href="#2-3-2-NIO服务端通信序列图分析" class="headerlink" title="2.3.2 NIO服务端通信序列图分析"></a>2.3.2 NIO服务端通信序列图分析</h3><p><img src="/2019/06/02/netty/netty权威指南学习（二）/NIO%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1%E5%BA%8F%E5%88%97%E5%9B%BE.png" alt="NIO服务端通信序列图"></p><p>下面，我们对NIO服务端的主要创建过程进行讲解和说明，作为NI的基础入门，这里忽略掉一些在生产环境部署所需的特性和功能。<br>步骤一： <strong>打开ServerSocketChannel</strong>，用于监听客户端的连接，它是所有客户端连接的父管道，伪代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel acceptor = ServerSocketChannel.open();</span><br></pre></td></tr></table></figure><p>步骤二： 绑定监听端口，设置连接为非阻塞模式，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acceptor.socket().bind(new InetSocketAddress(InetAddress.getByName(&quot;IP&quot;), port));</span><br><span class="line">acceptor.configureBlooking(false);</span><br></pre></td></tr></table></figure><p>步骤三： 创建Reactor线程，创建多路复用器并启动线程，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br><span class="line">new Thread(new ReactorTask()).start();</span><br></pre></td></tr></table></figure><p>步骤四： 将ServerSocketChannel 注册到Reactor线程的多路复用器Selector上，监听ACCEPT事件，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = acceptor.register(selector, SelectionKey.OP_ACCEPT, ioHandler);</span><br></pre></td></tr></table></figure><p>步骤五： 多路复用器在线程run方法的无限循环体内轮询准备就绪的Key，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int num = selector.select();</span><br><span class="line">Set selectedKeys = selector.selectedKeys();</span><br><span class="line">Iterator it = selectedKeys.iterator();</span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">    SelectionKey key = (SelectionKey) it.next();</span><br><span class="line">    // do with IO event</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤六： 多路复用器监听到有新的客接入，处理新的接入请求，完成TCP三次握手，建立物理链路，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SocketChannel channel = acceptor.accept();</span><br></pre></td></tr></table></figure><p>步骤七： 设置客户端链路为非阻塞模式，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(false);</span><br><span class="line">channel.socket().setReuseAddress(true);</span><br></pre></td></tr></table></figure><p>步骤八： 将新接入的客户端连接注册到Reactor线程的多路复用器上，监听读操作，读取客户端发送的网络消息，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = socketChannel.register(selector, SelectionKey.OP_READ, ioOHandler);</span><br></pre></td></tr></table></figure><p>步骤九： 异步读取客户端请求消息到缓冲区，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int radNumber = channel.read(receivedBuffer);</span><br></pre></td></tr></table></figure><p>步骤十： 对ByteBuffer进行编解码，如果有半包消息指针reset，继续读取后续的报文，将解码成功的消息封装成Task，投递到业务线程池中，进行业务逻辑的编排，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Object message = null;</span><br><span class="line">while(buffer.hasRemain()) &#123;</span><br><span class="line">    byteBuffer.mark();</span><br><span class="line">    message = decode(byteBuffer);</span><br><span class="line">    if (message == null) &#123;</span><br><span class="line">        byteBuffer.reset();</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    messageList.add(message);</span><br><span class="line">&#125;</span><br><span class="line">if (!byteBuffer.hasRemain())</span><br><span class="line">    byteBuffer.clear()</span><br><span class="line">else</span><br><span class="line">    byteBuffer.compact();</span><br><span class="line">if (messageList !=null &amp;&amp; messageList.size()&gt;0) &#123;</span><br><span class="line">    for(Object msg : messageList) &#123;</span><br><span class="line">        handlerTask(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤十一： 将POJO对象encode成Buffer，调用SocketChannel 的异步write接口，将消息异步发送给客户端，伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketChannel.write(buffer);</span><br></pre></td></tr></table></figure><p>注意： 如果发送去TCP 缓冲区满，会导致写半包，此时，需要注册到监听写操作位，循环写，直到整包消息写入到TCP缓冲区，对于这些内容此处暂不赘述。</p><h3 id="2-3-3-NIO创建的TimeServer源码分析"><a href="#2-3-3-NIO创建的TimeServer源码分析" class="headerlink" title="2.3.3 NIO创建的TimeServer源码分析"></a>2.3.3 NIO创建的TimeServer源码分析</h3><p>我们将在TimeServer例程中给出完整的NIO创建的时间服务器源码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章-NIO-入门&quot;&gt;&lt;a href=&quot;#第二章-NIO-入门&quot; class=&quot;headerlink&quot; title=&quot;第二章 NIO 入门&quot;&gt;&lt;/a&gt;第二章 NIO 入门&lt;/h1&gt;&lt;p&gt;在本章中，我们会分别对JDK的BIO、NIO、NIO2.0的使用进行详细说明
      
    
    </summary>
    
      <category term="netty" scheme="http://www.throne4j.com/categories/netty/"/>
    
    
      <category term="netty" scheme="http://www.throne4j.com/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>netty权威指南学习（一）</title>
    <link href="http://www.throne4j.com/2019/06/01/netty/netty%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.throne4j.com/2019/06/01/netty/netty权威指南学习（一）/</id>
    <published>2019-06-01T13:38:43.000Z</published>
    <updated>2019-07-13T18:55:37.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先感谢作者李林锋给我们提供出这本关于异步非阻塞通信领域的经典之作，本书基于Netty 5.0编写。Netty如今已经在如下几个领域得到了大规模的商业应用:</p><ul><li>互联网领域</li><li>电信领域</li><li>大数据领域</li><li>银行、证券等金融领域</li><li>游戏行业</li><li>电力等企业市场</li></ul></blockquote><blockquote><p>看到Netty如火如荼的发展，有心能够深入学习，希望通过此书，站在前辈的肩膀上走出属于自己的路，猿类崛起！</p></blockquote><h1 id="netty-基础篇"><a href="#netty-基础篇" class="headerlink" title="netty 基础篇"></a>netty 基础篇</h1><pre><code>**走进Java  NIO**</code></pre><h2 id="第一章-java的I-O演进之路"><a href="#第一章-java的I-O演进之路" class="headerlink" title="第一章.java的I/O演进之路"></a><code>第一章.java的I/O演进之路</code></h2><p>在开始学习Netty之前，我们首先对UNIX系统常用的I/O模型进行介绍，然后对Java的I/O历史演进进行简单的说明。</p><h3 id="1-1-I-O基础入门"><a href="#1-1-I-O基础入门" class="headerlink" title="1.1  I/O基础入门"></a>1.1  I/O基础入门</h3><p>传统的BIO 在高性能领域一直被业界所诟病，主要有如下问题：</p><ul><li>没有数据缓冲区，I/O性能存在问题</li><li>没有C 或 C++中的Channel概念，只有输入和输出流</li><li>同步阻塞IO通常会导致通信或线程被长时间阻塞</li><li>支持的字符集有限，硬件可移植性不好</li></ul><h4 id="1-1-1-Linux-网络I-O模型简介"><a href="#1-1-1-Linux-网络I-O模型简介" class="headerlink" title="1.1.1  Linux 网络I/O模型简介"></a>1.1.1  Linux 网络I/O模型简介</h4><p>（1） 阻塞I/O 模型</p><p>　　最常用的I/O模型就是阻塞I/O模型，缺省情况下，所有的文件操作都是I/O阻塞的。在系统的进程空间中调用recvfrom，当访问文件系统的时候，其系统调用直到文件到达且被复制到系统的缓冲区或者发生错误异常的时候才会返回，在此期间，系统会一直等待，进程从开始到结束一直处于阻塞状态，因此被称为阻塞I/O模型。</p><p>（2） 非阻塞I/O 模型</p><p>　　recvfrom从应用层到内核，如果该缓冲区中没有数据的话，则直接返回一个EWOULDBLOCK错误，一般对非阻塞I/O模型进行轮询检查这个状态，看内核是否有数据到来.</p><p>（3） I/O复用模型</p><p>　　Linux 提供select/poll，进程通过一个或多个fd传递给select或者poll系统调用，阻塞在select操作上，这样select/poll可以帮助我们侦测多个fd是否处于就绪状态。select/poll 系统是瞬息扫描fd是否就绪，而且支持的fd数量有限，因此它的使用受到了一些限制。Linux系统还提供了一个epoll系统，它采用事件驱动方式来代替顺序扫描，因此性能更高，当fd就绪的时候，立即回调rollback函数</p><p>（4） 信号I/O复用模型</p><p>　　首先开启套接口信号驱动I/O功能,并通过系统调用sigaction执行一个信号处理函数(此操作是非阻塞的),当数据准备就绪的时候,就为该进程生成一个sigio信号，通过信号回调通知应用程序调用recvform来读取数据，并通知主循环函数处理数据。</p><p>（5） 异步IO</p><p>　　告知内核启动某个操作，并让内核在整个操作完成是通知我们。这种模型和信号I/O模型的区别是：信号I/O模型是告知我们和是可以开始I/O操作，异步I/O告知我们I/O操作何时已经完成。<br><img src="/2019/06/01/netty/netty权威指南学习（一）/15590935389763.jpg" alt><br><img src="/2019/06/01/netty/netty权威指南学习（一）/15590937479358.jpg" alt></p><h4 id="1-1-2-I-O-多路复用技术"><a href="#1-1-2-I-O-多路复用技术" class="headerlink" title="1.1.2   I/O 多路复用技术"></a>1.1.2   I/O 多路复用技术</h4><p>在IO编程过程中，当需要同事处理多个客户端接入请求时，可以利用多线程或者IO多路复用技术进行处理。IO多路复用技术通过把多个IO的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。与传统的多线程/多进程模型相比，IO多路复用的最大优势是系统开销小，IO多路复用技术的主要应用场景如下：</p><ul><li>服务器需要同时处理多个处于监听状态或多个连接状态的套接字；</li><li>服务器需要同时处理多种网络协议的套接字。</li></ul><p>目前支持IO多路复用的系统调用有select、pselect、poll、epoll，在linux网络编程过程中，很长时间都在使用select做<strong><em>轮询和网络事件通知</em></strong>，然而select的固有缺陷迫使Linux寻找替代方案，最终Linux选择了epoll，epoll与select的原理类似，单做了很大改进，总结如下：</p><p>（1） 支持一个进程打开的socket描述符（FD）不受限制（金受限于操作系统的最大文件句柄数）</p><pre><code>select的最大缺陷就是单个进程打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024。我们可以通过修改这个宏修改并重新编译内核，但这样也给操作系统造成性能的损耗，另外进程间的数据交换非常麻烦，由于java没有共享内存，需要通过Socket通信或者其他方式进行数据同步，这样带来了额外的性能损耗，增加了程序的复杂度，也不是一种很好的解决方案。epoll并没有这个最大文件句柄数的限制，epoll的处理能力和内存的关系比较大，内存越大，epoll的处理能力越强。</code></pre><p>（2） IO效率不会随着FD数目的增加而线性下降</p><pre><code>epoll只会对活跃的socket进行操作，这是因为在内核实现中epoll是根据每个fd上面的额callback函数实现的。</code></pre><p>（3） 使用mmap加速内核与用户控件的消息传递</p><pre><code>无论是select、poll还是epoll都需要内核把FD消息通知给用户空间，如何避免不必要的内存复制就显得非常重要，epoll是通过内核和用户空间mmap同一块内存实现的</code></pre><p>（4） epoll的API更加简单</p><h3 id="1-2-Java的IO演进"><a href="#1-2-Java的IO演进" class="headerlink" title="1.2 Java的IO演进"></a>1.2 Java的IO演进</h3><p>在JDK 1.4 推出Java  NIO 之前，java的所有socket通信都采用了同步阻塞模式（BIO），这种已请求一应答的通信模型简化了上层的应用开发，但是在性能可可靠性方面却存在这巨大的瓶颈。Java 1.4 NIO以 JSR-51 的身份正式随JDK 发布，它新增了java.nio包，同乐很多进行异步IO开发的API和类库，主要的类和接口如下：</p><ul><li>进行异步IO操作的缓冲区 <em>ByteBuffer</em> 等</li><li>进行异步IO操作的管道Pipe</li><li>进行各种IO操作（异步或同步）的<em>Channel</em>，包括<em>ServerSocketChannel</em>和<em>SocketChannel</em></li><li>多种字符集的编码和解码能力</li><li>实现非阻塞IO操作的多路复用器<em>Selector</em></li><li>基于流行的Perl实现的额正则表达式类库</li><li>文件通道<em>FileChannel</em></li></ul><p>新的NIO类库促进了Java 异步非阻塞编程的发展和应用，但是他还有不完善的地方，特别是对文件系统的处理能力不足，主要问题如下</p><ul><li>没有同意的文件属性（例如读写权限）</li><li>API能力较弱，例如目录的级联创建和递归遍历，往往需要自己实现</li><li>所有的文件操作都是同步阻塞调用，不支持异步文件读写操作</li><li>底层存储系统的一些高级API无法使用</li></ul><p>2017年7月28日JDK1.7发布，将原来的NIO类库进行了升级，被称为NIO2.0，NIO2.0由JSR-203演进而来，它主要提供了如下三个方面的改进：</p><ul><li>提供能够批量获取文件属性的API，这些API具有平台无关性，不与特性的文件系统耦合，另外它还提供了标准文件系统的SPI，供各个服务提供商扩展实现</li><li>提供AIO功能，支持基于文件的异步IO操作和针对网络套接字的异步操作</li><li>完成JSR-51 定义的通道功能，包括对配置和多波数据报的支持</li></ul><h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h3><p>通过此章了解了UNIX 的网络编程的5种IO模型，学习IO多路复用的基础知识。对java IO 的演进有了一些直观认识，下章对阻塞IO和非阻塞IO进行详细讲解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先感谢作者李林锋给我们提供出这本关于异步非阻塞通信领域的经典之作，本书基于Netty 5.0编写。Netty如今已经在如下几个领域得到了大规模的商业应用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互联网领域&lt;/li&gt;
&lt;li&gt;电信领域&lt;/li&gt;
&lt;li&gt;大数据
      
    
    </summary>
    
      <category term="netty" scheme="http://www.throne4j.com/categories/netty/"/>
    
    
      <category term="netty" scheme="http://www.throne4j.com/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://www.throne4j.com/2018/07/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%9E%8B/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.throne4j.com/2018/07/01/设计模式/结构型模型/桥接模式/</id>
    <published>2018-07-01T13:38:43.000Z</published>
    <updated>2019-08-09T15:09:13.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="桥接模式的定义"><a href="#桥接模式的定义" class="headerlink" title="桥接模式的定义"></a>桥接模式的定义</h2><p>桥接模式（Bridge Pattern），将抽象部分与它的实现部分分离，使它们都可以独立地变化。这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>桥接模式包含如下角色：</p><p>Abstraction：抽象类 （Shape）<br>RefinedAbstraction：扩充抽象类(Circle)<br>Implementor：实现类接口 (DrawAPI)<br>ConcreteImplementor：具体实现类 (RedCircle、GreenCircle)</p><h3 id="uml图解"><a href="#uml图解" class="headerlink" title="uml图解"></a>uml图解</h3><p><img src="/2018/07/01/设计模式/结构型模型/桥接模式/bridge_pattern_uml_diagram.jpg" alt></p><h2 id="桥接模式使用场景"><a href="#桥接模式使用场景" class="headerlink" title="桥接模式使用场景"></a>桥接模式使用场景</h2><ul><li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，<br>避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li><li>抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。</li><li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li><li>虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。<br>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: red, radius: "</span> + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: green, radius: "</span></span><br><span class="line">         + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 DrawAPI 接口创建抽象类 Shape。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x, y, radius;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(drawAPI);</span><br><span class="line">      <span class="keyword">this</span>.x = x;  </span><br><span class="line">      <span class="keyword">this</span>.y = y;  </span><br><span class="line">      <span class="keyword">this</span>.radius = radius;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      drawAPI.drawCircle(radius,x,y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> RedCircle());</span><br><span class="line">      Shape greenCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> GreenCircle());</span><br><span class="line"> </span><br><span class="line">      redCircle.draw();</span><br><span class="line">      greenCircle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h1&gt;&lt;h2 id=&quot;桥接模式的定义&quot;&gt;&lt;a href=&quot;#桥接模式的定义&quot; class=&quot;headerlink&quot; title=&quot;桥接模
      
    
    </summary>
    
      <category term="设计模式" scheme="http://www.throne4j.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://www.throne4j.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
