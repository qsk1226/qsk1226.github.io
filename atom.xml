<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大爷来玩儿啊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.throne4j.com/"/>
  <updated>2019-12-04T14:34:00.277Z</updated>
  <id>http://www.throne4j.com/</id>
  
  <author>
    <name>我跟人飙车来着</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.throne4j.com/qsk/uncategorized/undefined.html"/>
    <id>http://www.throne4j.com/qsk/uncategorized/undefined.html</id>
    <published>2019-12-04T14:34:00.277Z</published>
    <updated>2019-12-04T14:34:00.277Z</updated>
    
    <content type="html"><![CDATA[<p>netty 内存使用技巧  堆外内存<br>更广阔的的空间<br>减少冗余细节</p><p>内存池技巧</p><p>抽象类不能实例化</p><p>为什么使用对象池</p><ul><li>创建对象开销大</li><li>对象高频率创建切可复用</li><li>支持并发又能保护系统</li><li>维护、共享有限资源</li></ul><p>开源实现 commons pool<br>netty 轻量级对象池实现  Recycler<br>Recycler 使用场景</p><p>内存池/</p><p>ObjectPool<br>Recycler</p><p>主线<br>    ourthread<br>        创建selector<br>        创建 server socket channel<br>        初始化 server socket channel<br>        给server socket channel 从boss group 中选择一个NioEventLoop</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;netty 内存使用技巧  堆外内存&lt;br&gt;更广阔的的空间&lt;br&gt;减少冗余细节&lt;/p&gt;
&lt;p&gt;内存池技巧&lt;/p&gt;
&lt;p&gt;抽象类不能实例化&lt;/p&gt;
&lt;p&gt;为什么使用对象池&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建对象开销大&lt;/li&gt;
&lt;li&gt;对象高频率创建切可复用&lt;/li&gt;
&lt;li&gt;支
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>golang安装配置</title>
    <link href="http://www.throne4j.com/qsk/golang/golang_install_config.html"/>
    <id>http://www.throne4j.com/qsk/golang/golang_install_config.html</id>
    <published>2019-06-03T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:01.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go语言"><a href="#go语言" class="headerlink" title="go语言"></a>go语言</h1><p>在mac osx系统上安装go语言非常简单，直接在官网上下载mac os版的安装包一路next即可安装成功。<br>另外可使用HomeBrew来实现go语言的安装，brew install go</p><h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>配置 GOPATH 设置go项目的工作目录，在go项目的工作目录中至少存在三个目录：</p><ul><li>src<blockquote><p>用于以代码包的形式组织并保存go源文件，这里的代码包与src下的子目录一一对应。</p></blockquote></li><li>pkg<blockquote><p>编译后生成的文件（.a文件）。非main函数的文件在go install后生成。<br>  用于存放通过go install命令安装后的代码包的归档文件。前提是代码包中必须包含go库源码文件。</p></blockquote></li><li>bin<blockquote><p>存放编译后生成的可执行文件,通过go install命令完成安装后，保存由go命令源码文件生成的可执行文件。</p></blockquote></li></ul><h2 id="GOBIN"><a href="#GOBIN" class="headerlink" title="GOBIN"></a>GOBIN</h2><p>GOBIN是 GOPATH 下的bin目录</p><h2 id="GOROOT-go语言的安装路径"><a href="#GOROOT-go语言的安装路径" class="headerlink" title="GOROOT go语言的安装路径"></a>GOROOT go语言的安装路径</h2><h2 id="源码文件"><a href="#源码文件" class="headerlink" title="源码文件"></a>源码文件</h2><p>1) 命令源码文件<br>    &gt; 如果一个源码文件被声明属于main代码包，且该文件代码中包含无参数声明和结果声明的main函数，则他就是命令源码文件。命令源码文件可以直接通过go run 命令直接启动运行。<br>2) 库源码文件<br>    &gt;通常，库源码文件声明的包名 会 与它直接所属的代码包名一致，且库源码文件中不包含无参数声明和无结果声明的main函数<br>3) 测试源码文件<br>    &gt; 测试源码文件是一种特殊的库文件，可以通过执行 go test 命令运行当前代码包下的所有测试源码文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;go语言&quot;&gt;&lt;a href=&quot;#go语言&quot; class=&quot;headerlink&quot; title=&quot;go语言&quot;&gt;&lt;/a&gt;go语言&lt;/h1&gt;&lt;p&gt;在mac osx系统上安装go语言非常简单，直接在官网上下载mac os版的安装包一路next即可安装成功。&lt;br&gt;另外可使
      
    
    </summary>
    
      <category term="golang" scheme="http://www.throne4j.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.throne4j.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>spring-core包阅读记录</title>
    <link href="http://www.throne4j.com/qsk/spring/undefined.html"/>
    <id>http://www.throne4j.com/qsk/spring/undefined.html</id>
    <published>2019-06-02T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:01.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-core-学习记录"><a href="#spring-core-学习记录" class="headerlink" title="spring-core 学习记录"></a>spring-core 学习记录</h1><h2 id="org-springframework-util类作用记录"><a href="#org-springframework-util类作用记录" class="headerlink" title="org.springframework.util类作用记录"></a>org.springframework.util类作用记录</h2><ul><li>AutoPopulatingList  <blockquote><p>对list的一个简单包装</p></blockquote></li><li>DigestUtils <blockquote><p>计算摘要的各种方法工具</p></blockquote></li><li>Base64Utils  <blockquote><p>一个用于Base64编码和解码的简单实用程序类</p></blockquote></li><li>ErrorHandler(函数接口)  <blockquote><p>处理异常的策略接口</p></blockquote></li><li>InstanceFilter <blockquote><p>一个简单的实例过滤器，它根据包含和排除元素的集合检查给定的实例是否匹配。</p></blockquote></li><li>ClassUtils</li><li>ReflectionUtils</li><li>CollectionUtils</li><li>ConcurrentReferenceHashMap</li><li>CustomizableThreadCreator  <blockquote><p>用于创建新的{@link Thread}实例的简单可自定义助手类。提供各种bean属性:线程名称前缀、线程优先级等。</p></blockquote></li><li>PropertiesPersister  <blockquote><p>用于持久化{@code java.util的策略接口。属性}，允许可插入的解析策略。 实现有 DefaultPropertiesPersister</p></blockquote></li><li>FastByteArrayOutputStream</li><li>FileCopyUtils <blockquote><p>用于文件和流复制的简单实用程序方法</p></blockquote></li><li>FileSystemUtils  <blockquote><p>处理文件系统的实用方法。</p></blockquote></li><li>InstanceFilter  <blockquote><p>一个简单的实例过滤器，它根据包含和排除元素的集合检查给定的实例是否匹配。ExceptionTypeFilter</p></blockquote></li><li>LinkedCaseInsensitiveMap</li><li>LinkedMultiValueMap</li><li>PatternMatchUtils  <blockquote><p>用于简单模式匹配的实用方法，特别是对于Spring的典型“xxx<em>”、“</em>xxx”和“<em>xxx</em>”模式样式。</p></blockquote></li><li>PropertyPlaceholderHelper <blockquote><p>用于处理具有占位符值的字符串的实用程序类</p></blockquote></li><li>SystemPropertyUtils <blockquote><p>用于解析文本中的占位符的Helper类。通常应用于文件路径。</p></blockquote></li><li>MethodInvoker <blockquote><p>Helper类，它允许指定以声明方式调用的方法，无论是静态的还是非静态的。</p></blockquote></li><li>NumberUtils</li><li>ObjectUtils </li><li>ResourceUtils <blockquote><p>可处理jar包内的路径资源</p></blockquote></li><li>SerializationUtils</li><li>SocketUtils <blockquote><p>处理网络套接字的简单实用方法，例如：用于查找{@code localhost}上的可用端口。</p></blockquote></li><li>StreamUtils <blockquote><p>处理流的实用程序</p></blockquote></li><li>StringUtils <blockquote><p>字符串的实用方法</p></blockquote></li><li>StringValueResolver(函数接口) <blockquote><p>用于解析字符串值的简单策略接口。</p></blockquote></li><li>TypeUtils <blockquote><p>用于处理Java 5泛型类型参数的实用程序。</p></blockquote><h2 id="org-springframework-util-concurrent-并发包类说明"><a href="#org-springframework-util-concurrent-并发包类说明" class="headerlink" title="org.springframework.util.concurrent 并发包类说明"></a>org.springframework.util.concurrent 并发包类说明</h2></li><li>ListenableFuture (接口)<blockquote><p>扩展{@link Future}，使其能够接受完成回调。如果在添加回调时未来已完成，则立即触发回调。</p></blockquote></li><li>CompletableToListenableFutureAdapter  <blockquote><p>将{@link CompletableFuture}或{@link CompletionStage}调整为Spring {@link ListenableFuture}。</p></blockquote></li><li>DelegatingCompletableFuture <blockquote><p>扩展的{@link CompletableFuture}，允许取消委托 连同{@link CompletableFuture}本身。</p></blockquote></li><li>FailureCallback (函数接口) <blockquote><p>Failure callback for a {@link ListenableFuture}.</p></blockquote></li><li>SuccessCallback(函数接口) <blockquote><p>Success callback for a {@link ListenableFuture}.</p></blockquote></li><li>FutureAdapter <blockquote><p>一个抽象类，它将在S上参数化的{@link Future}调整为在T上参数化的{@code Future}。所有方法都委托给适配器，其中{@link #get()}和{@link #get(long, TimeUnit)}对适配器的结果调用{@link #adapt(Object)}。</p></blockquote></li><li>ListenableFutureAdapter<blockquote><p>extends FutureAdapter implements ListenableFuture</p></blockquote></li><li>ListenableFutureCallback (接口)<blockquote><p>结果(成功或失败)的回调机制，来自{@link ListenableFuture}。<br>  extends SuccessCallback， FailureCallback</p></blockquote></li><li>ListenableFutureCallbackRegistry <blockquote><p>用于维护成功和失败回调并帮助通知它们的{@link ListenableFuture}实现的Helper类。</p></blockquote></li><li>ListenableFutureTask <blockquote><p>实现{@link ListenableFuture}的{@link FutureTask}的扩展。<br>  ListenableFutureTask extends FutureTask<t> implements ListenableFuture<br>  其实现类有 SettableTask</t></p></blockquote></li></ul><h2 id="org-springframework-core-task-任务执行"><a href="#org-springframework-core-task-任务执行" class="headerlink" title="org.springframework.core.task 任务执行"></a>org.springframework.core.task 任务执行</h2><ul><li><p>TaskExecutor</p><blockquote><p>简单的任务执行器接口，抽象了{@link Runnable}的执行。</p><ul><li>继承自java.util.concurrent.Executor<br>执行已提交的{@link Runnable}任务的对象。<br>  在java中Executor的实现类 均实现了{@link ExecutorService}这个更加广泛的接口，具体实现类可由Executors类生产。</li></ul></blockquote></li><li><p>AsyncTaskExecutor</p><blockquote><p>继承自TaskExecutor，实现了异步扩展功能。</p></blockquote></li><li><p>SimpleAsyncTaskExecutor</p><blockquote><p>为每个任务触发一个新线程的实现，异步地执行。</p></blockquote></li><li><p>SyncTaskExecutor</p></li><li><p>TaskDecorator(函数接口)</p><blockquote><p>一个回调接口，用于将装饰器应用于将要执行的任何{@link Runnable}。</p></blockquote></li><li><p>ExecutorServiceAdapter</p><blockquote><p>适配器，它接受一个Spring {@link org.springframework.core.TaskExecutor}, 并公开一个完整的{@code java.util.concurrent。ExecutorService}</p></blockquote></li><li><p>TaskExecutorAdapter</p><blockquote><p>适配器，它接受JDK {@code java.util.concurrent。并公开一个Spring {@link org.springframework.core.task。TaskExecutor}。</p></blockquote><h2 id="org-springframework-core-包类解析"><a href="#org-springframework-core-包类解析" class="headerlink" title="org.springframework.core 包类解析"></a>org.springframework.core 包类解析</h2></li><li><p>AliasRegistry </p><blockquote><p>用于管理别名的通用接口。作为超级接口</p><ul><li>SimpleAliasRegistry</li><li>BeanDefinitionRegistry</li></ul></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-core-学习记录&quot;&gt;&lt;a href=&quot;#spring-core-学习记录&quot; class=&quot;headerlink&quot; title=&quot;spring-core 学习记录&quot;&gt;&lt;/a&gt;spring-core 学习记录&lt;/h1&gt;&lt;h2 id=&quot;org-sprin
      
    
    </summary>
    
      <category term="spring" scheme="http://www.throne4j.com/categories/spring/"/>
    
    
      <category term="spring-core" scheme="http://www.throne4j.com/tags/spring-core/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://www.throne4j.com/qsk/design-pattern/bridge-pattern.html"/>
    <id>http://www.throne4j.com/qsk/design-pattern/bridge-pattern.html</id>
    <published>2018-07-01T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:30.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="桥接模式的定义"><a href="#桥接模式的定义" class="headerlink" title="桥接模式的定义"></a>桥接模式的定义</h2><p>桥接模式（Bridge Pattern），将抽象部分与它的实现部分分离，使它们都可以独立地变化。这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>桥接模式包含如下角色：</p><p>Abstraction：抽象类 （Shape）<br>RefinedAbstraction：扩充抽象类(Circle)<br>Implementor：实现类接口 (DrawAPI)<br>ConcreteImplementor：具体实现类 (RedCircle、GreenCircle)</p><h3 id="uml图解"><a href="#uml图解" class="headerlink" title="uml图解"></a>uml图解</h3><p><img src="/qsk/design-pattern/bridge-pattern/bridge_pattern_uml_diagram.jpg" alt="桥接模式"></p><h2 id="桥接模式使用场景"><a href="#桥接模式使用场景" class="headerlink" title="桥接模式使用场景"></a>桥接模式使用场景</h2><ul><li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，<br>避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li><li>抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。</li><li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li><li>虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。<br>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: red, radius: "</span> + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: green, radius: "</span></span><br><span class="line">         + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 DrawAPI 接口创建抽象类 Shape。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x, y, radius;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(drawAPI);</span><br><span class="line">      <span class="keyword">this</span>.x = x;  </span><br><span class="line">      <span class="keyword">this</span>.y = y;  </span><br><span class="line">      <span class="keyword">this</span>.radius = radius;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      drawAPI.drawCircle(radius,x,y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> RedCircle());</span><br><span class="line">      Shape greenCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> GreenCircle());</span><br><span class="line"> </span><br><span class="line">      redCircle.draw();</span><br><span class="line">      greenCircle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h1&gt;&lt;h2 id=&quot;桥接模式的定义&quot;&gt;&lt;a href=&quot;#桥接模式的定义&quot; class=&quot;headerlink&quot; title=&quot;桥接模
      
    
    </summary>
    
      <category term="design-pattern" scheme="http://www.throne4j.com/categories/design-pattern/"/>
    
    
      <category term="结构型模式" scheme="http://www.throne4j.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Queue详解</title>
    <link href="http://www.throne4j.com/qsk/java/queue.html"/>
    <id>http://www.throne4j.com/qsk/java/queue.html</id>
    <published>2016-07-19T13:30:08.000Z</published>
    <updated>2019-09-17T17:03:48.253Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，</p></li><li><p><a href="/qsk/java/queue.html">Queue队列</a></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/collection_record.html&quot;&gt;Collection集合&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/list.html&quot;&gt;List集合&lt;/a&gt; 继承Col
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="集合" scheme="http://www.throne4j.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Set详解</title>
    <link href="http://www.throne4j.com/qsk/java/set.html"/>
    <id>http://www.throne4j.com/qsk/java/set.html</id>
    <published>2016-07-15T06:23:08.000Z</published>
    <updated>2019-09-30T06:19:57.676Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，</p></li><li><p><a href="/qsk/java/queue.html">Queue队列</a></p></li></ul><hr><h1 id="Set-详解"><a href="#Set-详解" class="headerlink" title="Set 详解"></a>Set 详解</h1><p>Set继承自Collection接口,内部实现由HashMap实现,并维护了双向链表。</p><ul><li>Set集合中每个元素都是独一无二的，它不包含重复元素(元素equals相等),可包含至多一个null元素。</li><li>Set集合不保证元素的有序性，<strong>实现SortedSet接口的集合除外。</strong><h2 id="UML图解"><a href="#UML图解" class="headerlink" title="UML图解"></a>UML图解</h2><img src="/qsk/java/set/Set_uml.png" alt="Set_uml"></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><p>HashSet实现了Set接口，内部由一个哈希表（HashMap）支持实现相关set功能。<br>我们看下它的构造器和add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E, Object&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中看到Set的元素是存储在map集合中的，set自述:  map之心，昭昭可鉴。</p><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>TreeSet是有序的Set集合，<strong>基于TreeMap实现</strong>。</p><p>集合使用元素的 Comparable进行自然排序，或者使用在排序集创建时提供的Comparator进行排序。<br>插入排序集的所有元素必须实现Comparable接口(或指定比较器Comparator)</p><ul><li><p>构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TreeSet的存储容器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E, Object&gt; m;</span><br><span class="line"><span class="comment">// 构造存指定储存储容器的TreeSet实例</span></span><br><span class="line">TreeSet(NavigableMap&lt;E, Object&gt; m) &#123;</span><br><span class="line">    <span class="keyword">this</span>.m = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认构造TreeMap的TreeSet实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E, Object&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定比较器的TreeSet实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>iterator() 遍历TreeSet的迭代方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.navigableKeySet().iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>descendingIterator() 遍历TreeSet的逆向迭代方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Iterator&lt;E&gt; descendingIterator() &#123;</span><br><span class="line">    return m.descendingKeySet().iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>descendingSet() 返回此集合中包含的元素的逆序视图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NavigableSet&lt;E&gt; descendingSet() &#123;</span><br><span class="line">    return new TreeSet&lt;&gt;(m.descendingMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>subSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> fromInclusive,</span></span></span><br><span class="line"><span class="function"><span class="params">                              E toElement, <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;&gt;(m.subMap(fromElement, fromInclusive,</span><br><span class="line">            toElement, toInclusive));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>headSet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;&gt;(m.headMap(toElement, inclusive));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>tailSet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public NavigableSet&lt;E&gt; tailSet(E fromElement, boolean inclusive) &#123;</span><br><span class="line">    return new TreeSet&lt;&gt;(m.tailMap(fromElement, inclusive));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>comparator() 获取元素的比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator() &#123;</span><br><span class="line">    <span class="keyword">return</span> m.comparator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>first()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.firstKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>last()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public E last() &#123;</span><br><span class="line">    return m.lastKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>E lower(E e) 返回比e小的最大元素，如果没有返回null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">lower</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.lowerKey(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>E floor(E e) 返回小于等于e的最大元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">floor</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.floorKey(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>E ceiling(E e) 返回会大于等于e的最小元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">ceiling</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.ceilingKey(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>higher(E e) 返回大于e的最小元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">higher</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.higherKey(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>pollFirst() 检索并删除第一个元素，Set为空则返回null</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map.Entry&lt;E, ?&gt; e = m.pollFirstEntry();</span><br><span class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span>) ? <span class="keyword">null</span> : e.getKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pollLast() 检索并删除最后一个元素，Set为空则返回null<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map.Entry&lt;E, ?&gt; e = m.pollLastEntry();</span><br><span class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span>) ? <span class="keyword">null</span> : e.getKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/collection_record.html&quot;&gt;Collection集合&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/list.html&quot;&gt;List集合&lt;/a&gt; 继承Col
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="集合" scheme="http://www.throne4j.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>list详解</title>
    <link href="http://www.throne4j.com/qsk/java/list.html"/>
    <id>http://www.throne4j.com/qsk/java/list.html</id>
    <published>2016-07-13T19:23:08.000Z</published>
    <updated>2019-09-30T06:08:37.205Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，内部实现通过HashMap实现</p></li><li><p><a href="/qsk/java/queue.html">Queue队列</a></p></li></ul><hr><h1 id="鸟瞰-List接口"><a href="#鸟瞰-List接口" class="headerlink" title="鸟瞰 List接口"></a>鸟瞰 List接口</h1><p>List继承了Collection接口，它用某种特定的插入顺序来维护元素顺序，<strong><em>集合有序、允许重复值、可插入null</em></strong>。下面我们看下List的UML图：</p><p><img src="/qsk/java/list/List%E6%8E%A5%E5%8F%A3UML.png" alt="List接口UML"></p><ul><li><p>ArrayList<br>基于动态数组实现，可以动态的扩容，用户拥有对元素精确插入的控制权。当集合中对插入元素数据的速度要求不高，但是要求快速访问元素数据，则使用此集合</p></li><li><p>LinkedList<br>基于链表实现，是一个双向循环列表，可以被当做堆栈使用。当集合中对访问元素数据速度不做要求不高，但是对插入和删除元素数据速度要求高的情况，则使用LinkedList</p></li><li><p>Vector<br>同样基于数组实现，并且满足多线程环境下的安全操作。Collections.synchronizedList(list)或者并发包下面的CopyOnWriteArrayList来实现线程安全的集合。</p></li><li><p>Stack<br>基于数组实现，是栈，它继承与Vector，特性是FILO（先进后出）。当集合中有需求是希望后保存的数据先读取出来，则使用Stack</p></li></ul><hr><h2 id="AbstractList抽象类方法"><a href="#AbstractList抽象类方法" class="headerlink" title="AbstractList抽象类方法"></a>AbstractList抽象类方法</h2><pre><code>Itr 内部类 ,iterator迭代器ListItr 内部类,listIterator迭代器addgetsetaddremoveindexOf(int index)lastIndexOfclearaddAlliterator() listIterator() 集合全部元素的双向迭代器listIterator(int index)  从index位置开始的迭代器subList(int from, int to) 截取子集合equalshashCoderemoveRangerangeCheckForAdd(int) 范围检查outOfBoundsMsg(int) 是否超出界限modCount  集合被修改了多少次</code></pre><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> listIterator(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SubList-子集合类，從如下代碼中看到，子集合內部依然保留了父集合中的全部元素，只是子集合的長度發生變化以及各元素會取偏移之後的元素。"><a href="#SubList-子集合类，從如下代碼中看到，子集合內部依然保留了父集合中的全部元素，只是子集合的長度發生變化以及各元素會取偏移之後的元素。" class="headerlink" title="SubList 子集合类，從如下代碼中看到，子集合內部依然保留了父集合中的全部元素，只是子集合的長度發生變化以及各元素會取偏移之後的元素。"></a>SubList 子集合类，從如下代碼中看到，子集合內部依然保留了父集合中的全部元素，只是子集合的長度發生變化以及各元素會取偏移之後的元素。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">class SubList&lt;E&gt; extends AbstractList&lt;E&gt; &#123;</span><br><span class="line">    //父集合</span><br><span class="line">    private final AbstractList&lt;E&gt; l;</span><br><span class="line">    //子集合元素偏移量</span><br><span class="line">    private final int offset;</span><br><span class="line">    //子集合長度</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    SubList(AbstractList&lt;E&gt; list, int fromIndex, int toIndex) &#123;</span><br><span class="line">        if (fromIndex &lt; 0)</span><br><span class="line">            throw new IndexOutOfBoundsException(&quot;fromIndex = &quot; + fromIndex);</span><br><span class="line">        if (toIndex &gt; list.size())</span><br><span class="line">            throw new IndexOutOfBoundsException(&quot;toIndex = &quot; + toIndex);</span><br><span class="line">        if (fromIndex &gt; toIndex)</span><br><span class="line">            throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +</span><br><span class="line">                    &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);</span><br><span class="line">        l = list;</span><br><span class="line">        offset = fromIndex;</span><br><span class="line">        size = toIndex - fromIndex;</span><br><span class="line">        this.modCount = l.modCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E set(int index, E element) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        return l.set(index + offset, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        return l.get(index + offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void add(int index, E element) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        l.add(index + offset, element);</span><br><span class="line">        this.modCount = l.modCount;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E remove(int index) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        E result = l.remove(index + offset);</span><br><span class="line">        this.modCount = l.modCount;</span><br><span class="line">        size--;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        l.removeRange(fromIndex + offset, toIndex + offset);</span><br><span class="line">        this.modCount = l.modCount;</span><br><span class="line">        size -= (toIndex - fromIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        return addAll(size, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        int cSize = c.size();</span><br><span class="line">        if (cSize == 0)</span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        checkForComodification();</span><br><span class="line">        l.addAll(offset + index, c);</span><br><span class="line">        this.modCount = l.modCount;</span><br><span class="line">        size += cSize;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">        return listIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ListIterator&lt;E&gt; listIterator(final int index) &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        return new ListIterator&lt;E&gt;() &#123;</span><br><span class="line">            private final ListIterator&lt;E&gt; i = l.listIterator(index + offset);</span><br><span class="line"></span><br><span class="line">            public boolean hasNext() &#123;</span><br><span class="line">                return nextIndex() &lt; size;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public E next() &#123;</span><br><span class="line">                if (hasNext())</span><br><span class="line">                    return i.next();</span><br><span class="line">                else</span><br><span class="line">                    throw new NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public boolean hasPrevious() &#123;</span><br><span class="line">                return previousIndex() &gt;= 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public E previous() &#123;</span><br><span class="line">                if (hasPrevious())</span><br><span class="line">                    return i.previous();</span><br><span class="line">                else</span><br><span class="line">                    throw new NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public int nextIndex() &#123;</span><br><span class="line">                return i.nextIndex() - offset;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public int previousIndex() &#123;</span><br><span class="line">                return i.previousIndex() - offset;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void remove() &#123;</span><br><span class="line">                i.remove();</span><br><span class="line">                SubList.this.modCount = l.modCount;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void set(E e) &#123;</span><br><span class="line">                i.set(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            public void add(E e) &#123;</span><br><span class="line">                i.add(e);</span><br><span class="line">                SubList.this.modCount = l.modCount;</span><br><span class="line">                size++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span><br><span class="line">        return new SubList&lt;&gt;(this, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void rangeCheck(int index) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt;= size)</span><br><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void rangeCheckForAdd(int index) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt; size)</span><br><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String outOfBoundsMsg(int index) &#123;</span><br><span class="line">        return &quot;Index: &quot; + index + &quot;, Size: &quot; + size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void checkForComodification() &#123;</span><br><span class="line">        if (this.modCount != l.modCount)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RandomAccessSubList随机访问子集合"><a href="#RandomAccessSubList随机访问子集合" class="headerlink" title="RandomAccessSubList随机访问子集合"></a>RandomAccessSubList随机访问子集合</h3><h3 id="AbstractList私有內部類：Itr迭代器："><a href="#AbstractList私有內部類：Itr迭代器：" class="headerlink" title="AbstractList私有內部類：Itr迭代器："></a>AbstractList私有內部類：Itr迭代器：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Index of element to be returned by subsequent call to next.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Index of element returned by most recent call to next or</span></span><br><span class="line"><span class="comment">     * previous.  Reset to -1 if this element is deleted by a call</span></span><br><span class="line"><span class="comment">     * to remove.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The modCount value that the iterator believes that the backing</span></span><br><span class="line"><span class="comment">     * List should have.  If this expectation is violated, the iterator</span></span><br><span class="line"><span class="comment">     * has detected concurrent modification.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            E next = get(i);</span><br><span class="line">            lastRet = i;</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                cursor--;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AbstractList私有內部類ListItr:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        cursor = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">            E previous = get(i);</span><br><span class="line">            lastRet = cursor = i;</span><br><span class="line">            <span class="keyword">return</span> previous;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AbstractList.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            AbstractList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList由于是由数组实现，可实现自动扩容操作，默认初始容量：10，随着ArrayList中元素的增加，它的容量会不断的自动增长。</p><h3 id="ArrayList-序列化"><a href="#ArrayList-序列化" class="headerlink" title="ArrayList 序列化"></a>ArrayList 序列化</h3><p>通过源码，我们知道用于存储元素的数组elementData被transient关键字修饰，我们知道被transient修饰的对象不被应用在序列化，那么ArrayList是将元素序列化的呢？源码中有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//将ArrayList实例的状态保存到流中(即序列化它)。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从流(即反序列化)中重新构造ArrayList实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要这样实现呢？原因在于elementData作为存储元素的缓存数组，它会预留一些容量用于添加元素，这些预留的空间并不存储任何元素，为了保证序列化时拿到的是用户的实际大小的数组数据。<br>java序列化查看此篇章【<a href="/qsk/java/understand_java_serial.html">深入理解java序列化</a>】</p><hr><h3 id="list迭代器"><a href="#list迭代器" class="headerlink" title="list迭代器"></a>list迭代器</h3><p>我们知道在遍历List集合的时候不允许对集合进行修改操作，否则会抛出ConcurrentModifiedException异常信息，为了解决这个问题，可以使用List提供给我们的特殊迭代器<strong>ListIterator</strong>，此迭代器除了提供集合操作之外还允许双向访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"李磊"</span>);</span><br><span class="line">        list.add(<span class="string">"韩梅梅"</span>);</span><br><span class="line">        list.add(<span class="string">"Lucy"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        ListIterator&lt;String&gt; iterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            String element = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(element.equals(<span class="string">"李磊"</span>))&#123;</span><br><span class="line">                iterator.set(<span class="string">"韩梅梅她老公"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (element.equals(<span class="string">"Lucy"</span>)) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>输出结果 :<br>[李磊, 韩梅梅, Lucy]<br>[韩梅梅她老公, 韩梅梅]</p><hr><h3 id="ArrayList的常用操作"><a href="#ArrayList的常用操作" class="headerlink" title="ArrayList的常用操作"></a>ArrayList的常用操作</h3><h4 id="1-add-E-element-在末尾添加指定类型的元素"><a href="#1-add-E-element-在末尾添加指定类型的元素" class="headerlink" title="1. add(E element) 在末尾添加指定类型的元素"></a>1. add(E element) 在末尾添加指定类型的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 进行扩容操作，并增加modCounnnt </span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行扩容操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//列表被修改的次数</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">//将容量扩到1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// 将老集合元素复制到新长度的集合中</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-add-int-index-E-element-在下标为index的位置插入element元素，后面的元素后移一位"><a href="#2-add-int-index-E-element-在下标为index的位置插入element元素，后面的元素后移一位" class="headerlink" title="2. add(int index, E element) 在下标为index的位置插入element元素，后面的元素后移一位"></a>2. add(int index, E element) 在下标为index的位置插入element元素，后面的元素后移一位</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 对源数组进行复制处理（位移），从index + 1到size-index。主要目的就是空出index位置供数据插入</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-E-remove-int-index-移除下标为index的元素"><a href="#3-E-remove-int-index-移除下标为index的元素" class="headerlink" title="3. E remove(int index) 移除下标为index的元素"></a>3. E remove(int index) 移除下标为index的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-get-int-index-获取下标为index的元素"><a href="#4-get-int-index-获取下标为index的元素" class="headerlink" title="4. get(int index) 获取下标为index的元素"></a>4. get(int index) 获取下标为index的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="comment">//检查集合是否被修改</span></span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-set-int-index-E-element-将下标为index的元素设置为element"><a href="#5-set-int-index-E-element-将下标为index的元素设置为element" class="headerlink" title="5. set(int index, E element) 将下标为index的元素设置为element"></a>5. set(int index, E element) 将下标为index的元素设置为element</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        retur</span><br></pre></td></tr></table></figure><h4 id="6-trimToSize-将”elementData-”的大小设置为集合的当前大小-size"><a href="#6-trimToSize-将”elementData-”的大小设置为集合的当前大小-size" class="headerlink" title="6. trimToSize() 将”elementData[]”的大小设置为集合的当前大小(size)"></a>6. trimToSize() 将”elementData[]”的大小设置为集合的当前大小(size)</h4><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>LinkedList实现了 List 和<strong>Deque</strong>，实现所有可选列表操作，并允许所有元素(包括{@code null})。</p><ul><li>Deque : 支持在两端插入和删除元素的线性集合。</li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="LinkedList的基础属性及实现数据的结构"><a href="#LinkedList的基础属性及实现数据的结构" class="headerlink" title="LinkedList的基础属性及实现数据的结构"></a>LinkedList的基础属性及实现数据的结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合的长度</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="comment">// 为节点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此数据结构 实现了LinkedList双向链表功能</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 节点保存的数据</span></span><br><span class="line">    E item;</span><br><span class="line">    <span class="comment">//指向下一个元素</span></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    <span class="comment">// 指向前一个元素</span></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedList提供的List接口相关方法"><a href="#LinkedList提供的List接口相关方法" class="headerlink" title="LinkedList提供的List接口相关方法"></a>LinkedList提供的List接口相关方法</h4><h5 id="1-node-int-index-返回指定元素索引处的-非空-节点。"><a href="#1-node-int-index-返回指定元素索引处的-非空-节点。" class="headerlink" title="1. node(int index) 返回指定元素索引处的(非空)节点。"></a>1. node(int index) 返回指定元素索引处的(非空)节点。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// index 小于集合长度的1/2，从头部开始定位元素；反之，从尾部开始定位元素。</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Add-E-e-添加指定类型的元素"><a href="#2-Add-E-e-添加指定类型的元素" class="headerlink" title="2. Add(E e)添加指定类型的元素"></a>2. Add(E e)添加指定类型的元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 末尾设置为元素e</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录当前的末尾节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">// 构建元素为E的节点newNode</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 将last节点设置为newNode</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">// 如果尾结点为null，添加元素设置为头结点，否则，将原尾结点的next指向新节点newNode</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    <span class="comment">// 集合长度加1</span></span><br><span class="line">    size++;</span><br><span class="line">    <span class="comment">// 集合已被修改</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-add-int-index-E-element"><a href="#3-add-int-index-E-element" class="headerlink" title="3. add(int index, E element)"></a>3. add(int index, E element)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="comment">// index为集合长度的时候，添加末尾元素，否则在index之前添加元素</span></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-E-get-int-index-获取下标为index的元素"><a href="#4-E-get-int-index-获取下标为index的元素" class="headerlink" title="4. E get(int index) 获取下标为index的元素"></a>4. E get(int index) 获取下标为index的元素</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    return node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-remove-int-index-删除指定索引元素"><a href="#5-remove-int-index-删除指定索引元素" class="headerlink" title="5. remove(int index) 删除指定索引元素"></a>5. remove(int index) 删除指定索引元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line">    <span class="comment">// 头节点头结点为null</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾节点next指向为null</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-contain-Object-o-是否包含元素o"><a href="#6-contain-Object-o-是否包含元素o" class="headerlink" title="6. contain(Object o) 是否包含元素o"></a>6. contain(Object o) 是否包含元素o</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-clear"><a href="#7-clear" class="headerlink" title="7. clear()"></a>7. clear()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">        Node&lt;E&gt; next = x.next;</span><br><span class="line">        x.item = <span class="keyword">null</span>;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">        x = next;</span><br><span class="line">    &#125;</span><br><span class="line">    first = last = <span class="keyword">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-set-index-E-element-将index索引的元素设置为element"><a href="#8-set-index-E-element-将index索引的元素设置为element" class="headerlink" title="8. set(index, E element) 将index索引的元素设置为element"></a>8. set(index, E element) 将index索引的元素设置为element</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    return oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedList提供的Deque接口常用方法"><a href="#LinkedList提供的Deque接口常用方法" class="headerlink" title="LinkedList提供的Deque接口常用方法"></a>LinkedList提供的Deque接口常用方法</h4><h5 id="1-E-getFirst-获取头节点"><a href="#1-E-getFirst-获取头节点" class="headerlink" title="1. E getFirst() 获取头节点"></a>1. E getFirst() 获取头节点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> f.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-E-getLast-获取尾节点"><a href="#2-E-getLast-获取尾节点" class="headerlink" title="2. E getLast() 获取尾节点"></a>2. E getLast() 获取尾节点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public E getLast() &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    if (l == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return l.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-removeFirst"><a href="#3-removeFirst" class="headerlink" title="3. removeFirst()"></a>3. removeFirst()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-removeLast"><a href="#4-removeLast" class="headerlink" title="4. removeLast()"></a>4. removeLast()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = l.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    l.item = <span class="keyword">null</span>;</span><br><span class="line">    l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    last = prev;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prev.next = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-addFirst-E-e-将指定的元素追加到队头。"><a href="#5-addFirst-E-e-将指定的元素追加到队头。" class="headerlink" title="5. addFirst(E e) 将指定的元素追加到队头。"></a>5. addFirst(E e) 将指定的元素追加到队头。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as first element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-addLast-E-e-将指定的元素追加到此列表的末尾。"><a href="#6-addLast-E-e-将指定的元素追加到此列表的末尾。" class="headerlink" title="6. addLast(E e) 将指定的元素追加到此列表的末尾。"></a>6. addLast(E e) 将指定的元素追加到此列表的末尾。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-E-peek-检索但不删除此列表的头-第一个元素-。"><a href="#7-E-peek-检索但不删除此列表的头-第一个元素-。" class="headerlink" title="7. E peek() 检索但不删除此列表的头(第一个元素)。"></a>7. E peek() 检索但不删除此列表的头(第一个元素)。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first; </span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-poll-检索并删除此列表的头部-第一个元素-。"><a href="#8-poll-检索并删除此列表的头部-第一个元素-。" class="headerlink" title="8. poll() 检索并删除此列表的头部(第一个元素)。"></a>8. poll() 检索并删除此列表的头部(第一个元素)。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-boolean-offer-E-e-将指定的元素添加为列表的尾部-最后一个元素-。"><a href="#9-boolean-offer-E-e-将指定的元素添加为列表的尾部-最后一个元素-。" class="headerlink" title="9. boolean offer(E e) 将指定的元素添加为列表的尾部(最后一个元素)。"></a>9. boolean offer(E e) 将指定的元素添加为列表的尾部(最后一个元素)。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-boolean-offerFirst-E-e-将指定的元素插入到此列表的前面。"><a href="#10-boolean-offerFirst-E-e-将指定的元素插入到此列表的前面。" class="headerlink" title="10. boolean offerFirst(E e) 将指定的元素插入到此列表的前面。"></a>10. boolean offerFirst(E e) 将指定的元素插入到此列表的前面。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="11-E-pop-从这个列表表示的堆栈中弹出一个元素。"><a href="#11-E-pop-从这个列表表示的堆栈中弹出一个元素。" class="headerlink" title="11. E pop() 从这个列表表示的堆栈中弹出一个元素。"></a>11. E pop() 从这个列表表示的堆栈中弹出一个元素。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-push-E-e-将元素推入此列表所表示的堆栈。"><a href="#12-push-E-e-将元素推入此列表所表示的堆栈。" class="headerlink" title="12. push(E e) 将元素推入此列表所表示的堆栈。"></a>12. push(E e) 将元素推入此列表所表示的堆栈。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    addFirst(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>由于Vector和ArrayList大体不差多少，另在多线程环境下，不推荐使用的原因，此处不作详解。唯一需要注意的地方，如使用的情况下，别乱复合使用。</p><h4 id="Stack堆栈"><a href="#Stack堆栈" class="headerlink" title="Stack堆栈"></a>Stack堆栈</h4><p>Stack继承自Vector，内部实现也是Vector，实现先进后出的特性。栈最主要的意义就在于：入栈和出栈的对称性。</p><h5 id="push-将项推到堆栈顶部。"><a href="#push-将项推到堆栈顶部。" class="headerlink" title="push 将项推到堆栈顶部。"></a>push 将项推到堆栈顶部。</h5><h5 id="pop-删除堆栈顶部的对象，并将该对象作为该函数的值返回。"><a href="#pop-删除堆栈顶部的对象，并将该对象作为该函数的值返回。" class="headerlink" title="pop 删除堆栈顶部的对象，并将该对象作为该函数的值返回。"></a>pop 删除堆栈顶部的对象，并将该对象作为该函数的值返回。</h5><h5 id="peek-查看堆栈顶部的对象，而不将其从堆栈中删除"><a href="#peek-查看堆栈顶部的对象，而不将其从堆栈中删除" class="headerlink" title="peek 查看堆栈顶部的对象，而不将其从堆栈中删除"></a>peek 查看堆栈顶部的对象，而不将其从堆栈中删除</h5><h5 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h5><h5 id="search-返回的是距离栈顶的距离"><a href="#search-返回的是距离栈顶的距离" class="headerlink" title="search 返回的是距离栈顶的距离"></a>search 返回的是距离栈顶的距离</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/collection_record.html&quot;&gt;Collection集合&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/list.html&quot;&gt;List集合&lt;/a&gt; 继承Col
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="集合" scheme="http://www.throne4j.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>红黑树详解</title>
    <link href="http://www.throne4j.com/qsk/structure/red-black.html"/>
    <id>http://www.throne4j.com/qsk/structure/red-black.html</id>
    <published>2016-07-03T06:20:14.000Z</published>
    <updated>2019-09-30T06:07:48.193Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="structure" scheme="http://www.throne4j.com/categories/structure/"/>
    
    
      <category term="树" scheme="http://www.throne4j.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>collection集合记录</title>
    <link href="http://www.throne4j.com/qsk/java/collection_record.html"/>
    <id>http://www.throne4j.com/qsk/java/collection_record.html</id>
    <published>2016-07-03T06:20:14.000Z</published>
    <updated>2019-10-01T15:16:31.919Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，</p></li><li><p><a href="/qsk/java/set.html">Queue队列</a></p></li></ul><h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h1><p>集合表示了一组对象，而Collection是集合层次结构的根接口。一些集合可以存在重复的元素，而有些则不允许，一些是有序的，而又有一些是无序的。jdk并没有提供此接口的直接实现，并且又通过具体的子接口分别来定义不同的实现，例如List、Set接口来定义集合的实现。</p><h2 id="collection接口快速预览"><a href="#collection接口快速预览" class="headerlink" title="collection接口快速预览"></a>collection接口快速预览</h2><p>我们看下Collection的UML<br><img src="/qsk/java/collection_record/Collection.png" alt="Collection"></p><p>我们在看下Collection所定义的集合的基本行为<br><img src="/qsk/java/collection_record/Collection_xmind.png" alt="Collection_xmind"></p><p>下面我們看下Collection接口中的默認實現：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//省略其它方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliterator(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List-和-Set-的异同点"><a href="#List-和-Set-的异同点" class="headerlink" title="List 和 Set 的异同点"></a>List 和 Set 的异同点</h2><ol><li><p>相同点：<br> 同样继承自Collection接口，都实现了Collection规定的行为增删改以及迭代iterator功能。</p></li><li><p>不同点：</p></li></ol><ul><li><p>List允许重复元素，set不允许重复元素</p><blockquote><p>List底层实现是基于数组或链表，允许存放重复元素，set底层是现实HashMap，HashMap的Key均匀分布在hash桶中，且必须是唯一的，所以Set元素也是唯一的。</p></blockquote></li><li><p>List是有序的，而set不保证元素的存放顺序的有序性</p><blockquote><p>List集合中元素按照元素的存放顺序进行遍历，而Set则保证不了元素的有序性，但是Set提供了一个SortSet实现(见TreeSet集合)，也提供了元素的有序性</p></blockquote></li><li><p>List可以通过O(1)复杂度进行元素的存取，但是Set必须遍历所有数据来获取指定元素。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/collection_record.html&quot;&gt;Collection集合&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/list.html&quot;&gt;List集合&lt;/a&gt; 继承Collecti
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="集合" scheme="http://www.throne4j.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Map详解</title>
    <link href="http://www.throne4j.com/qsk/java/map%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://www.throne4j.com/qsk/java/map详解.html</id>
    <published>2016-07-03T06:20:14.000Z</published>
    <updated>2019-10-02T02:15:24.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Map详解"><a href="#Map详解" class="headerlink" title="Map详解"></a>Map详解</h1><p>HashMap 是我们开发过程中使用频率及其高又及其重要的集合类。它是将键映射到值的对象。Map不能包含重复的键,每个键最多可以映射到一个值。一些map实现，比如TreeMap类，对它们的顺序做出了特定的保证;其他类，如HashMap类，则没有。</p><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p><img src="/qsk/java/Map%E8%AF%A6%E8%A7%A3/Map_UML.png" alt="Map_UML"></p><h2 id="Map默认方法说明"><a href="#Map默认方法说明" class="headerlink" title="Map默认方法说明"></a>Map默认方法说明</h2><p>Map接口除了定义此类集合应该具有的行为模式之外，还定义了Map的集合视图Entry内部类。</p><ul><li><p>default V getOrDefault(Object key, V defaultValue)</p><blockquote><p>返回指定键映射到的值，如果此映射不包含键的映射，则返回 defaultValue。</p></blockquote></li><li><p>default void forEach(BiConsumer&lt;? super K, ? super V&gt; action)</p><blockquote><p>为映射中的每个条目执行给定的操作，直到处理完所有条目或操作引发异常为止。</p></blockquote></li><li><p>default void replaceAll(BiFunction&lt;? super K, ? super V, ? extends V&gt; function)</p><blockquote><p>将每个条目的值替换为对该条目调用给定函数的结果，直到所有条目都被处理或函数抛出异常。</p></blockquote></li><li><p>default V putIfAbsent(K key, V value)</p><blockquote><p>如果指定的键尚未与值关联(或映射到 null)，则将其与给定值关联并返回null，否则将返回当前值。</p></blockquote></li><li><p>default boolean remove(Object key, Object value)</p><blockquote><p>仅当当前映射到指定值时，才删除指定键的项。</p></blockquote></li><li><p>default boolean replace(K key, V oldValue, V newValue)</p><blockquote><p>仅当当前映射到指定值时，才替换指定键的项。</p></blockquote></li><li><p>default V replace(K key, V value)</p><blockquote><p>仅当指定键的项当前映射到某个值时，才替换该项。</p></blockquote></li><li><p>default V computeIfAbsent(K key, Function&lt;? super K, ? extends V&gt; mappingFunction)</p><blockquote><p>如果指定的键尚未与值关联(或映射到null)，则尝试使用给定的映射函数计算其值，并将其输入到此映射中，除非null。</p></blockquote></li><li><p>default V computeIfPresent(K key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)</p><blockquote><p>如果指定键的值为present且非null，则尝试计算给定键及其当前映射值的新映射。</p></blockquote></li><li><p>default V compute(K key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)</p><blockquote><p>尝试为指定的键及其当前映射值计算映射(如果没有当前映射，则为null)。</p></blockquote></li><li><p>default V merge(K key, V value, BiFunction&lt;? super V, ? super V, ? extends V&gt; remappingFunction)</p><blockquote><p>如果指定的键尚未与值关联或与null关联，则将其与给定的非null值关联。否则，将关联值替换为给定映射函数的结果，如果结果是null，则删除关联值。</p></blockquote></li></ul><h2 id="HashMap数据结构图"><a href="#HashMap数据结构图" class="headerlink" title="HashMap数据结构图"></a>HashMap数据结构图</h2><p>HashMap继承自AbstractMap、Map、Cloneable、Serializable</p><p><img src="/qsk/java/Map%E8%AF%A6%E8%A7%A3/map%E7%BB%93%E6%9E%84.png" alt="map结构"></p><h3 id="HashMap内部属性"><a href="#HashMap内部属性" class="headerlink" title="HashMap内部属性"></a>HashMap内部属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认初始容量—必须是2的幂。(16)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大容量，如果较高的值由带参数的任何构造函数隐式指定，则使用该值。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数中没有指定时使用的负载因子。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 桶的树化阈值，当桶的大小大于这个阈值时，普通Node链表结构转化为TreeNode红黑树结构。</span></span><br><span class="line"><span class="comment">// 树化的链表长度须是2的且最小得大于8</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//桶的链表化阈值,当在resize()时，treeNode红黑树的映射数量小于这个阈值时，TreeNode红黑树结构将转化为Node链表结构</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//哈希表允许转化为TreeNode红黑树的最小容量值(为了避免在扩容还是树化的冲突，这个值必须至少是4 * TREEIFY_THRESHOLD)。在哈希表的容量没达到这个阈值的时候，桶会直接扩容。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表，第一次使用时初始化，并根据需要调整大小。 当分配时，长度总是2的幂。</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K, V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存缓存entrySet ()。注意AbstractMap字段用于keySet()和values()。</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此映射中包含的键值映射的数目。</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个HashMap在结构上被修改的次,数结构修改是指改变HashMap中映射的数量或修改其内部结构的次数(例如，rehash)。</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容临界值 这个值为 大于cap的且距离最近的2的n次幂数，用于扩容判断</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br></pre></td></tr></table></figure><h3 id="HashMap部分内部类"><a href="#HashMap部分内部类" class="headerlink" title="HashMap部分内部类"></a>HashMap部分内部类</h3><h4 id="Node-内部类-链表数据结构"><a href="#Node-内部类-链表数据结构" class="headerlink" title="Node 内部类: 链表数据结构"></a>Node 内部类: 链表数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 记录位于哪个桶中</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    <span class="comment">// 指向下一个元素</span></span><br><span class="line">    Node&lt;K, V&gt; next;</span><br><span class="line">    ........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TreeNode-内部类-红黑树数据结构，LinkedHashMap-Entry-继承自HashMap-Node。关于红黑树会单独抽出一篇幅去分析。"><a href="#TreeNode-内部类-红黑树数据结构，LinkedHashMap-Entry-继承自HashMap-Node。关于红黑树会单独抽出一篇幅去分析。" class="headerlink" title="TreeNode 内部类: 红黑树数据结构，LinkedHashMap.Entry 继承自HashMap.Node。关于红黑树会单独抽出一篇幅去分析。"></a>TreeNode 内部类: 红黑树数据结构，LinkedHashMap.Entry 继承自HashMap.Node。关于红黑树会单独抽出一篇幅去分析。</h4><p>红黑树见：<a href="/qsk/structure/red-black.html">红黑树</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 记录父节点</span></span><br><span class="line">    TreeNode&lt;K, V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    <span class="comment">// 左孩子</span></span><br><span class="line">    TreeNode&lt;K, V&gt; left;</span><br><span class="line">    <span class="comment">// 右孩子</span></span><br><span class="line">    TreeNode&lt;K, V&gt; right;</span><br><span class="line">    <span class="comment">//删除后需要断开next链接</span></span><br><span class="line">    TreeNode&lt;K, V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="comment">// 红黑颜色标记</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br></pre></td></tr></table></figure><p>从源码中可以发现TreeNode继承自LinkedHashMap.Entry&lt;K, V&gt;，在LinkedHashMap中的Entry实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap构造器"><a href="#HashMap构造器" class="headerlink" title="HashMap构造器"></a>HashMap构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 默认16长度，负载因子0.75</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> + loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap方法"><a href="#HashMap方法" class="headerlink" title="HashMap方法"></a>HashMap方法</h3><h4 id="static-final-int-hash-Object-key-计算"><a href="#static-final-int-hash-Object-key-计算" class="headerlink" title="static final int hash(Object key) 计算"></a>static final int hash(Object key) 计算</h4><ul><li><ol><li>获取key的hashCode值</li></ol></li><li><ol start="2"><li>获取key的hashCode值的高16位</li></ol></li><li><ol start="3"><li>高16位和hashCode进行异或操作获取新的hash值</li></ol></li></ul><p>计算hash桶的索引公式：(table.length - 1) &amp; hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="int-tableSizeFor-int-cap-计算table扩容临界值"><a href="#int-tableSizeFor-int-cap-计算table扩容临界值" class="headerlink" title="int tableSizeFor(int cap) 计算table扩容临界值"></a>int tableSizeFor(int cap) 计算table扩容临界值</h4><p>入参cap 大于0 且小于最大容量，如果cap是2次幂则返回cap，否则将cap转为大于cap且距离最小的2次幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;  <span class="comment">//cap = 16 二进制:           00010000</span></span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;                                        n=        <span class="number">00001111</span> (<span class="number">15</span>)</span><br><span class="line">    </span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// n = n |(n &gt;&gt;&gt; 1)  含义是n= n或等 n&gt;&gt;&gt;1             00001111</span></span><br><span class="line">                                                            n=     |  <span class="number">00000111</span></span><br><span class="line">                                                                    -----------</span><br><span class="line">                                                            n=        <span class="number">00001111</span> (<span class="number">15</span>)</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>; <span class="comment">// 返回16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="putMapEntries-Map-lt-extends-K-extends-V-gt-m-boolean-evict-以-m-为基础构造新的映射，或者在已有映射基础上添加映射-m"><a href="#putMapEntries-Map-lt-extends-K-extends-V-gt-m-boolean-evict-以-m-为基础构造新的映射，或者在已有映射基础上添加映射-m" class="headerlink" title="putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) 以 m 为基础构造新的映射，或者在已有映射基础上添加映射 m"></a>putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) 以 m 为基础构造新的映射，或者在已有映射基础上添加映射 m</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 1、判断table是否已初始化</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>) s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>) MAXIMUM_CAPACITY) ? (<span class="keyword">int</span>) ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                <span class="comment">// 1.1、设置扩容临界值</span></span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            <span class="comment">// 2、如果s已经超出了扩容临界值，则进行扩容操作</span></span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 3、执行存入映射操作</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="V-put-K-key-V-value-存放映射"><a href="#V-put-K-key-V-value-存放映射" class="headerlink" title="V put(K key, V value) 存放映射"></a>V put(K key, V value) 存放映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="V-putVal-int-hash-K-key-V-value-boolean-onlyIfAbsent-boolean-evict"><a href="#V-putVal-int-hash-K-key-V-value-boolean-onlyIfAbsent-boolean-evict" class="headerlink" title="V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)"></a>V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)</h4><p>存放映射 key-value</p><ul><li>onlyIfAbsent 如果为true，不修改已存在映射，</li><li>evict 如果为false，则处于创建模式(从源码上看的话，是为LinkedHashMap服务的)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 存放映射</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt;[] tab;</span><br><span class="line">    Node&lt;K, V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，则进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//计算index，并对null做处理 ,(n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//发生碰撞的时候,桶中已经存在元素</span></span><br><span class="line">        Node&lt;K, V&gt; e;</span><br><span class="line">        K k;</span><br><span class="line">        <span class="comment">//节点key存在，直接覆盖value,比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">//判断该链为红黑树,hash值不相等，即key不相等；为红黑树结点,并放入树当中</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">//该链为链表</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">//到达链表的尾部,在尾部插入新结点</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或旧值为null,用新值替换旧值</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">//访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结构性修改,modCount加1</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">//超过扩容临界值，就扩容 </span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 此方法被LinkedHashMap实现</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final-Node-lt-K-V-gt-resize-扩容"><a href="#final-Node-lt-K-V-gt-resize-扩容" class="headerlink" title="final Node&lt;K, V&gt;[] resize() 扩容"></a><strong>final Node&lt;K, V&gt;[] resize()</strong> 扩容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K, V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K, V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 源table的容量大小</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">// 源扩容临界值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">// 定义新table的容量大小和扩容临界值</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 源容量大于0时</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 达到最大容量，不能在扩容了，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// newCap 是源容量左移一位</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始容量设置为阈值</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;               </span><br><span class="line">        <span class="comment">// 初始阈值为零表示使用默认值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>) newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>) MAXIMUM_CAPACITY ?</span><br><span class="line">                (<span class="keyword">int</span>) ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    <span class="comment">//新建hash桶数组</span></span><br><span class="line">    Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) <span class="keyword">new</span> Node[newCap];</span><br><span class="line">    <span class="comment">//将新数组的值复制给旧的hash桶数组</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//进行扩容操作，复制Node对象值到新的hash桶数组</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K, V&gt; e;</span><br><span class="line">            <span class="comment">//如果旧的hash桶数组在j结点处不为空，复制给e</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//将旧的hash桶数组在j结点处设置为空，方便gc</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//如果e的后面没有node节点，直接对e的hash值对新的数组长度求模获得存储位置</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">//如果e是红黑树的类型，那么添加到红黑树中</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//将树仓中的节点拆分为上下树，如果太小，则取消树。仅从resize调用;</span></span><br><span class="line">                    ((TreeNode&lt;K, V&gt;) e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 如果是普通的链表节点，则进行普通的hash分布</span></span><br><span class="line">                    <span class="comment">// 存储索引位置为 原索引位置的 节点</span></span><br><span class="line">                    Node&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 索引位置为 原索引位置+oldCap位置的节点</span></span><br><span class="line">                    Node&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K, V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">//将Node结点的next赋值给next</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">//如果结点e的hash值与原hash桶数组的长度作与运算为0，则扩容后的索引位置跟老表的索引位置相同</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// loTail为空，代表该节点为第一个节点</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>) </span><br><span class="line">                                <span class="comment">// 将节点e 赋值给loHead</span></span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e; <span class="comment">// loTail不为空，则将节点添加到loTail后面</span></span><br><span class="line">                            loTail = e; <span class="comment">// 将此次循环的新节点赋值给loTail</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果结点e的hash值与原hash桶数组的长度作与运算不为0，则扩容后索引位置为老表的索引位置+oldCap</span></span><br><span class="line">                            <span class="comment">// 如果hiTail为空，代表该节点为第一个节点</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>) </span><br><span class="line">                                hiHead = e; <span class="comment">//将节点e赋值给hiHead </span></span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e; <span class="comment">// 将节点添加到hiTail后面</span></span><br><span class="line">                            hiTail = e; <span class="comment">// 将此次循环的新节点赋值给hiTail</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果loTail不为空（扩容后，有老表的数据分布在新表的原索引位置），则将最后一个节点的next设为空，并将新表上对应`原索引位置`的节点设置为相应的头结点</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果hiTail不为空，（扩容后，有老表的数据分布在新表的原索引位置+oldCap的位置上），将最后一个节点的next设置为空，并将新表的 `原索引+oldCap` 的节点设置为对应的头结点hiHead</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="V-get-Object-key"><a href="#V-get-Object-key" class="headerlink" title="V get(Object key)"></a>V get(Object key)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final-Node-lt-K-V-gt-getNode-int-hash-Object-key"><a href="#final-Node-lt-K-V-gt-getNode-int-hash-Object-key" class="headerlink" title="final Node&lt;K, V&gt; getNode(int hash, Object key)"></a><code>final Node&lt;K, V&gt; getNode(int hash, Object key)</code></h4><p>获取key所在的Node节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt;[] tab;</span><br><span class="line">    Node&lt;K, V&gt; first, e;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    K k;</span><br><span class="line">    <span class="comment">// 1、table不为空、table长度大于0、hash计算所得桶索引的第一个映射不为空，则继续查找，否则直接返回null</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 2、如果第一个映射的hash和参数hash相等并且key和value都相等的时候返回第一条，否则去链表或者红黑树中查询</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 3、在链表或者红黑树中获取key对应的映射</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 从红黑树中获取key映射</span></span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 遍历Node链表，获取key映射</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="treeIfbBin-Node-lt-K-V-gt-tab-int-hash-将链表树形化"><a href="#treeIfbBin-Node-lt-K-V-gt-tab-int-hash-将链表树形化" class="headerlink" title="treeIfbBin(Node&lt;K, V&gt;[] tab, int hash) 将链表树形化"></a>treeIfbBin(Node&lt;K, V&gt;[] tab, int hash) 将链表树形化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, index;</span><br><span class="line">    Node&lt;K, V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K, V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 将Node节点转化为TreeNode节点</span></span><br><span class="line">            TreeNode&lt;K, V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                hd = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="V-remove-Object-key"><a href="#V-remove-Object-key" class="headerlink" title="V remove(Object key)"></a>V remove(Object key)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final-Node-lt-K-V-gt-removeNode-int-hash-Object-key-Object-value-boolean-matchValue-boolean-movable"><a href="#final-Node-lt-K-V-gt-removeNode-int-hash-Object-key-Object-value-boolean-matchValue-boolean-movable" class="headerlink" title="final Node&lt;K, V&gt; removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable)"></a>final Node&lt;K, V&gt; removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable)</h4><ul><li>matchValue 如果为真，则仅在值相等时删除</li><li>movable 如果为false，删除时不要移动其他节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K, V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value, <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K, V&gt;[] tab;</span><br><span class="line">    Node&lt;K, V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K, V&gt; node = <span class="keyword">null</span>, e;</span><br><span class="line">        K k;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K, V&gt;) p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                                    (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K, V&gt;) node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="final-void-split-HashMap-lt-K-V-gt-map-Node-lt-K-V-gt-tab-int-index-int-bit"><a href="#final-void-split-HashMap-lt-K-V-gt-map-Node-lt-K-V-gt-tab-int-index-int-bit" class="headerlink" title="final void split(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab, int index, int bit)"></a>final void split(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab, int index, int bit)</h4><p>将树中的节点拆分为上下树，如果太小，则取消树。仅从resize调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K, V&gt; map, Node&lt;K, V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K, V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">    TreeNode&lt;K, V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode&lt;K, V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K, V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K, V&gt;) e.next;</span><br><span class="line">        e.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap注意事项"><a href="#HashMap注意事项" class="headerlink" title="HashMap注意事项"></a>HashMap注意事项</h3><ul><li><p>当桶转变为红黑树的时候，树的root节点不一定是桶的索引位置的头节点。</p><blockquote><p>在TreeNode结构中有一个方法moveRootToFront(Node&lt;K,V&gt; tab, TreeNode&lt;K,V&gt; root),此方法确保在树形化时，树的root节点设置为桶的索引位置。</p></blockquote></li><li><p>在链表转变为红黑树之后，链表依然会通过TreeNode的next属性维持。</p></li><li><p>由于红黑树依然通过next维护这链表结构,所以红黑树的叶子节点可能存在next节点。</p></li><li><p>树化发生在putVal方法中，去树化发生在扩容resize()</p></li></ul><h3 id="HashMap总结"><a href="#HashMap总结" class="headerlink" title="HashMap总结"></a>HashMap总结</h3><ul><li><p>HashMap 由 Node 数组（Node&lt;K,V&gt;[] table）实现，当hash冲突的时候(数组的索引位置相同的时候)，则可能是以链表或红黑树的形式存在。</p></li><li><p>增加、删除、查找键值对时，定位到哈希桶数组的位置是很关键的一步，源码中是通过下面3个操作来完成这一步：</p><ol><li>拿到 key 的 hashCode 值；</li><li>将 hashCode 的高位参与运算，重新计算 hash 值；</li><li>将计算出来的 hash 值与 “table.length - 1” 进行 &amp; 运算。</li></ol></li><li><p>HashMap 的默认初始容量（capacity）是 16，capacity 必须为 2 的幂次方；默认负载因子（load factor）是 0.75；实际能存放的节点个数（threshold，即触发扩容的阈值）= capacity * load factor。</p><ol><li>threshold 的值计算规则是比capacity大但离capacity最近的2的n次方值</li></ol></li><li><p>导致 HashMap 扩容后，同一个索引位置的节点重 hash 最多分布在两个位置的根本原因是：</p><ol><li>table的长度始终为 2 的 n 次方；</li><li>索引位置的计算方法为 “(table.length - 1) &amp; hash”。</li></ol><p>HashMap 扩容是一个比较耗时的操作，定义 HashMap 时尽量给个接近的初始容量值。</p></li><li><p>HashMap 有 threshold 属性和 loadFactor 属性，但是没有 capacity 属性。初始化时，如果传了初始化容量值，该值是存在 threshold 变量，并且 Node 数组是在第一次 put 时才会进行初始化，初始化时会将此时的 threshold 值作为新表的 capacity 值，然后用 capacity 和 loadFactor 计算新表的真正 threshold 值。</p></li><li><p>当同一个索引位置的节点数增加到至少8个时，并且此时数组的长度大于等于 64，则会触发链表节点（Node）转红黑树节点（TreeNode），转成红黑树节点后，其实链表的结构还存在，通过 next 属性维持。链表节点转红黑树节点的具体方法为源码中的 treeifyBin 方法。而如果数组长度小于64，则不会触发链表转红黑树，而是会进行扩容。</p></li><li><p>当同一个索引位置的节点数量在移除后达到至多 6 个时，并且该索引位置的节点为红黑树节点，会触发红黑树节点转链表节点。红黑树节点转链表节点的具体方法为源码中的 untreeify 方法。</p></li><li><p>HashMap 是非线程安全的，在并发场景下使用 ConcurrentHashMap 来代替。</p></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>TreeMap 可自然排序或通过comparator进行排序</p><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>LinkedHashMap继承自HashMa,所以它具有HashMap的所有特性,它的扩展了HashMap节点结构来作为自己的节点结构;LinkedHashMap通过head、tail维护了双向链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap-和-HashTable-的区别"><a href="#HashMap-和-HashTable-的区别" class="headerlink" title="HashMap 和 HashTable 的区别"></a>HashMap 和 HashTable 的区别</h2><ul><li>HashMap 允许 key 和 value 为 null，Hashtable 不允许。</li><li>HashMap 的默认初始容量为 16，Hashtable 为 11。</li><li>HashMap 的扩容为原来的 2 倍，Hashtable 的扩容为原来的 2 倍加 1。</li><li>HashMap 是非线程安全的，Hashtable是线程安全的。</li><li>HashMap 的 hash 值重新计算过，Hashtable 直接使用 hashCode。</li><li>HashMap 去掉了 Hashtable 中的 contains 方法。</li><li>HashMap 继承自 AbstractMap 类，Hashtable 继承自 Dictionary 类。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Map详解&quot;&gt;&lt;a href=&quot;#Map详解&quot; class=&quot;headerlink&quot; title=&quot;Map详解&quot;&gt;&lt;/a&gt;Map详解&lt;/h1&gt;&lt;p&gt;HashMap 是我们开发过程中使用频率及其高又及其重要的集合类。它是将键映射到值的对象。Map不能包含重复的键,每
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="集合" scheme="http://www.throne4j.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>深入理解java序列化</title>
    <link href="http://www.throne4j.com/qsk/java/understand_java_serial.html"/>
    <id>http://www.throne4j.com/qsk/java/understand_java_serial.html</id>
    <published>2016-06-18T11:38:43.000Z</published>
    <updated>2019-09-18T03:09:34.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解java序列化"><a href="#深入理解java序列化" class="headerlink" title="深入理解java序列化"></a>深入理解java序列化</h1><p>如果你只知道实现Serializable接口的对象，可以序列化为本地文件。那你最好再阅读该篇文章，文章对序列化进行了更深一步的讨论，用实际的例子代码讲述了序列化的高级认识，包括父类序列化的问题、静态变量问题、transient关键字的影响、序列化ID问题。在笔者实际开发过程中，就多次遇到序列化的问题，在该文章中也会与读者分享。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>将Java对象序列化为二进制文件的Java序列化技术是Java系列技术中一个较为重要的技术点，在大部分情况下，开发人员只需要了解被序列化的类需要实现Serializable接口，使用ObjectInputStream和ObjectOutputStream进行对象的读写。然而在有些情况下，光知道这些还远远不够，文章列举了笔者遇到的一些真实情境，它们与Java序列化相关，通过分析情境出现的原因，使读者轻松牢记<br>Java 序列化中的一些高级认识。</p><h2 id="序列化-ID-问题"><a href="#序列化-ID-问题" class="headerlink" title="序列化 ID 问题"></a>序列化 ID 问题</h2><ul><li><p><strong>情境</strong>：两个客户端 A 和 B 试图通过网络传递对象数据，A 端将对象 C序列化为二进制数据再传给 B，B 反序列化得到 C。</p></li><li><p><strong>问题</strong>：C 对象的全类路径假设为 com.inout.Test，在 A 和 B端都有这么一个类文件，功能代码完全一致。也都实现了 Serializable接口，但是反序列化时总是提示不成功。</p></li><li><p><strong>解决</strong>：虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化ID 是否一致（就是 private static final long serialVersionUID = 1L）。清单1 中，虽然两个类的功能代码完全一致，但是序列化 ID 不同，他们无法相互序列化和反序列化。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.inout; </span><br><span class="line">import java.io.Serializable; </span><br><span class="line">public class A implements Serializable &#123; </span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L; </span><br><span class="line">    private String name; public String getName() &#123; return name; &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.inout;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">public class A implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 2L;</span><br><span class="line">    private String name;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化ID在Eclipse下提供了两种生成策略，一个是固定的1L，一个是随机生成一个不重复的long类型数据（实际上是使用JDK工具生成），在这里有一个建议，如果没有特殊需求，就是用默认的1L就可以，这样可以确保代码一致时反序列化成功。那么随机生成的序列化ID有什么作用呢，有些时候，通过改变序列化ID可以用来限制某些用户的使用。</p><h3 id="特性使用案例"><a href="#特性使用案例" class="headerlink" title="特性使用案例"></a>特性使用案例</h3><p>　　读者应该听过Façade模式，它是为应用程序提供统一的访问接口，案例程序中的Client客户端使用了该模式，案例程序结构图如图1所示。</p><p><img src="/qsk/java/understand_java_serial/%E5%9B%BE.png" alt="图1"></p><p>　　Client端通过FaçadeObject才可以与业务逻辑对象进行交互。而客户端的FaçadeObject不能直接由Client生成，而是需要Server端生成，然后序列化后通过网络将二进制对象数据传给Client，Client负责反序列化得到Façade对象。该模式可以使得Client端程序的使用需要服务器端的许可,同时Client端和服务器端的FaçadeObject类需要保持一致。当服务器端想要进行版本更新时，只要将服务器端的FaçadeObject类的序列化ID再次生成，当Client端反序列化FaçadeObject就会失败，也就是强制Client端从服务器端获取最新程序。</p><h2 id="静态变量序列化"><a href="#静态变量序列化" class="headerlink" title="静态变量序列化"></a>静态变量序列化</h2><ul><li><strong>情境</strong>：查看清单 2 的代码。</li></ul><p>清单 2. 静态变量序列化问题代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Test implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    public static int staticVar = 5;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //初始时staticVar为5</span><br><span class="line">            ObjectOutputStream out = new ObjectOutputStream(</span><br><span class="line">                    new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">            out.writeObject(new Test());</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            //序列化后修改为10</span><br><span class="line">            Test.staticVar = 10;</span><br><span class="line"> </span><br><span class="line">            ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">                    &quot;result.obj&quot;));</span><br><span class="line">            Test t = (Test) oin.readObject();</span><br><span class="line">            oin.close();</span><br><span class="line">             </span><br><span class="line">            //再读取，通过t.staticVar打印新的值</span><br><span class="line">            System.out.println(t.staticVar);</span><br><span class="line">             </span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　清单2中的main方法，将对象序列化后，修改静态变量的数值，再将序列化对象读取出来，然后通过读取出来的对象获得静态变量的数值并打印出来。依照清单2，这个System.out.println(t.staticVar) 语句输出的是 10 还是 5 呢？最后的输出是10，对于无法理解的读者认为，打印的 staticVar是从读取的对象里获得的，应该是保存时的状态才对。之所以打印10的原因在于序列化时，并不保存静态变量，这其实比较容易理解，序列化保存的是对象的状态，静态变量属于类的状态，因此序列化并不保存静态变量。</p><h2 id="父类的序列化与-Transient-关键字"><a href="#父类的序列化与-Transient-关键字" class="headerlink" title="父类的序列化与 Transient 关键字"></a>父类的序列化与 Transient 关键字</h2><ul><li><p><strong>情境</strong>：一个子类实现了 Serializable 接口，它的父类都没有实现 Serializable接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。</p></li><li><p><strong>解决</strong>：要想将父类对象也序列化，就需要让父类也实现Serializable接口。如果父类不实现的话的，就需要有默认的无参的构造函数。在父类没有实现Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。</p></li></ul><p>　　Transient关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient变量的值被设为初始值，如int 型的是 0，对象型的是 null。</p><h3 id="特性使用案例-1"><a href="#特性使用案例-1" class="headerlink" title="特性使用案例"></a>特性使用案例</h3><p>　　我们熟悉使用Transient关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现Serializable接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化，形成类图如图 2 所示。</p><p><img src="/qsk/java/understand_java_serial/%E6%A1%88%E4%BE%8B%E7%A8%8B%E5%BA%8F%E5%9B%BE.png" alt="案例程序图"></p><p>　　上图中可以看出，attr1、attr2、attr3、attr5都不会被序列化，放在父类中的好处在于当有另外一个Child类时，attr1、attr2、attr3依然不会被序列化，不用重复抒写transient，代码简洁。</p><h2 id="对敏感字段加密"><a href="#对敏感字段加密" class="headerlink" title="对敏感字段加密"></a>对敏感字段加密</h2><ul><li><strong>情境</strong>：服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。</li><li><strong>解决</strong>：在序列化过程中，虚拟机会试图调用对象类里的writeObject和readObject方法，进行用户自定义的序列化和反序列化，如果没有这样的方法，则默认调用是ObjectOutputStream的defaultWriteObject方法以及ObjectInputStream的defaultReadObject方法。用户自定义的writeObject和readObject方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。基于这个原理，可以在实际应用中得到使用，用于敏感字段的加密工作，清单3展示了这个过程。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">private String password = &quot;pass&quot;;</span><br><span class="line">public String getPassword() &#123;</span><br><span class="line">    return password;</span><br><span class="line">&#125;</span><br><span class="line">public void setPassword(String password) &#123;</span><br><span class="line">    this.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void writeObject(ObjectOutputStream out) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PutField putFields = out.putFields();</span><br><span class="line">        System.out.println(&quot;原密码:&quot; + password);</span><br><span class="line">        password = &quot;encryption&quot;;//模拟加密</span><br><span class="line">        putFields.put(&quot;password&quot;, password);</span><br><span class="line">        System.out.println(&quot;加密后的密码&quot; + password);</span><br><span class="line">        out.writeFields();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void readObject(ObjectInputStream in) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        GetField readFields = in.readFields();</span><br><span class="line">        Object object = readFields.get(&quot;password&quot;, &quot;&quot;);</span><br><span class="line">        System.out.println(&quot;要解密的字符串:&quot; + object.toString());</span><br><span class="line">        password = &quot;pass&quot;;//模拟解密,需要获得本地的密钥</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ObjectOutputStream out = new ObjectOutputStream(</span><br><span class="line">                new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">        out.writeObject(new Test());</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">                &quot;result.obj&quot;));</span><br><span class="line">        Test t = (Test) oin.readObject();</span><br><span class="line">        System.out.println(&quot;解密后的字符串:&quot; + t.getPassword());</span><br><span class="line">        oin.close();</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在清单 3 的 writeObject 方法中，对密码进行了加密，在 readObject 中则对<br>password进行解密，只有拥有密钥的客户端，才可以正确的解析出密码，确保了数据的安全。执行清单<br>3后控制台输出如图 3 所示:</p><p> <img src="/qsk/java/understand_java_serial/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%BC%94%E7%A4%BA.png" alt="数据加密演示"></p><h3 id="特性使用案例-2"><a href="#特性使用案例-2" class="headerlink" title="特性使用案例"></a>特性使用案例</h3><p>　　RMI 技术是完全基于 Java序列化技术的，服务器端接口调用所需要的参数对象来至于客户端，它们通过网络相互传输。这就涉及RMI的安全传输的问题。一些敏感的字段，如用户名密码（用户登录时需要对密码进行传输），我们希望对其进行加密，这时，就可以采用本节介绍的方法在客户端对密码进行加密，服务器端进行解密，确保数据传输的安全性。</p><h3 id="序列化存储规则"><a href="#序列化存储规则" class="headerlink" title="序列化存储规则"></a>序列化存储规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ObjectOutputStream out = new ObjectOutputStream(</span><br><span class="line">                   new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">   Test test = new Test();</span><br><span class="line">   //试图将对象两次写入文件</span><br><span class="line">   out.writeObject(test);</span><br><span class="line">   out.flush();</span><br><span class="line">   System.out.println(new File(&quot;result.obj&quot;).length());</span><br><span class="line">   out.writeObject(test);</span><br><span class="line">   out.close();</span><br><span class="line">   System.out.println(new File(&quot;result.obj&quot;).length());</span><br><span class="line"></span><br><span class="line">   ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">           &quot;result.obj&quot;));</span><br><span class="line">   //从文件依次读出两个文件</span><br><span class="line">   Test t1 = (Test) oin.readObject();</span><br><span class="line">   Test t2 = (Test) oin.readObject();</span><br><span class="line">   oin.close();</span><br><span class="line"></span><br><span class="line">   //判断两个引用是否指向同一个对象</span><br><span class="line">   System.out.println(t1 == t2);</span><br></pre></td></tr></table></figure><p>　　清单 3中对同一对象两次写入文件，打印出写入一次对象后的存储大小和写入两次后的存储大小，然后从文件中反序列化出两个对象，比较这两个对象是否为同一对象。一般的思维是，两次写入对象，文件大小会变为两倍的大小，反序列化时，由于从文件读取，生成了两个对象，判断相等时应该是输入false 才对，但是最后结果输出如图 4 所示。</p><p><img src="/qsk/java/understand_java_serial/image.png" alt="image"></p><p>　　我们看到，第二次写入对象时文件只增加了 5 字节，并且两个对象是相等的，这是为什么呢？</p><ul><li><strong>解答</strong>：Java序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，上面增加的5 字节的存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系，使得清单 3中的 t1 和 t2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。</li></ul><h3 id="特性案例分析"><a href="#特性案例分析" class="headerlink" title="特性案例分析"></a>特性案例分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">Test test = new Test();</span><br><span class="line">test.i = 1;</span><br><span class="line">out.writeObject(test);</span><br><span class="line">out.flush();</span><br><span class="line">test.i = 2;</span><br><span class="line">out.writeObject(test);</span><br><span class="line">out.close();</span><br><span class="line">ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">                    &quot;result.obj&quot;));</span><br><span class="line">Test t1 = (Test) oin.readObject();</span><br><span class="line">Test t2 = (Test) oin.readObject();</span><br><span class="line">System.out.println(t1.i);</span><br><span class="line">System.out.println(t2.i);</span><br></pre></td></tr></table></figure><p>　　清单 4 的目的是希望将 test 对象两次保存到result.obj文件中，写入一次以后修改对象属性值再次保存第二次，然后从result.obj中再依次读出两个对象，输出这两个对象的i属性值。案例代码的目的原本是希望一次性传输对象修改前后的状态。结果两个输出的都是 1，原因就是第一次写入对象以后，第二次再试图写的时候，虚拟机根据引用关系知道已经有一个相同对象已经写入文件，因此只保存第二次写的引用，所以读取时，都是第一次保存的对象。读者在使用一个文件多次writeObject 需要特别注意这个问题。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文通过几个具体的情景，介绍了Java序列化的一些高级知识，虽说高级，并不是说读者们都不了解，希望用笔者介绍的情景让读者加深印象，能够更加合理的利用Java序列化技术，在未来开发之路上遇到序列化问题时，可以及时的解决。由于本人知识水平有限，文章中倘若有错误的地方，欢迎联系我批评指正。</p><h1 id="转载自-读书使人进步"><a href="#转载自-读书使人进步" class="headerlink" title="转载自  读书使人进步"></a>转载自  <a href="https://www.cnblogs.com/wxgblogs/p/5849951.html" target="_blank" rel="noopener">读书使人进步</a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解java序列化&quot;&gt;&lt;a href=&quot;#深入理解java序列化&quot; class=&quot;headerlink&quot; title=&quot;深入理解java序列化&quot;&gt;&lt;/a&gt;深入理解java序列化&lt;/h1&gt;&lt;p&gt;如果你只知道实现Serializable接口的对象，可以序列化为本地
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="序列化" scheme="http://www.throne4j.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>深入理解java反射(一)</title>
    <link href="http://www.throne4j.com/qsk/java/understand_java_reflect.html"/>
    <id>http://www.throne4j.com/qsk/java/understand_java_reflect.html</id>
    <published>2016-06-13T13:38:43.000Z</published>
    <updated>2019-09-18T03:09:07.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解java反射机制"><a href="#深入理解java反射机制" class="headerlink" title="深入理解java反射机制"></a>深入理解java反射机制</h1><p>反射(Reflection)是 Java程序开发语言的特征之一，它允许运行中的<br>Java程序获取自身的信息，并且可以操作类或对象的内部属性。</p><p>首先 我们看下java.lang.reflect包下面几个主要类的关系图</p><p><img src="/qsk/java/understand_java_reflect/java.lang.reflect%E5%8C%85%E4%B8%BB%E8%A6%81%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt="java.lang.reflect包主要类关系图.jpg"></p><h2 id="AnnotatedElement"><a href="#AnnotatedElement" class="headerlink" title="AnnotatedElement"></a>AnnotatedElement</h2><p>该接口的实现类代表程序中可以接受注解的程序元素，这个接口提供了获取注解相关的功能，该接口主要有一下几个实现类：</p><ul><li><p>Class 类定义</p></li><li><p>Constructor 构造器定义</p></li><li><p>Field 属性成员定义</p></li><li><p>Method 方法定义</p></li><li><p>Package 包定义</p><p><img src="/qsk/java/understand_java_reflect/%E6%B3%A8%E8%A7%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.jpg" alt="注解基础知识点"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; <span class="function">T <span class="title">getDeclaredAnnotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass);</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass);</span><br><span class="line">    &lt;T extends Annotation&gt; <span class="function">T <span class="title">getAnnotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span></span>;</span><br><span class="line">    Annotation[] getAnnotations();</span><br><span class="line">    Annotation[] getDeclaredAnnotations();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现用户自定义注解"><a href="#实现用户自定义注解" class="headerlink" title="实现用户自定义注解"></a>实现用户自定义注解</h3><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><h2 id="GenericDeclaration"><a href="#GenericDeclaration" class="headerlink" title="GenericDeclaration"></a>GenericDeclaration</h2><p>提供了获取泛型相关的功能，只有方法和构造方法上支持泛型，所以只有Method，Constructor实现了该接口</p><h2 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h2><p>作为一个对象内部方法和属性的声明的抽象，包含了名称，修饰符，所在的类,其中修饰符包含了 static final public private volatile 等，通过一个整数表示，每一个类型在二进制中占一个位.</p><h2 id="AccessibleObject"><a href="#AccessibleObject" class="headerlink" title="AccessibleObject"></a>AccessibleObject</h2><p>这是一个类，提供了权限管理的功能，例如是否允许在反射中在外部调用一个private方法，获取一个private属性的值，所以method，constructor,field都继承该类，下面这段代码展示了如何在反射中访问一个私有的成员变量，class对象的构造方法不允许对外。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private static void setAccessible0(AccessibleObject obj, boolean flag)</span><br><span class="line">    throws SecurityException</span><br><span class="line">&#123;</span><br><span class="line">    if (obj instanceof Constructor &amp;&amp; flag == true) &#123;</span><br><span class="line">        Constructor&lt;?&gt; c = (Constructor&lt;?&gt;)obj;</span><br><span class="line">        if (c.getDeclaringClass() == Class.class) &#123;</span><br><span class="line">            throw new SecurityException(&quot;Cannot make a java.lang.Class&quot; +</span><br><span class="line">                                        &quot; constructor accessible&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.override = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boolean override;</span><br><span class="line"></span><br><span class="line">public boolean isAccessible() &#123;</span><br><span class="line">    return override;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为 Field里面通过field.get(原始对象)获取属性值得实现,先通过override做校验，如果没有重载该权限，则需要校验访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public Object get(Object obj)</span><br><span class="line">    throws IllegalArgumentException, IllegalAccessException</span><br><span class="line">&#123;</span><br><span class="line">    if (!override) &#123;</span><br><span class="line">        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return getFieldAccessor(obj).get(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解java反射机制&quot;&gt;&lt;a href=&quot;#深入理解java反射机制&quot; class=&quot;headerlink&quot; title=&quot;深入理解java反射机制&quot;&gt;&lt;/a&gt;深入理解java反射机制&lt;/h1&gt;&lt;p&gt;反射(Reflection)是 Java程序开发语言的特征之
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="反射" scheme="http://www.throne4j.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>反射Type详解</title>
    <link href="http://www.throne4j.com/qsk/java/reflect_type_detail.html"/>
    <id>http://www.throne4j.com/qsk/java/reflect_type_detail.html</id>
    <published>2016-06-03T13:38:43.000Z</published>
    <updated>2019-09-17T17:06:02.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Type-来历"><a href="#Type-来历" class="headerlink" title="Type 来历"></a>Type 来历</h2><p>来历我们知道，Type 是 JDK5 开始引入的，其引入主要是为了泛型，没有泛型的之前， 只有所谓的原始类型。<br>此时，所有的原始类型都通过字节码文件类 Class 类进行抽象。 Class 类的一个具体对象就代表一个指定的原始类型。</p><p>泛型出现之后，也就扩充了数据类型。从只有原始类型扩充了参数化类型、类型变量类型、泛型数组类型，也就是 Type 的子接口。</p><p>那为什么没有统一到 Class 下，而是增加一个 Type 呢？（Class 也是种类的意思，Type 是类型的意思）? </p><p>是为了程序的扩展性，最终引入了 Type 接口作为 Class，ParameterizedType，GenericArrayType，TypeVariable 和 WildcardType 这几种类型的总的父接口。</p><p>这样实现了 Type 类型参数接受以上五种子类的实参或者返回值类型就是 Type 类型的参数。</p><h2 id="Type应用"><a href="#Type应用" class="headerlink" title="Type应用"></a>Type应用</h2><p>有很多场景下我们可以获得Type，比如：</p><ol><li><p>当我们拿到一个Class，用Class. getGenericInterfaces()方法得到Type[]，也就是这个类实现接口的Type类型列表。</p></li><li><p>当我们拿到一个Class，用Class.getDeclaredFields()方法得到Field[]，也就是类的属性列表，然后用Field. getGenericType()方法得到这个属性的Type类型。</p></li><li><p>当我们拿到一个Method，用Method. getGenericParameterTypes()方法获得Type[]，也就是方法的参数类型列表。</p></li></ol><h2 id="Java-类型分类"><a href="#Java-类型分类" class="headerlink" title="Java 类型分类"></a>Java 类型分类</h2><p>Java 的所有类型包括：</p><ol><li>raw type：原始类型，对应 Class</li><li>parameterized types：参数化类型，对应 ParameterizedType</li><li>array types：数组类型，对应 GenericArrayType</li><li>type variables：类型变量，对应 TypeVariable</li><li>primitive types：基本类型，仍然对应 Class</li></ol><p>1 中的 Class，不仅仅指平常所指的类，还包括数组、接口、注解、枚举等结构。<br>3 中的数组类型 GenericArrayType，应该指的是 2、4 类型数组，而不是一般我们说的数组，我们一般所说的数组是指 1、5 类型数组，他们还是 1，也就是 Class 类型。</p><h3 id="TypeVariable"><a href="#TypeVariable" class="headerlink" title="TypeVariable"></a>TypeVariable</h3><p>类型参数，描述类型，表示泛指任意或相关一类类型，泛型声明所声明的类型参数，仅仅用作参数占位符的标识符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeVariable</span>&lt;<span class="title">D</span> <span class="keyword">extends</span> <span class="title">GenericDeclaration</span>&gt; <span class="keyword">extends</span> <span class="title">Type</span>, <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    AnnotatedType[] getAnnotatedBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回表示此类型变量的上限的 Type对象的数组</span></span><br><span class="line">    Type[] getBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取声明该类型变量实体(即获得类、方法或构造器名)</span></span><br><span class="line">    <span class="function">D <span class="title">getGenericDeclaration</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此类型变量的名称，表示占位符</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeVariable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Type[] types = CustomTypeVariable.class.getTypeParameters();</span><br><span class="line">        TypeVariable typeVariable = (TypeVariable) types[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: T</span></span><br><span class="line">        typeVariable.getName();</span><br><span class="line">        <span class="comment">//Output: Object</span></span><br><span class="line">        typeVariable.getBounds()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.CustomTypeVariable</span></span><br><span class="line">        typeVariable.getGenericDeclaration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ParameterizedType"><a href="#ParameterizedType" class="headerlink" title="ParameterizedType"></a>ParameterizedType</h3><p>参数化类型，形如：Object&lt;T, K&gt;，即常说的泛型，是 Type 的子接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParameterizedType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型参数数组</span></span><br><span class="line">    Type[] getActualTypeArguments();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此类型Type对象</span></span><br><span class="line">    <span class="function">Type <span class="title">getRawType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个 Type对象，表示此类型为其成员的类型</span></span><br><span class="line">    <span class="function">Type <span class="title">getOwnerType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomParameterizedType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;String&gt; contains = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> Map.Entry&lt;String,String&gt; mapEntry;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//字段</span></span><br><span class="line">        Field field = CustomParameterizedType.class.getDeclaredField(<span class="string">"mapEntry"</span>);</span><br><span class="line">        ParameterizedType paramterTypes = (ParameterizedType) field.getGenericType();</span><br><span class="line">        Type[] types = paramterTypes.getActualTypeArguments();</span><br><span class="line">        <span class="comment">//Output: java.util.Map$Entry</span></span><br><span class="line">        String rawType = paramterTypes.getRawType().getTypeName();</span><br><span class="line">        <span class="comment">//Output: java.util.Map</span></span><br><span class="line">        Type ownerType = paramterTypes.getOwnerType();</span><br><span class="line">        <span class="comment">//Output: [java.lang.String, java.lang.String]</span></span><br><span class="line">        Type[] typeArgs = paramterTypes.getActualTypeArguments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GenericArrayType"><a href="#GenericArrayType" class="headerlink" title="GenericArrayType"></a>GenericArrayType</h3><p>泛型数组，描述的是形如：A<t>[] 或 T[] 类型</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericArrayType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回泛型数组类型</span></span><br><span class="line">    <span class="function">Type <span class="title">getGenericComponentType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGenericArrayType</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] <span class="keyword">var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//GenericArrayType实例对象</span></span><br><span class="line">        Type fruitType = CustomGenericArrayType.class.getDeclaredField(<span class="string">"var"</span>).getGenericType();</span><br><span class="line">        <span class="comment">//泛型类型T</span></span><br><span class="line">        Type var1 = ((GenericArrayType)fruitType).getGenericComponentType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WildcardType"><a href="#WildcardType" class="headerlink" title="WildcardType"></a>WildcardType</h3><p>通配符表达式，泛型表达式，也可以说是，限定性的泛型，形如：? extends classA、？super classB。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WildcardType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型变量下限</span></span><br><span class="line">    Type[] getLowerBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型变量上限</span></span><br><span class="line">    Type[] getUpperBounds();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWildcardType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;? extends Fruit&gt; ft1;</span><br><span class="line">    <span class="keyword">private</span> List&lt;? <span class="keyword">super</span> Apple&gt; ft2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//读取参数化类型(ParameterizedType): List&lt;? extends Fruit&gt;</span></span><br><span class="line">        Type var1 = CustomWildcardType.class.getDeclaredField(<span class="string">"ft1"</span>).getGenericType();</span><br><span class="line">        Type var2 = CustomWildcardType.class.getDeclaredField(<span class="string">"ft2"</span>).getGenericType();</span><br><span class="line"></span><br><span class="line">        WildcardType w1 = (WildcardType) ((ParameterizedType) var1).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        WildcardType w2 = (WildcardType) ((ParameterizedType) var2).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.Fruit</span></span><br><span class="line">        Type type1 = w1.getUpperBounds()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.Apple</span></span><br><span class="line">        Type type2 = w2.getLowerBounds()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-core中-SerializableTypeWrapper"><a href="#spring-core中-SerializableTypeWrapper" class="headerlink" title="spring-core中 SerializableTypeWrapper"></a>spring-core中 SerializableTypeWrapper</h2><h3 id="类Type-类型的包装类"><a href="#类Type-类型的包装类" class="headerlink" title="类Type 类型的包装类"></a>类Type 类型的包装类</h3><p>从上面可知，Type 包括：原始类型，而泛型又可以衍生出：类型参数以及通配符表达式。获取类型信息不仅仅是局限于原始类型信息，如果是泛型，还需要知道它的类型参数或通配符参数等信息，那如何提供获取这些信息的工具？这里用到了 SerializableTypeWrapper 包装类，其内部通过不同的 Type 类型实现不同接口的代理类实现。client - &gt;TypeWriter -&gt; Proxy：先看类型包装器接口，TypeProvider 是字段类型、方法入参类型、方法返回类型的包装类，高层模块通过该实例获取类型的相关信息，包括泛型的原始类型、类型参数等等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TypeProvider</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Type <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回类型源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段-Field-对象包装器"><a href="#字段-Field-对象包装器" class="headerlink" title="字段 Field 对象包装器"></a>字段 Field 对象包装器</h3><p>仅仅对字段的封装，可以理解为字段的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fieldName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到目标属性所在类对应的Class对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Field field;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FieldTypeProvider</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fieldName = field.getName();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = field.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.field = field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回字段的声明类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.field.getGenericType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.field = <span class="keyword">this</span>.declaringClass.getDeclaredField(<span class="keyword">this</span>.fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find original class structure"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法参数包装器"><a href="#方法参数包装器" class="headerlink" title="方法参数包装器"></a>方法参数包装器</h3><p>其实就是对方法参数类型的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParameterTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到目标属性所在类对应的Class对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parameterIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> MethodParameter methodParameter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodParameterTypeProvider</span><span class="params">(MethodParameter methodParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.methodName = (methodParameter.getMethod() != <span class="keyword">null</span> ? methodParameter.getMethod().getName() : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.parameterTypes = methodParameter.getExecutable().getParameterTypes();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = methodParameter.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.parameterIndex = methodParameter.getParameterIndex();</span><br><span class="line">        <span class="keyword">this</span>.methodParameter = methodParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.methodParameter.getGenericParameterType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.methodParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.methodName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.methodParameter = <span class="keyword">new</span> MethodParameter(</span><br><span class="line">                        <span class="keyword">this</span>.declaringClass.getDeclaredMethod(<span class="keyword">this</span>.methodName, <span class="keyword">this</span>.parameterTypes), <span class="keyword">this</span>.parameterIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.methodParameter = <span class="keyword">new</span> MethodParameter(</span><br><span class="line">                        <span class="keyword">this</span>.declaringClass.getDeclaredConstructor(<span class="keyword">this</span>.parameterTypes), <span class="keyword">this</span>.parameterIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find original class structure"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回参数包装器"><a href="#返回参数包装器" class="headerlink" title="返回参数包装器"></a>返回参数包装器</h3><p>方法返回类型代理类，注意这里的 provider 属性，它指向泛型实例对象。例如，获取 List<string> 字段的原始类型，即调用代理类的 getRawType() 方法，即最终调用 MethodInvokeTypeProvider.getType()，此时 provider 执行 List 的包装类。</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInvokeTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String methodName; <span class="comment">//方法名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass; <span class="comment">// 所在类对应的Class对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodInvokeTypeProvider</span><span class="params">(TypeProvider provider, Method method, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.provider = provider;</span><br><span class="line">        <span class="keyword">this</span>.methodName = method.getName();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = method.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 延迟调用目标方法</span></span><br><span class="line">            result = ReflectionUtils.invokeMethod(<span class="keyword">this</span>.method, <span class="keyword">this</span>.provider.getType());</span><br><span class="line">            <span class="comment">// 缓存结果</span></span><br><span class="line">            <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (result <span class="keyword">instanceof</span> Type[] ? ((Type[]) result)[<span class="keyword">this</span>.index] : (Type) result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        Method method = ReflectionUtils.findMethod(<span class="keyword">this</span>.declaringClass, <span class="keyword">this</span>.methodName);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot find method on deserialization: "</span> + <span class="keyword">this</span>.methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getReturnType() != Type.class &amp;&amp; method.getReturnType() != Type[].class) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Invalid return type on deserialized method - needs to be Type or Type[]: "</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下 SerializableTypeWrapper 类的类属性常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] SUPPORTED_SERIALIZABLE_TYPES = &#123;</span><br><span class="line">GenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ConcurrentReferenceHashMap&lt;Type, Type&gt; cache = <span class="keyword">new</span> ConcurrentReferenceHashMap&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出：</p><p>定义了一个 Class 类型的数组，其元素分别为 GenericArrayType、ParameterizedType、TypeVariable、WildcardType，也就是为不同的泛型代理实现的接口。<br>使用 cache 缓存已创建的代理</p><p>获取类型对外暴露的静态方法，该方法在类型的代理类中也会被调用，在代理类中调用是为了获取泛型的相关类型信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">static Type forTypeProvider(TypeProvider provider) &#123;</span><br><span class="line">    Type providedType = provider.getType();</span><br><span class="line">    if (providedType == null || providedType instanceof Serializable) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 作为获取原始类型还是与泛型相关的信息(泛型原始类型、参数类型)入口</span><br><span class="line">         * 注意：</span><br><span class="line">         *  1、原始类型，对应 Class，Class实现Serializable接口，直接返回</span><br><span class="line">         *  2、泛型类型如List&lt;String&gt;，返回其代理类</span><br><span class="line">         */</span><br><span class="line">        return providedType;</span><br><span class="line">    &#125;</span><br><span class="line">    if (GraalDetector.inImageCode() || !Serializable.class.isAssignableFrom(Class.class)) &#123;</span><br><span class="line">        // 如果类型在当前运行时环境中通常不可序列化，那么跳过任何包装尝试</span><br><span class="line">        return providedType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取给定提供者的可序列化类型代理</span><br><span class="line">    Type cached = cache.get(providedType);</span><br><span class="line">    if (cached != null) &#123;</span><br><span class="line">        return cached;</span><br><span class="line">    &#125;</span><br><span class="line">    for (Class&lt;?&gt; type : SUPPORTED_SERIALIZABLE_TYPES) &#123;</span><br><span class="line">        if (type.isInstance(providedType)) &#123;</span><br><span class="line">            ClassLoader classLoader = provider.getClass().getClassLoader();</span><br><span class="line">            Class&lt;?&gt;[] interfaces = new Class&lt;?&gt;[] &#123;type, SerializableTypeProxy.class, Serializable.class&#125;;</span><br><span class="line">            InvocationHandler handler = new TypeProxyInvocationHandler(provider);</span><br><span class="line">            cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">            cache.put(providedType, cached);</span><br><span class="line">            return cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new IllegalArgumentException(&quot;Unsupported Type class: &quot; + providedType.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型代理类实现的接口"><a href="#泛型代理类实现的接口" class="headerlink" title="泛型代理类实现的接口"></a>泛型代理类实现的接口</h3><p>定义获取类型包装器 TypeProvider 对象协议：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SerializableTypeProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回基础类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TypeProvider <span class="title">getTypeProvider</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联的调用处理程序，当在代理实例上调用方法时，方法调用将被编码并分派到其调用处理程序的invoke方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类型包装类，例如List&lt;String&gt;的包装类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeProxyInvocationHandler</span><span class="params">(TypeProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.provider = provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, @Nullable Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写equals方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">"equals"</span>) &amp;&amp; args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object other = args[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// Unwrap proxies for speed</span></span><br><span class="line">            <span class="keyword">if</span> (other <span class="keyword">instanceof</span> Type) &#123;</span><br><span class="line">                other = unwrap((Type) other);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 确定给定的对象是否相等</span></span><br><span class="line">            <span class="keyword">return</span> ObjectUtils.nullSafeEquals(<span class="keyword">this</span>.provider.getType(), other);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写hashCode方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 返回给定对象的哈希码</span></span><br><span class="line">            <span class="keyword">return</span> ObjectUtils.nullSafeHashCode(<span class="keyword">this</span>.provider.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现SerializableTypeProxy.getTypeProvider()方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"getTypeProvider"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 执行getTypeProvider方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.provider;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现Type子接口返回Type类型的方法：</span></span><br><span class="line"><span class="comment">         *   GenericArrayType.getGenericComponentType()</span></span><br><span class="line"><span class="comment">         *   ParameterizedType.getRawType()/getOwnerType()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (Type.class == method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, -<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现Type子接口返回Type[]类型的方法：</span></span><br><span class="line"><span class="comment">         *   ParameterizedType.getActualTypeArguments()</span></span><br><span class="line"><span class="comment">         *   TypeVariable.getBounds()</span></span><br><span class="line"><span class="comment">         *   WildcardType.getUpperBounds()/getLowerBounds()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Type[].class == method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1: ParameterizedType.getActualTypeArguments()</span></span><br><span class="line"><span class="comment">             *    返回一个表示此类型的实际类型参数的Type数组,eg: Hash&lt;String, String&gt;返回[class java.lang.String, class java.lang.String]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Type[] result = <span class="keyword">new</span> Type[((Type[]) method.invoke(<span class="keyword">this</span>.provider.getType())).length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">                result[i] = forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>.provider.getType(), args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.getTargetException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看下 SerializableTypeWrapper 对外暴露的其他方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 返回泛型类型的可序列化变体</span><br><span class="line">@Nullable</span><br><span class="line">public static Type forField(Field field) &#123;</span><br><span class="line">    return forTypeProvider(new FieldTypeProvider(field));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回方法参数泛型类型的可序列化变体</span><br><span class="line">@Nullable</span><br><span class="line">public static Type forMethodParameter(MethodParameter methodParameter) &#123;</span><br><span class="line">    return forTypeProvider(new MethodParameterTypeProvider(methodParameter));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回原始类型</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public static &lt;T extends Type&gt; T unwrap(T type) &#123;</span><br><span class="line">    Type unwrapped = type;</span><br><span class="line">    while (unwrapped instanceof SerializableTypeProxy) &#123;</span><br><span class="line">        unwrapped = ((SerializableTypeProxy) type).getTypeProvider().getType();</span><br><span class="line">    &#125;</span><br><span class="line">    return (unwrapped != null ? (T) unwrapped : type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 Type 实例的调用过程：</p><p>总结：通过使用代理类的方式来获取具体的类型信息，特别是想要获取泛型相关的信息时，很直观。</p><p>接下来看下参数化类型 ParameterizedType 代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ParameterizedType</span>, <span class="title">SerializableTypeProxy</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m6;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m7;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// public final boolean equals(Object var1) &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// public final String toString() &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// public final int hashCode() &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getTypeName</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m6, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Type <span class="title">getOwnerType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m5, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TypeProvider <span class="title">getTypeProvider</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (TypeProvider)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m7, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Type[] getActualTypeArguments() <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type[])<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Type <span class="title">getRawType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m6 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getTypeName"</span>);</span><br><span class="line">            m5 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getOwnerType"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m7 = Class.forName(<span class="string">"com.wiket.proxy.Client$SerializableTypeProxy"</span>).getMethod(<span class="string">"getTypeProvider"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getActualTypeArguments"</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getRawType"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Type-来历&quot;&gt;&lt;a href=&quot;#Type-来历&quot; class=&quot;headerlink&quot; title=&quot;Type 来历&quot;&gt;&lt;/a&gt;Type 来历&lt;/h2&gt;&lt;p&gt;来历我们知道，Type 是 JDK5 开始引入的，其引入主要是为了泛型，没有泛型的之前， 只有所谓的
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="反射" scheme="http://www.throne4j.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Object详解</title>
    <link href="http://www.throne4j.com/qsk/java/Object.html"/>
    <id>http://www.throne4j.com/qsk/java/Object.html</id>
    <published>2016-05-27T08:30:14.000Z</published>
    <updated>2019-09-29T11:13:25.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java基础之Object"><a href="#java基础之Object" class="headerlink" title="java基础之Object"></a>java基础之Object</h1><p>走上java开发之路伊始，我们知道java是面向对象程序设计语言。</p><p>java中的Object是所有类的超级父类(基本类型不是对象，不做考虑)，如果没有显示指出类所实现的超类，Object类就被认为是这个类的超类。</p><p>Object所描述的属性和方法抽象出了所有对象所共有的属性和方法。</p><h2 id="private-static-native-void-registerNatives"><a href="#private-static-native-void-registerNatives" class="headerlink" title="private static native void registerNatives()"></a>private static native void registerNatives()</h2><p>注册本地方法</p><h2 id="public-final-native-Class-lt-gt-getClass"><a href="#public-final-native-Class-lt-gt-getClass" class="headerlink" title="public final native Class&lt;?&gt; getClass()"></a>public final native Class&lt;?&gt; getClass()</h2><p>不可被子类重写的native方法，getClass() 返回的实例对象的真实class类型</p><h2 id="public-native-int-hashCode"><a href="#public-native-int-hashCode" class="headerlink" title="public native int hashCode()"></a>public native int hashCode()</h2><p>可被子类重写的本地方法。默认情况下，对象的哈希码是通过将该对象的内部地址转换成一个整数来实现的。<br>哈希码的通用约定如下：</p><ul><li><p>在java程序执行过程中，在一个对象没有被改变的前提下，无论这个对象被调用多少次，hashCode方法都会返回相同的整数值。对象的哈希码没有必要在不同的程序中保持相同的值。</p></li><li><p>如果2个对象使用equals方法进行比较并且相同的话，那么这2个对象的hashCode方法的值也必须相等。</p><blockquote><p>现存在两个对象，obj1 和 obj2,如果违反这个约定的话，obj1.equals(obj2),但是hashCode不相等，在哈希表中会存入obj1和obj2，但是这两个元素是重复的，对于拥有不可重复元素特性的的Set集合来说，就会失去这一重要特性，而产生不可预期的后果。</p></blockquote></li><li><p>如果根据equals方法，得到两个对象不相等，那么这2个对象的hashCode值不需要必须不相同。但是，不相等的对象的hashCode值不同的话可以提高哈希表的性能。</p></li></ul><h2 id="public-boolean-equals-Object-obj"><a href="#public-boolean-equals-Object-obj" class="headerlink" title="public boolean equals(Object obj)"></a>public boolean equals(Object obj)</h2><p>比较对象的内存地址<br>equals方法在非空对象引用上的特性：</p><ul><li>reflexive，自反性。任何非空引用值x，对于x.equals(x)必须返回true</li><li>symmetric，对称性。任何非空引用值x和y，如果x.equals(y)为true，那么y.equals(x)也必须为true</li><li>transitive，传递性。任何非空引用值x、y和z，如果x.equals(y)为true并且y.equals(z)为true，那么x.equals(z)也必定为true</li><li>consistent，一致性。任何非空引用值x和y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改</li><li>对于任何非空引用值 x，x.equals(null) 都应返回 false</li></ul><h2 id="protected-native-Object-clone-throws-CloneNotSupportedException"><a href="#protected-native-Object-clone-throws-CloneNotSupportedException" class="headerlink" title="protected native Object clone() throws CloneNotSupportedException"></a>protected native Object clone() throws CloneNotSupportedException</h2><p>创建并返回对象的一份浅拷贝，一般情况下，对于任何对象 x，表达式 x.clone() != x 为true，x.clone().getClass() == x.getClass() 也为true。</p><p>由于Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常</p><h2 id="public-String-toString"><a href="#public-String-toString" class="headerlink" title="public String toString()"></a>public String toString()</h2><p>Object对象的默认实现，即输出类的名字@实例的哈希码的16进制：</p><h2 id="public-final-native-void-notify"><a href="#public-final-native-void-notify" class="headerlink" title="public final native void notify()"></a>public final native void notify()</h2><p>唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果所有的线程都在此对象上等待，那么只会选择一个线程。选择是任意性的，并在对实现做出决定时发生。一个线程在对象监视器上等待可以调用wait方法。</p><p>直到当前线程放弃对象上的锁之后，被唤醒的线程才可以继续处理。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争。例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。</p><p>notify方法只能被作为此对象监视器的所有者的线程来调用。一个线程要想成为对象监视器的所有者，可以使用以下3种方法：</p><ul><li>执行对象的同步实例方法</li><li>使用synchronized内置锁</li><li>对于Class类型的对象，执行同步静态方法</li></ul><p>一次只能有一个线程拥有对象的监视器。</p><p>如果当前线程不是此对象监视器的所有者的话会抛出IllegalMonitorStateException异常</p><p>注意点：</p><p>因为notify只能在拥有对象监视器的所有者线程中调用，否则会抛出IllegalMonitorStateException异常</p><h2 id="public-final-native-void-notifyAll"><a href="#public-final-native-void-notifyAll" class="headerlink" title="public final native void notifyAll()"></a>public final native void notifyAll()</h2><p>同notify(),唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</p><h2 id="public-final-native-void-wait-long-timeout-throws-InterruptedException"><a href="#public-final-native-void-wait-long-timeout-throws-InterruptedException" class="headerlink" title="public final native void wait(long timeout) throws InterruptedException"></a>public final native void wait(long timeout) throws InterruptedException</h2><p>wait方法会让当前线程等待直到另外一个线程调用对象的notify或notifyAll方法，或者超过参数设置的timeout超时时间。</p><p>跟notify和notifyAll方法一样，当前线程必须是此对象的监视器所有者，否则还是会发生IllegalMonitorStateException异常。</p><p>wait方法会让当前线程(我们先叫做线程T)将其自身放置在对象的等待集中，并且放弃该对象上的所有同步要求。出于线程调度目的，线程T是不可用并处于休眠状态，直到发生以下四件事中的任意一件：</p><ul><li>其他某个线程调用此对象的notify方法，并且线程T碰巧被任选为被唤醒的线程</li><li>其他某个线程调用此对象的notifyAll方法</li><li>其他某个线程调用Thread.interrupt方法中断线程T</li><li>时间到了参数设置的超时时间。如果timeout参数为0，则不会超时，会一直进行等待</li><li>所以可以理解wait方法相当于放弃了当前线程对对象监视器的所有者(也就是说释放了对象的锁)</li></ul><p>之后，线程T会被等待集中被移除，并且重新进行线程调度。然后，该线程以常规方式与其他线程竞争，以获得在该对象上同步的权利；一旦获得对该对象的控制权，该对象上的所有其同步声明都将被恢复到以前的状态，这就是调用wait方法时的情况。然后，线程T从wait方法的调用中返回。所以，从wait方法返回时，该对象和线程T的同步状态与调用wait方法时的情况完全相同。</p><p>在没有被通知、中断或超时的情况下，线程还可以唤醒一个所谓的虚假唤醒 (spurious wakeup)。虽然这种情况在实践中很少发生，但是应用程序必须通过以下方式防止其发生，即对应该导致该线程被提醒的条件进行测试，如果不满足该条件，则继续等待。换句话说，等待应总是发生在循环中，如下面的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">    <span class="keyword">while</span> (&lt;condition does not hold&gt;)</span><br><span class="line">        obj.wait(timeout);</span><br><span class="line">        ... <span class="comment">// Perform action appropriate to condition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前线程在等待之前或在等待时被任何线程中断，则会抛出InterruptedException异常。在按上述形式恢复此对象的锁定状态时才会抛出此异常。</p><p>wait(long timeout, int nanos) throws InterruptedException方法<br>跟wait(long timeout)方法类似，多了一个nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</p><p>需要注意的是 wait(0, 0)和wait(0)效果是一样的，即一直等待。</p><h2 id="public-final-void-wait-long-timeout-int-nanos-throws-InterruptedException"><a href="#public-final-void-wait-long-timeout-int-nanos-throws-InterruptedException" class="headerlink" title="public final void wait(long timeout, int nanos) throws InterruptedException"></a>public final void wait(long timeout, int nanos) throws InterruptedException</h2><h2 id="public-final-void-wait-throws-InterruptedException"><a href="#public-final-void-wait-throws-InterruptedException" class="headerlink" title="public final void wait() throws InterruptedException"></a>public final void wait() throws InterruptedException</h2><h2 id="protected-void-finalize-throws-Throwable"><a href="#protected-void-finalize-throws-Throwable" class="headerlink" title="protected void finalize() throws Throwable"></a>protected void finalize() throws Throwable</h2><p>在对象实例被垃圾回收系统回收时触发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java基础之Object&quot;&gt;&lt;a href=&quot;#java基础之Object&quot; class=&quot;headerlink&quot; title=&quot;java基础之Object&quot;&gt;&lt;/a&gt;java基础之Object&lt;/h1&gt;&lt;p&gt;走上java开发之路伊始，我们知道java是面向对象
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="基础" scheme="http://www.throne4j.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
