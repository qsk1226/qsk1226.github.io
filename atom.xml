<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大爷来玩儿啊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.throne4j.com/"/>
  <updated>2019-09-16T13:12:49.794Z</updated>
  <id>http://www.throne4j.com/</id>
  
  <author>
    <name>我跟人飙车来着</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.throne4j.com/qsk/uncategorized/undefined.html"/>
    <id>http://www.throne4j.com/qsk/uncategorized/undefined.html</id>
    <published>2019-09-16T13:12:49.794Z</published>
    <updated>2019-09-16T13:12:49.794Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Set详解<br>comments: true<br>date: 2019-09-14 03:23:08<br>categories: java<br>tags: 集合<br>urlname: set</p><h2 id="keywords-set"><a href="#keywords-set" class="headerlink" title="keywords: set"></a>keywords: set</h2><hr><ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，</p></li><li><p><a href="/qsk/java/queue.html">Queue队列</a></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: Set详解&lt;br&gt;comments: true&lt;br&gt;date: 2019-09-14 03:23:08&lt;br&gt;categories: java&lt;br&gt;tags: 集合&lt;br&gt;urlname: set&lt;/p&gt;
&lt;h2 id=&quot;keywords-set
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.throne4j.com/qsk/uncategorized/undefined.html"/>
    <id>http://www.throne4j.com/qsk/uncategorized/undefined.html</id>
    <published>2019-09-16T12:20:49.873Z</published>
    <updated>2019-09-16T12:20:49.873Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Queue详解<br>comments: true<br>date: 2019-09-14 03:23:08<br>categories: java<br>tags: 集合<br>urlname: queue</p><h2 id="keywords-queue-Deque"><a href="#keywords-queue-Deque" class="headerlink" title="keywords: queue;Deque"></a>keywords: queue;Deque</h2><hr><ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，</p></li><li><p><a href="/qsk/java/queue.html">Queue队列</a></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: Queue详解&lt;br&gt;comments: true&lt;br&gt;date: 2019-09-14 03:23:08&lt;br&gt;categories: java&lt;br&gt;tags: 集合&lt;br&gt;urlname: queue&lt;/p&gt;
&lt;h2 id=&quot;keywords
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>list详解</title>
    <link href="http://www.throne4j.com/qsk/java/list.html"/>
    <id>http://www.throne4j.com/qsk/java/list.html</id>
    <published>2019-09-13T19:23:08.000Z</published>
    <updated>2019-09-16T13:50:11.539Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，</p></li><li><p><a href="/qsk/java/queue.html">Queue队列</a></p></li></ul><hr><h1 id="鸟瞰-List接口"><a href="#鸟瞰-List接口" class="headerlink" title="鸟瞰 List接口"></a>鸟瞰 List接口</h1><p>List继承了Collection接口，它用某种特定的插入顺序来维护元素顺序，<strong><em>集合有序、允许重复值、可插入null</em></strong>。下面我们看下List的UML图：</p><p><img src="/qsk/java/list/List%E6%8E%A5%E5%8F%A3UML.png" alt="List接口UML"></p><ul><li><p>ArrayList<br>基于动态数组实现，可以动态的扩容，用户拥有对元素精确插入的控制权。当集合中对插入元素数据的速度要求不高，但是要求快速访问元素数据，则使用此集合</p></li><li><p>LinkedList<br>基于链表实现，是一个双向循环列表，可以被当做堆栈使用。当集合中对访问元素数据速度不做要求不高，但是对插入和删除元素数据速度要求高的情况，则使用LinkedList</p></li><li><p>Vector<br>同样基于数组实现，并且满足多线程环境下的安全操作。Collections.synchronizedList(list)或者并发包下面的CopyOnWriteArrayList来实现线程安全的集合。</p></li><li><p>Stack<br>基于数组实现，是栈，它继承与Vector，特性是FILO（先进后出）。当集合中有需求是希望后保存的数据先读取出来，则使用Stack</p></li></ul><hr><h2 id="AbstractList抽象类实现"><a href="#AbstractList抽象类实现" class="headerlink" title="AbstractList抽象类实现"></a>AbstractList抽象类实现</h2><pre><code>Itr 内部类 ,iterator迭代器ListItr 内部类,listIterator迭代器addgetsetaddremoveindexOf(int index)lastIndexOfclearaddAlliterator() listIterator() 集合全部元素的双向迭代器listIterator(int index)  从index位置开始的迭代器subList(int from, int to) 截取子集合equalshashCoderemoveRangerangeCheckForAdd(int) 范围检查outOfBoundsMsg(int) 是否超出界限modCount  集合被修改了多少次</code></pre><p>SubList 子集合类<br>RandomAccessSubList随机访问子集合</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList由于是由数组实现，可实现自动扩容操作，默认初始容量：10，随着ArrayList中元素的增加，它的容量会不断的自动增长。</p><h3 id="ArrayList-序列化"><a href="#ArrayList-序列化" class="headerlink" title="ArrayList 序列化"></a>ArrayList 序列化</h3><p>通过源码，我们知道用于存储元素的数组elementData被transient关键字修饰，我们知道被transient修饰的对象不被应用在序列化，那么ArrayList是将元素序列化的呢？源码中有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//将ArrayList实例的状态保存到流中(即序列化它)。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从流(即反序列化)中重新构造ArrayList实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in capacity</span></span><br><span class="line">        s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要这样实现呢？原因在于elementData作为存储元素的缓存数组，它会预留一些容量用于添加元素，这些预留的空间并不存储任何元素，为了保证序列化时拿到的是用户的实际大小的数组数据。<br>java序列化查看此篇章【<a href="/qsk/java/understand_java_serial.html">深入理解java序列化</a>】</p><hr><h3 id="list迭代器"><a href="#list迭代器" class="headerlink" title="list迭代器"></a>list迭代器</h3><p>我们知道在遍历List集合的时候不允许对集合进行修改操作，否则会抛出ConcurrentModifiedException异常信息，为了解决这个问题，可以使用List提供给我们的特殊迭代器<strong>ListIterator</strong>，此迭代器除了提供集合操作之外还允许双向访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"李磊"</span>);</span><br><span class="line">        list.add(<span class="string">"韩梅梅"</span>);</span><br><span class="line">        list.add(<span class="string">"Lucy"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        ListIterator&lt;String&gt; iterator = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            String element = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>(element.equals(<span class="string">"李磊"</span>))&#123;</span><br><span class="line">                iterator.set(<span class="string">"韩梅梅她老公"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (element.equals(<span class="string">"Lucy"</span>)) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>输出结果 :<br>[李磊, 韩梅梅, Lucy]<br>[韩梅梅她老公, 韩梅梅]</p><hr><h3 id="ArrayList的常用操作"><a href="#ArrayList的常用操作" class="headerlink" title="ArrayList的常用操作"></a>ArrayList的常用操作</h3><h4 id="1-add-E-element-在末尾添加指定类型的元素"><a href="#1-add-E-element-在末尾添加指定类型的元素" class="headerlink" title="1. add(E element) 在末尾添加指定类型的元素"></a>1. add(E element) 在末尾添加指定类型的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 进行扩容操作，并增加modCounnnt </span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行扩容操作</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//列表被修改的次数</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">//将容量扩到1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// 将老集合元素复制到新长度的集合中</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-add-int-index-E-element-在下标为index的位置插入element元素，后面的元素后移一位"><a href="#2-add-int-index-E-element-在下标为index的位置插入element元素，后面的元素后移一位" class="headerlink" title="2. add(int index, E element) 在下标为index的位置插入element元素，后面的元素后移一位"></a>2. add(int index, E element) 在下标为index的位置插入element元素，后面的元素后移一位</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 对源数组进行复制处理（位移），从index + 1到size-index。主要目的就是空出index位置供数据插入</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-E-remove-int-index-移除下标为index的元素"><a href="#3-E-remove-int-index-移除下标为index的元素" class="headerlink" title="3. E remove(int index) 移除下标为index的元素"></a>3. E remove(int index) 移除下标为index的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-get-int-index-获取下标为index的元素"><a href="#4-get-int-index-获取下标为index的元素" class="headerlink" title="4. get(int index) 获取下标为index的元素"></a>4. get(int index) 获取下标为index的元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    <span class="comment">//检查集合是否被修改</span></span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-set-int-index-E-element-将下标为index的元素设置为element"><a href="#5-set-int-index-E-element-将下标为index的元素设置为element" class="headerlink" title="5. set(int index, E element) 将下标为index的元素设置为element"></a>5. set(int index, E element) 将下标为index的元素设置为element</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        retur</span><br></pre></td></tr></table></figure><h4 id="6-trimToSize-将”elementData-”的大小设置为集合的当前大小-size"><a href="#6-trimToSize-将”elementData-”的大小设置为集合的当前大小-size" class="headerlink" title="6. trimToSize() 将”elementData[]”的大小设置为集合的当前大小(size)"></a>6. trimToSize() 将”elementData[]”的大小设置为集合的当前大小(size)</h4><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>LinkedList实现了 List 和<strong>Deque</strong>，实现所有可选列表操作，并允许所有元素(包括{@code null})。</p><ul><li>Deque : 支持在两端插入和删除元素的线性集合。</li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="LinkedList的基础属性及实现数据的结构"><a href="#LinkedList的基础属性及实现数据的结构" class="headerlink" title="LinkedList的基础属性及实现数据的结构"></a>LinkedList的基础属性及实现数据的结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合的长度</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="comment">// 为节点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此数据结构 实现了LinkedList双向链表功能</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 节点保存的数据</span></span><br><span class="line">    E item;</span><br><span class="line">    <span class="comment">//指向下一个元素</span></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    <span class="comment">// 指向前一个元素</span></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedList提供的List接口相关方法"><a href="#LinkedList提供的List接口相关方法" class="headerlink" title="LinkedList提供的List接口相关方法"></a>LinkedList提供的List接口相关方法</h4><h5 id="1-node-int-index-返回指定元素索引处的-非空-节点。"><a href="#1-node-int-index-返回指定元素索引处的-非空-节点。" class="headerlink" title="1. node(int index) 返回指定元素索引处的(非空)节点。"></a>1. node(int index) 返回指定元素索引处的(非空)节点。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// index 小于集合长度的1/2，从头部开始定位元素；反之，从尾部开始定位元素。</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Add-E-e-添加指定类型的元素"><a href="#2-Add-E-e-添加指定类型的元素" class="headerlink" title="2. Add(E e)添加指定类型的元素"></a>2. Add(E e)添加指定类型的元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 末尾设置为元素e</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 记录当前的末尾节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">// 构建元素为E的节点newNode</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 将last节点设置为newNode</span></span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">// 如果尾结点为null，添加元素设置为头结点，否则，将原尾结点的next指向新节点newNode</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    <span class="comment">// 集合长度加1</span></span><br><span class="line">    size++;</span><br><span class="line">    <span class="comment">// 集合已被修改</span></span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-add-int-index-E-element"><a href="#3-add-int-index-E-element" class="headerlink" title="3. add(int index, E element)"></a>3. add(int index, E element)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="comment">// index为集合长度的时候，添加末尾元素，否则在index之前添加元素</span></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-E-get-int-index-获取下标为index的元素"><a href="#4-E-get-int-index-获取下标为index的元素" class="headerlink" title="4. E get(int index) 获取下标为index的元素"></a>4. E get(int index) 获取下标为index的元素</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    return node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-remove-int-index-删除指定索引元素"><a href="#5-remove-int-index-删除指定索引元素" class="headerlink" title="5. remove(int index) 删除指定索引元素"></a>5. remove(int index) 删除指定索引元素</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line">    <span class="comment">// 头节点头结点为null</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾节点next指向为null</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-contain-Object-o-是否包含元素o"><a href="#6-contain-Object-o-是否包含元素o" class="headerlink" title="6. contain(Object o) 是否包含元素o"></a>6. contain(Object o) 是否包含元素o</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-clear"><a href="#7-clear" class="headerlink" title="7. clear()"></a>7. clear()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Clearing all of the links between nodes is "unnecessary", but:</span></span><br><span class="line">    <span class="comment">// - helps a generational GC if the discarded nodes inhabit</span></span><br><span class="line">    <span class="comment">//   more than one generation</span></span><br><span class="line">    <span class="comment">// - is sure to free memory even if there is a reachable Iterator</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">        Node&lt;E&gt; next = x.next;</span><br><span class="line">        x.item = <span class="keyword">null</span>;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">        x = next;</span><br><span class="line">    &#125;</span><br><span class="line">    first = last = <span class="keyword">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-set-index-E-element-将index索引的元素设置为element"><a href="#8-set-index-E-element-将index索引的元素设置为element" class="headerlink" title="8. set(index, E element) 将index索引的元素设置为element"></a>8. set(index, E element) 将index索引的元素设置为element</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    return oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedList提供的Deque接口常用方法"><a href="#LinkedList提供的Deque接口常用方法" class="headerlink" title="LinkedList提供的Deque接口常用方法"></a>LinkedList提供的Deque接口常用方法</h4><h5 id="1-E-getFirst-获取头节点"><a href="#1-E-getFirst-获取头节点" class="headerlink" title="1. E getFirst() 获取头节点"></a>1. E getFirst() 获取头节点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> f.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-E-getLast-获取尾节点"><a href="#2-E-getLast-获取尾节点" class="headerlink" title="2. E getLast() 获取尾节点"></a>2. E getLast() 获取尾节点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public E getLast() &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    if (l == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return l.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-removeFirst"><a href="#3-removeFirst" class="headerlink" title="3. removeFirst()"></a>3. removeFirst()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-removeLast"><a href="#4-removeLast" class="headerlink" title="4. removeLast()"></a>4. removeLast()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = l.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    l.item = <span class="keyword">null</span>;</span><br><span class="line">    l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    last = prev;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prev.next = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-addFirst-E-e-将指定的元素追加到队头。"><a href="#5-addFirst-E-e-将指定的元素追加到队头。" class="headerlink" title="5. addFirst(E e) 将指定的元素追加到队头。"></a>5. addFirst(E e) 将指定的元素追加到队头。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as first element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-addLast-E-e-将指定的元素追加到此列表的末尾。"><a href="#6-addLast-E-e-将指定的元素追加到此列表的末尾。" class="headerlink" title="6. addLast(E e) 将指定的元素追加到此列表的末尾。"></a>6. addLast(E e) 将指定的元素追加到此列表的末尾。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-E-peek-检索但不删除此列表的头-第一个元素-。"><a href="#7-E-peek-检索但不删除此列表的头-第一个元素-。" class="headerlink" title="7. E peek() 检索但不删除此列表的头(第一个元素)。"></a>7. E peek() 检索但不删除此列表的头(第一个元素)。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first; </span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-poll-检索并删除此列表的头部-第一个元素-。"><a href="#8-poll-检索并删除此列表的头部-第一个元素-。" class="headerlink" title="8. poll() 检索并删除此列表的头部(第一个元素)。"></a>8. poll() 检索并删除此列表的头部(第一个元素)。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-boolean-offer-E-e-将指定的元素添加为列表的尾部-最后一个元素-。"><a href="#9-boolean-offer-E-e-将指定的元素添加为列表的尾部-最后一个元素-。" class="headerlink" title="9. boolean offer(E e) 将指定的元素添加为列表的尾部(最后一个元素)。"></a>9. boolean offer(E e) 将指定的元素添加为列表的尾部(最后一个元素)。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10-boolean-offerFirst-E-e-将指定的元素插入到此列表的前面。"><a href="#10-boolean-offerFirst-E-e-将指定的元素插入到此列表的前面。" class="headerlink" title="10. boolean offerFirst(E e) 将指定的元素插入到此列表的前面。"></a>10. boolean offerFirst(E e) 将指定的元素插入到此列表的前面。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="11-E-pop-从这个列表表示的堆栈中弹出一个元素。"><a href="#11-E-pop-从这个列表表示的堆栈中弹出一个元素。" class="headerlink" title="11. E pop() 从这个列表表示的堆栈中弹出一个元素。"></a>11. E pop() 从这个列表表示的堆栈中弹出一个元素。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12-push-E-e-将元素推入此列表所表示的堆栈。"><a href="#12-push-E-e-将元素推入此列表所表示的堆栈。" class="headerlink" title="12. push(E e) 将元素推入此列表所表示的堆栈。"></a>12. push(E e) 将元素推入此列表所表示的堆栈。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    addFirst(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>由于Vector和ArrayList大体不差多少，另在多线程环境下，不推荐使用的原因，此处不作详解。唯一需要注意的地方，如使用的情况下，别乱复合使用。</p><h4 id="Stack堆栈"><a href="#Stack堆栈" class="headerlink" title="Stack堆栈"></a>Stack堆栈</h4><p>Stack继承自Vector，内部实现也是Vector，实现先进后出的特性。栈最主要的意义就在于：入栈和出栈的对称性。</p><h5 id="push-将项推到堆栈顶部。"><a href="#push-将项推到堆栈顶部。" class="headerlink" title="push 将项推到堆栈顶部。"></a>push 将项推到堆栈顶部。</h5><h5 id="pop-删除堆栈顶部的对象，并将该对象作为该函数的值返回。"><a href="#pop-删除堆栈顶部的对象，并将该对象作为该函数的值返回。" class="headerlink" title="pop 删除堆栈顶部的对象，并将该对象作为该函数的值返回。"></a>pop 删除堆栈顶部的对象，并将该对象作为该函数的值返回。</h5><h5 id="peek-查看堆栈顶部的对象，而不将其从堆栈中删除"><a href="#peek-查看堆栈顶部的对象，而不将其从堆栈中删除" class="headerlink" title="peek 查看堆栈顶部的对象，而不将其从堆栈中删除"></a>peek 查看堆栈顶部的对象，而不将其从堆栈中删除</h5><h5 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h5><h5 id="search-返回的是距离栈顶的距离"><a href="#search-返回的是距离栈顶的距离" class="headerlink" title="search 返回的是距离栈顶的距离"></a>search 返回的是距离栈顶的距离</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/collection_record.html&quot;&gt;Collection集合&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/list.html&quot;&gt;List集合&lt;/a&gt; 继承Col
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="集合" scheme="http://www.throne4j.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>golang安装配置</title>
    <link href="http://www.throne4j.com/qsk/golang/golang_install_config.html"/>
    <id>http://www.throne4j.com/qsk/golang/golang_install_config.html</id>
    <published>2019-06-03T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:01.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go语言"><a href="#go语言" class="headerlink" title="go语言"></a>go语言</h1><p>在mac osx系统上安装go语言非常简单，直接在官网上下载mac os版的安装包一路next即可安装成功。<br>另外可使用HomeBrew来实现go语言的安装，brew install go</p><h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>配置 GOPATH 设置go项目的工作目录，在go项目的工作目录中至少存在三个目录：</p><ul><li>src<blockquote><p>用于以代码包的形式组织并保存go源文件，这里的代码包与src下的子目录一一对应。</p></blockquote></li><li>pkg<blockquote><p>编译后生成的文件（.a文件）。非main函数的文件在go install后生成。<br>  用于存放通过go install命令安装后的代码包的归档文件。前提是代码包中必须包含go库源码文件。</p></blockquote></li><li>bin<blockquote><p>存放编译后生成的可执行文件,通过go install命令完成安装后，保存由go命令源码文件生成的可执行文件。</p></blockquote></li></ul><h2 id="GOBIN"><a href="#GOBIN" class="headerlink" title="GOBIN"></a>GOBIN</h2><p>GOBIN是 GOPATH 下的bin目录</p><h2 id="GOROOT-go语言的安装路径"><a href="#GOROOT-go语言的安装路径" class="headerlink" title="GOROOT go语言的安装路径"></a>GOROOT go语言的安装路径</h2><h2 id="源码文件"><a href="#源码文件" class="headerlink" title="源码文件"></a>源码文件</h2><p>1) 命令源码文件<br>    &gt; 如果一个源码文件被声明属于main代码包，且该文件代码中包含无参数声明和结果声明的main函数，则他就是命令源码文件。命令源码文件可以直接通过go run 命令直接启动运行。<br>2) 库源码文件<br>    &gt;通常，库源码文件声明的包名 会 与它直接所属的代码包名一致，且库源码文件中不包含无参数声明和无结果声明的main函数<br>3) 测试源码文件<br>    &gt; 测试源码文件是一种特殊的库文件，可以通过执行 go test 命令运行当前代码包下的所有测试源码文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;go语言&quot;&gt;&lt;a href=&quot;#go语言&quot; class=&quot;headerlink&quot; title=&quot;go语言&quot;&gt;&lt;/a&gt;go语言&lt;/h1&gt;&lt;p&gt;在mac osx系统上安装go语言非常简单，直接在官网上下载mac os版的安装包一路next即可安装成功。&lt;br&gt;另外可使
      
    
    </summary>
    
      <category term="golang" scheme="http://www.throne4j.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://www.throne4j.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>深入理解java序列化</title>
    <link href="http://www.throne4j.com/qsk/java/understand_java_serial.html"/>
    <id>http://www.throne4j.com/qsk/java/understand_java_serial.html</id>
    <published>2019-06-03T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:38.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解java序列化"><a href="#深入理解java序列化" class="headerlink" title="深入理解java序列化"></a>深入理解java序列化</h1><p>如果你只知道实现Serializable接口的对象，可以序列化为本地文件。那你最好再阅读该篇文章，文章对序列化进行了更深一步的讨论，用实际的例子代码讲述了序列化的高级认识，包括父类序列化的问题、静态变量问题、transient关键字的影响、序列化ID问题。在笔者实际开发过程中，就多次遇到序列化的问题，在该文章中也会与读者分享。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>将Java对象序列化为二进制文件的Java序列化技术是Java系列技术中一个较为重要的技术点，在大部分情况下，开发人员只需要了解被序列化的类需要实现Serializable接口，使用ObjectInputStream和ObjectOutputStream进行对象的读写。然而在有些情况下，光知道这些还远远不够，文章列举了笔者遇到的一些真实情境，它们与Java序列化相关，通过分析情境出现的原因，使读者轻松牢记<br>Java 序列化中的一些高级认识。</p><h2 id="序列化-ID-问题"><a href="#序列化-ID-问题" class="headerlink" title="序列化 ID 问题"></a>序列化 ID 问题</h2><ul><li><p><strong>情境</strong>：两个客户端 A 和 B 试图通过网络传递对象数据，A 端将对象 C序列化为二进制数据再传给 B，B 反序列化得到 C。</p></li><li><p><strong>问题</strong>：C 对象的全类路径假设为 com.inout.Test，在 A 和 B端都有这么一个类文件，功能代码完全一致。也都实现了 Serializable接口，但是反序列化时总是提示不成功。</p></li><li><p><strong>解决</strong>：虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化ID 是否一致（就是 private static final long serialVersionUID = 1L）。清单1 中，虽然两个类的功能代码完全一致，但是序列化 ID 不同，他们无法相互序列化和反序列化。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.inout; </span><br><span class="line">import java.io.Serializable; </span><br><span class="line">public class A implements Serializable &#123; </span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L; </span><br><span class="line">    private String name; public String getName() &#123; return name; &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.inout;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">public class A implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 2L;</span><br><span class="line">    private String name;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化ID在Eclipse下提供了两种生成策略，一个是固定的1L，一个是随机生成一个不重复的long类型数据（实际上是使用JDK工具生成），在这里有一个建议，如果没有特殊需求，就是用默认的1L就可以，这样可以确保代码一致时反序列化成功。那么随机生成的序列化ID有什么作用呢，有些时候，通过改变序列化ID可以用来限制某些用户的使用。</p><h3 id="特性使用案例"><a href="#特性使用案例" class="headerlink" title="特性使用案例"></a>特性使用案例</h3><p>　　读者应该听过Façade模式，它是为应用程序提供统一的访问接口，案例程序中的Client客户端使用了该模式，案例程序结构图如图1所示。</p><p><img src="/qsk/java/understand_java_serial/%E5%9B%BE.png" alt="图1"></p><p>　　Client端通过FaçadeObject才可以与业务逻辑对象进行交互。而客户端的FaçadeObject不能直接由Client生成，而是需要Server端生成，然后序列化后通过网络将二进制对象数据传给Client，Client负责反序列化得到Façade对象。该模式可以使得Client端程序的使用需要服务器端的许可,同时Client端和服务器端的FaçadeObject类需要保持一致。当服务器端想要进行版本更新时，只要将服务器端的FaçadeObject类的序列化ID再次生成，当Client端反序列化FaçadeObject就会失败，也就是强制Client端从服务器端获取最新程序。</p><h2 id="静态变量序列化"><a href="#静态变量序列化" class="headerlink" title="静态变量序列化"></a>静态变量序列化</h2><ul><li><strong>情境</strong>：查看清单 2 的代码。</li></ul><p>清单 2. 静态变量序列化问题代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Test implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    public static int staticVar = 5;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //初始时staticVar为5</span><br><span class="line">            ObjectOutputStream out = new ObjectOutputStream(</span><br><span class="line">                    new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">            out.writeObject(new Test());</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">            //序列化后修改为10</span><br><span class="line">            Test.staticVar = 10;</span><br><span class="line"> </span><br><span class="line">            ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">                    &quot;result.obj&quot;));</span><br><span class="line">            Test t = (Test) oin.readObject();</span><br><span class="line">            oin.close();</span><br><span class="line">             </span><br><span class="line">            //再读取，通过t.staticVar打印新的值</span><br><span class="line">            System.out.println(t.staticVar);</span><br><span class="line">             </span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　清单2中的main方法，将对象序列化后，修改静态变量的数值，再将序列化对象读取出来，然后通过读取出来的对象获得静态变量的数值并打印出来。依照清单2，这个System.out.println(t.staticVar) 语句输出的是 10 还是 5 呢？最后的输出是10，对于无法理解的读者认为，打印的 staticVar是从读取的对象里获得的，应该是保存时的状态才对。之所以打印10的原因在于序列化时，并不保存静态变量，这其实比较容易理解，序列化保存的是对象的状态，静态变量属于类的状态，因此序列化并不保存静态变量。</p><h2 id="父类的序列化与-Transient-关键字"><a href="#父类的序列化与-Transient-关键字" class="headerlink" title="父类的序列化与 Transient 关键字"></a>父类的序列化与 Transient 关键字</h2><ul><li><p><strong>情境</strong>：一个子类实现了 Serializable 接口，它的父类都没有实现 Serializable接口，序列化该子类对象，然后反序列化后输出父类定义的某变量的数值，该变量数值与序列化时的数值不同。</p></li><li><p><strong>解决</strong>：要想将父类对象也序列化，就需要让父类也实现Serializable接口。如果父类不实现的话的，就需要有默认的无参的构造函数。在父类没有实现Serializable 接口时，虚拟机是不会序列化父对象的，而一个 Java对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。因此当我们取父对象的变量值时，它的值是调用父类无参构造函数后的值。如果你考虑到这种序列化的情况，在父类无参构造函数中对变量进行初始化，否则的话，父类变量值都是默认声明的值，如 int 型的默认是 0，string 型的默认是 null。</p></li></ul><p>　　Transient关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient变量的值被设为初始值，如int 型的是 0，对象型的是 null。</p><h3 id="特性使用案例-1"><a href="#特性使用案例-1" class="headerlink" title="特性使用案例"></a>特性使用案例</h3><p>　　我们熟悉使用Transient关键字可以使得字段不被序列化，那么还有别的方法吗？根据父类对象序列化的规则，我们可以将不需要被序列化的字段抽取出来放到父类中，子类实现Serializable接口，父类不实现，根据父类序列化规则，父类的字段数据将不被序列化，形成类图如图 2 所示。</p><p><img src="/qsk/java/understand_java_serial/%E6%A1%88%E4%BE%8B%E7%A8%8B%E5%BA%8F%E5%9B%BE.png" alt="案例程序图"></p><p>　　上图中可以看出，attr1、attr2、attr3、attr5都不会被序列化，放在父类中的好处在于当有另外一个Child类时，attr1、attr2、attr3依然不会被序列化，不用重复抒写transient，代码简洁。</p><h2 id="对敏感字段加密"><a href="#对敏感字段加密" class="headerlink" title="对敏感字段加密"></a>对敏感字段加密</h2><ul><li><strong>情境</strong>：服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。</li><li><strong>解决</strong>：在序列化过程中，虚拟机会试图调用对象类里的writeObject和readObject方法，进行用户自定义的序列化和反序列化，如果没有这样的方法，则默认调用是ObjectOutputStream的defaultWriteObject方法以及ObjectInputStream的defaultReadObject方法。用户自定义的writeObject和readObject方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。基于这个原理，可以在实际应用中得到使用，用于敏感字段的加密工作，清单3展示了这个过程。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">private String password = &quot;pass&quot;;</span><br><span class="line">public String getPassword() &#123;</span><br><span class="line">    return password;</span><br><span class="line">&#125;</span><br><span class="line">public void setPassword(String password) &#123;</span><br><span class="line">    this.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void writeObject(ObjectOutputStream out) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        PutField putFields = out.putFields();</span><br><span class="line">        System.out.println(&quot;原密码:&quot; + password);</span><br><span class="line">        password = &quot;encryption&quot;;//模拟加密</span><br><span class="line">        putFields.put(&quot;password&quot;, password);</span><br><span class="line">        System.out.println(&quot;加密后的密码&quot; + password);</span><br><span class="line">        out.writeFields();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void readObject(ObjectInputStream in) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        GetField readFields = in.readFields();</span><br><span class="line">        Object object = readFields.get(&quot;password&quot;, &quot;&quot;);</span><br><span class="line">        System.out.println(&quot;要解密的字符串:&quot; + object.toString());</span><br><span class="line">        password = &quot;pass&quot;;//模拟解密,需要获得本地的密钥</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        ObjectOutputStream out = new ObjectOutputStream(</span><br><span class="line">                new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">        out.writeObject(new Test());</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">                &quot;result.obj&quot;));</span><br><span class="line">        Test t = (Test) oin.readObject();</span><br><span class="line">        System.out.println(&quot;解密后的字符串:&quot; + t.getPassword());</span><br><span class="line">        oin.close();</span><br><span class="line">    &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在清单 3 的 writeObject 方法中，对密码进行了加密，在 readObject 中则对<br>password进行解密，只有拥有密钥的客户端，才可以正确的解析出密码，确保了数据的安全。执行清单<br>3后控制台输出如图 3 所示:</p><p> <img src="/qsk/java/understand_java_serial/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%E6%BC%94%E7%A4%BA.png" alt="数据加密演示"></p><h3 id="特性使用案例-2"><a href="#特性使用案例-2" class="headerlink" title="特性使用案例"></a>特性使用案例</h3><p>　　RMI 技术是完全基于 Java序列化技术的，服务器端接口调用所需要的参数对象来至于客户端，它们通过网络相互传输。这就涉及RMI的安全传输的问题。一些敏感的字段，如用户名密码（用户登录时需要对密码进行传输），我们希望对其进行加密，这时，就可以采用本节介绍的方法在客户端对密码进行加密，服务器端进行解密，确保数据传输的安全性。</p><h3 id="序列化存储规则"><a href="#序列化存储规则" class="headerlink" title="序列化存储规则"></a>序列化存储规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ObjectOutputStream out = new ObjectOutputStream(</span><br><span class="line">                   new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">   Test test = new Test();</span><br><span class="line">   //试图将对象两次写入文件</span><br><span class="line">   out.writeObject(test);</span><br><span class="line">   out.flush();</span><br><span class="line">   System.out.println(new File(&quot;result.obj&quot;).length());</span><br><span class="line">   out.writeObject(test);</span><br><span class="line">   out.close();</span><br><span class="line">   System.out.println(new File(&quot;result.obj&quot;).length());</span><br><span class="line"></span><br><span class="line">   ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">           &quot;result.obj&quot;));</span><br><span class="line">   //从文件依次读出两个文件</span><br><span class="line">   Test t1 = (Test) oin.readObject();</span><br><span class="line">   Test t2 = (Test) oin.readObject();</span><br><span class="line">   oin.close();</span><br><span class="line"></span><br><span class="line">   //判断两个引用是否指向同一个对象</span><br><span class="line">   System.out.println(t1 == t2);</span><br></pre></td></tr></table></figure><p>　　清单 3中对同一对象两次写入文件，打印出写入一次对象后的存储大小和写入两次后的存储大小，然后从文件中反序列化出两个对象，比较这两个对象是否为同一对象。一般的思维是，两次写入对象，文件大小会变为两倍的大小，反序列化时，由于从文件读取，生成了两个对象，判断相等时应该是输入false 才对，但是最后结果输出如图 4 所示。</p><p><img src="/qsk/java/understand_java_serial/image.png" alt="image"></p><p>　　我们看到，第二次写入对象时文件只增加了 5 字节，并且两个对象是相等的，这是为什么呢？</p><ul><li><strong>解答</strong>：Java序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，上面增加的5 字节的存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系，使得清单 3中的 t1 和 t2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。</li></ul><h3 id="特性案例分析"><a href="#特性案例分析" class="headerlink" title="特性案例分析"></a>特性案例分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;result.obj&quot;));</span><br><span class="line">Test test = new Test();</span><br><span class="line">test.i = 1;</span><br><span class="line">out.writeObject(test);</span><br><span class="line">out.flush();</span><br><span class="line">test.i = 2;</span><br><span class="line">out.writeObject(test);</span><br><span class="line">out.close();</span><br><span class="line">ObjectInputStream oin = new ObjectInputStream(new FileInputStream(</span><br><span class="line">                    &quot;result.obj&quot;));</span><br><span class="line">Test t1 = (Test) oin.readObject();</span><br><span class="line">Test t2 = (Test) oin.readObject();</span><br><span class="line">System.out.println(t1.i);</span><br><span class="line">System.out.println(t2.i);</span><br></pre></td></tr></table></figure><p>　　清单 4 的目的是希望将 test 对象两次保存到result.obj文件中，写入一次以后修改对象属性值再次保存第二次，然后从result.obj中再依次读出两个对象，输出这两个对象的i属性值。案例代码的目的原本是希望一次性传输对象修改前后的状态。结果两个输出的都是 1，原因就是第一次写入对象以后，第二次再试图写的时候，虚拟机根据引用关系知道已经有一个相同对象已经写入文件，因此只保存第二次写的引用，所以读取时，都是第一次保存的对象。读者在使用一个文件多次writeObject 需要特别注意这个问题。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文通过几个具体的情景，介绍了Java序列化的一些高级知识，虽说高级，并不是说读者们都不了解，希望用笔者介绍的情景让读者加深印象，能够更加合理的利用Java序列化技术，在未来开发之路上遇到序列化问题时，可以及时的解决。由于本人知识水平有限，文章中倘若有错误的地方，欢迎联系我批评指正。</p><h2 id="转载自-读书使人进步"><a href="#转载自-读书使人进步" class="headerlink" title="转载自  读书使人进步"></a>转载自  <a href="https://www.cnblogs.com/wxgblogs/p/5849951.html" target="_blank" rel="noopener">读书使人进步</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解java序列化&quot;&gt;&lt;a href=&quot;#深入理解java序列化&quot; class=&quot;headerlink&quot; title=&quot;深入理解java序列化&quot;&gt;&lt;/a&gt;深入理解java序列化&lt;/h1&gt;&lt;p&gt;如果你只知道实现Serializable接口的对象，可以序列化为本地
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="序列化" scheme="http://www.throne4j.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>深入理解java反射(一)</title>
    <link href="http://www.throne4j.com/qsk/java/understand_java_reflect.html"/>
    <id>http://www.throne4j.com/qsk/java/understand_java_reflect.html</id>
    <published>2019-06-03T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:30.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解java反射机制"><a href="#深入理解java反射机制" class="headerlink" title="深入理解java反射机制"></a>深入理解java反射机制</h1><p>反射(Reflection)是 Java程序开发语言的特征之一，它允许运行中的<br>Java程序获取自身的信息，并且可以操作类或对象的内部属性。</p><p>首先 我们看下java.lang.reflect包下面几个主要类的关系图</p><p><img src="/qsk/java/understand_java_reflect/java.lang.reflect%E5%8C%85%E4%B8%BB%E8%A6%81%E7%B1%BB%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg" alt></p><h2 id="AnnotatedElement"><a href="#AnnotatedElement" class="headerlink" title="AnnotatedElement"></a>AnnotatedElement</h2><p>该接口的实现类代表程序中可以接受注解的程序元素，这个接口提供了获取注解相关的功能，该接口主要有一下几个实现类：</p><ul><li><p>Class 类定义</p></li><li><p>Constructor 构造器定义</p></li><li><p>Field 属性成员定义</p></li><li><p>Method 方法定义</p></li><li><p>Package 包定义</p><p><img src="/qsk/java/understand_java_reflect/%E6%B3%A8%E8%A7%A3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9.jpg" alt></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; <span class="function">T <span class="title">getDeclaredAnnotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass);</span><br><span class="line">    <span class="keyword">default</span> &lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass);</span><br><span class="line">    &lt;T extends Annotation&gt; <span class="function">T <span class="title">getAnnotation</span><span class="params">(Class&lt;T&gt; annotationClass)</span></span>;</span><br><span class="line">    Annotation[] getAnnotations();</span><br><span class="line">    Annotation[] getDeclaredAnnotations();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现用户自定义注解"><a href="#实现用户自定义注解" class="headerlink" title="实现用户自定义注解"></a>实现用户自定义注解</h3><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><h2 id="GenericDeclaration"><a href="#GenericDeclaration" class="headerlink" title="GenericDeclaration"></a>GenericDeclaration</h2><p>提供了获取泛型相关的功能，只有方法和构造方法上支持泛型，所以只有Method，Constructor实现了该接口</p><h2 id="Member"><a href="#Member" class="headerlink" title="Member"></a>Member</h2><p>作为一个对象内部方法和属性的声明的抽象，包含了名称，修饰符，所在的类,其中修饰符包含了 static final public private volatile 等，通过一个整数表示，每一个类型在二进制中占一个位.</p><h2 id="AccessibleObject"><a href="#AccessibleObject" class="headerlink" title="AccessibleObject"></a>AccessibleObject</h2><p>这是一个类，提供了权限管理的功能，例如是否允许在反射中在外部调用一个private方法，获取一个private属性的值，所以method，constructor,field都继承该类，下面这段代码展示了如何在反射中访问一个私有的成员变量，class对象的构造方法不允许对外。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private static void setAccessible0(AccessibleObject obj, boolean flag)</span><br><span class="line">    throws SecurityException</span><br><span class="line">&#123;</span><br><span class="line">    if (obj instanceof Constructor &amp;&amp; flag == true) &#123;</span><br><span class="line">        Constructor&lt;?&gt; c = (Constructor&lt;?&gt;)obj;</span><br><span class="line">        if (c.getDeclaringClass() == Class.class) &#123;</span><br><span class="line">            throw new SecurityException(&quot;Cannot make a java.lang.Class&quot; +</span><br><span class="line">                                        &quot; constructor accessible&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    obj.override = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boolean override;</span><br><span class="line"></span><br><span class="line">public boolean isAccessible() &#123;</span><br><span class="line">    return override;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为 Field里面通过field.get(原始对象)获取属性值得实现,先通过override做校验，如果没有重载该权限，则需要校验访问权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public Object get(Object obj)</span><br><span class="line">    throws IllegalArgumentException, IllegalAccessException</span><br><span class="line">&#123;</span><br><span class="line">    if (!override) &#123;</span><br><span class="line">        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return getFieldAccessor(obj).get(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解java反射机制&quot;&gt;&lt;a href=&quot;#深入理解java反射机制&quot; class=&quot;headerlink&quot; title=&quot;深入理解java反射机制&quot;&gt;&lt;/a&gt;深入理解java反射机制&lt;/h1&gt;&lt;p&gt;反射(Reflection)是 Java程序开发语言的特征之
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="反射" scheme="http://www.throne4j.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>反射Type详解</title>
    <link href="http://www.throne4j.com/qsk/java/reflect_type_detail.html"/>
    <id>http://www.throne4j.com/qsk/java/reflect_type_detail.html</id>
    <published>2019-06-03T13:38:43.000Z</published>
    <updated>2019-09-13T19:17:46.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Type-来历"><a href="#Type-来历" class="headerlink" title="Type 来历"></a>Type 来历</h2><p>来历我们知道，Type 是 JDK5 开始引入的，其引入主要是为了泛型，没有泛型的之前， 只有所谓的原始类型。<br>此时，所有的原始类型都通过字节码文件类 Class 类进行抽象。 Class 类的一个具体对象就代表一个指定的原始类型。</p><p>泛型出现之后，也就扩充了数据类型。从只有原始类型扩充了参数化类型、类型变量类型、泛型数组类型，也就是 Type 的子接口。</p><p>那为什么没有统一到 Class 下，而是增加一个 Type 呢？（Class 也是种类的意思，Type 是类型的意思）? </p><p>是为了程序的扩展性，最终引入了 Type 接口作为 Class，ParameterizedType，GenericArrayType，TypeVariable 和 WildcardType 这几种类型的总的父接口。</p><p>这样实现了 Type 类型参数接受以上五种子类的实参或者返回值类型就是 Type 类型的参数。</p><h2 id="Type应用"><a href="#Type应用" class="headerlink" title="Type应用"></a>Type应用</h2><p>有很多场景下我们可以获得Type，比如：</p><ol><li><p>当我们拿到一个Class，用Class. getGenericInterfaces()方法得到Type[]，也就是这个类实现接口的Type类型列表。</p></li><li><p>当我们拿到一个Class，用Class.getDeclaredFields()方法得到Field[]，也就是类的属性列表，然后用Field. getGenericType()方法得到这个属性的Type类型。</p></li><li><p>当我们拿到一个Method，用Method. getGenericParameterTypes()方法获得Type[]，也就是方法的参数类型列表。</p></li></ol><h2 id="Java-类型分类"><a href="#Java-类型分类" class="headerlink" title="Java 类型分类"></a>Java 类型分类</h2><p>Java 的所有类型包括：</p><ol><li>raw type：原始类型，对应 Class</li><li>parameterized types：参数化类型，对应 ParameterizedType</li><li>array types：数组类型，对应 GenericArrayType</li><li>type variables：类型变量，对应 TypeVariable</li><li>primitive types：基本类型，仍然对应 Class</li></ol><p>1 中的 Class，不仅仅指平常所指的类，还包括数组、接口、注解、枚举等结构。<br>3 中的数组类型 GenericArrayType，应该指的是 2、4 类型数组，而不是一般我们说的数组，我们一般所说的数组是指 1、5 类型数组，他们还是 1，也就是 Class 类型。</p><h3 id="TypeVariable"><a href="#TypeVariable" class="headerlink" title="TypeVariable"></a>TypeVariable</h3><p>类型参数，描述类型，表示泛指任意或相关一类类型，泛型声明所声明的类型参数，仅仅用作参数占位符的标识符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeVariable</span>&lt;<span class="title">D</span> <span class="keyword">extends</span> <span class="title">GenericDeclaration</span>&gt; <span class="keyword">extends</span> <span class="title">Type</span>, <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    AnnotatedType[] getAnnotatedBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回表示此类型变量的上限的 Type对象的数组</span></span><br><span class="line">    Type[] getBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取声明该类型变量实体(即获得类、方法或构造器名)</span></span><br><span class="line">    <span class="function">D <span class="title">getGenericDeclaration</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此类型变量的名称，表示占位符</span></span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTypeVariable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Type[] types = CustomTypeVariable.class.getTypeParameters();</span><br><span class="line">        TypeVariable typeVariable = (TypeVariable) types[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: T</span></span><br><span class="line">        typeVariable.getName();</span><br><span class="line">        <span class="comment">//Output: Object</span></span><br><span class="line">        typeVariable.getBounds()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.CustomTypeVariable</span></span><br><span class="line">        typeVariable.getGenericDeclaration();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ParameterizedType"><a href="#ParameterizedType" class="headerlink" title="ParameterizedType"></a>ParameterizedType</h3><p>参数化类型，形如：Object&lt;T, K&gt;，即常说的泛型，是 Type 的子接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParameterizedType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型参数数组</span></span><br><span class="line">    Type[] getActualTypeArguments();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此类型Type对象</span></span><br><span class="line">    <span class="function">Type <span class="title">getRawType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个 Type对象，表示此类型为其成员的类型</span></span><br><span class="line">    <span class="function">Type <span class="title">getOwnerType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomParameterizedType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;String&gt; contains = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> Map.Entry&lt;String,String&gt; mapEntry;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//字段</span></span><br><span class="line">        Field field = CustomParameterizedType.class.getDeclaredField(<span class="string">"mapEntry"</span>);</span><br><span class="line">        ParameterizedType paramterTypes = (ParameterizedType) field.getGenericType();</span><br><span class="line">        Type[] types = paramterTypes.getActualTypeArguments();</span><br><span class="line">        <span class="comment">//Output: java.util.Map$Entry</span></span><br><span class="line">        String rawType = paramterTypes.getRawType().getTypeName();</span><br><span class="line">        <span class="comment">//Output: java.util.Map</span></span><br><span class="line">        Type ownerType = paramterTypes.getOwnerType();</span><br><span class="line">        <span class="comment">//Output: [java.lang.String, java.lang.String]</span></span><br><span class="line">        Type[] typeArgs = paramterTypes.getActualTypeArguments();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GenericArrayType"><a href="#GenericArrayType" class="headerlink" title="GenericArrayType"></a>GenericArrayType</h3><p>泛型数组，描述的是形如：A<t>[] 或 T[] 类型</t></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericArrayType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回泛型数组类型</span></span><br><span class="line">    <span class="function">Type <span class="title">getGenericComponentType</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGenericArrayType</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] <span class="keyword">var</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//GenericArrayType实例对象</span></span><br><span class="line">        Type fruitType = CustomGenericArrayType.class.getDeclaredField(<span class="string">"var"</span>).getGenericType();</span><br><span class="line">        <span class="comment">//泛型类型T</span></span><br><span class="line">        Type var1 = ((GenericArrayType)fruitType).getGenericComponentType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WildcardType"><a href="#WildcardType" class="headerlink" title="WildcardType"></a>WildcardType</h3><p>通配符表达式，泛型表达式，也可以说是，限定性的泛型，形如：? extends classA、？super classB。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WildcardType</span> <span class="keyword">extends</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型变量下限</span></span><br><span class="line">    Type[] getLowerBounds();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回类型变量上限</span></span><br><span class="line">    Type[] getUpperBounds();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWildcardType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;? extends Fruit&gt; ft1;</span><br><span class="line">    <span class="keyword">private</span> List&lt;? <span class="keyword">super</span> Apple&gt; ft2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="comment">//读取参数化类型(ParameterizedType): List&lt;? extends Fruit&gt;</span></span><br><span class="line">        Type var1 = CustomWildcardType.class.getDeclaredField(<span class="string">"ft1"</span>).getGenericType();</span><br><span class="line">        Type var2 = CustomWildcardType.class.getDeclaredField(<span class="string">"ft2"</span>).getGenericType();</span><br><span class="line"></span><br><span class="line">        WildcardType w1 = (WildcardType) ((ParameterizedType) var1).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        WildcardType w2 = (WildcardType) ((ParameterizedType) var2).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.Fruit</span></span><br><span class="line">        Type type1 = w1.getUpperBounds()[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//Output: com.aspire.search.test.Apple</span></span><br><span class="line">        Type type2 = w2.getLowerBounds()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring-core中-SerializableTypeWrapper"><a href="#spring-core中-SerializableTypeWrapper" class="headerlink" title="spring-core中 SerializableTypeWrapper"></a>spring-core中 SerializableTypeWrapper</h2><h3 id="类Type-类型的包装类"><a href="#类Type-类型的包装类" class="headerlink" title="类Type 类型的包装类"></a>类Type 类型的包装类</h3><p>从上面可知，Type 包括：原始类型，而泛型又可以衍生出：类型参数以及通配符表达式。获取类型信息不仅仅是局限于原始类型信息，如果是泛型，还需要知道它的类型参数或通配符参数等信息，那如何提供获取这些信息的工具？这里用到了 SerializableTypeWrapper 包装类，其内部通过不同的 Type 类型实现不同接口的代理类实现。client - &gt;TypeWriter -&gt; Proxy：先看类型包装器接口，TypeProvider 是字段类型、方法入参类型、方法返回类型的包装类，高层模块通过该实例获取类型的相关信息，包括泛型的原始类型、类型参数等等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TypeProvider</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">Type <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回类型源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字段-Field-对象包装器"><a href="#字段-Field-对象包装器" class="headerlink" title="字段 Field 对象包装器"></a>字段 Field 对象包装器</h3><p>仅仅对字段的封装，可以理解为字段的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String fieldName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到目标属性所在类对应的Class对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Field field;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FieldTypeProvider</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fieldName = field.getName();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = field.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.field = field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 返回字段的声明类型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.field.getGenericType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.field = <span class="keyword">this</span>.declaringClass.getDeclaredField(<span class="keyword">this</span>.fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find original class structure"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法参数包装器"><a href="#方法参数包装器" class="headerlink" title="方法参数包装器"></a>方法参数包装器</h3><p>其实就是对方法参数类型的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParameterTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到目标属性所在类对应的Class对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parameterIndex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> MethodParameter methodParameter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodParameterTypeProvider</span><span class="params">(MethodParameter methodParameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.methodName = (methodParameter.getMethod() != <span class="keyword">null</span> ? methodParameter.getMethod().getName() : <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.parameterTypes = methodParameter.getExecutable().getParameterTypes();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = methodParameter.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.parameterIndex = methodParameter.getParameterIndex();</span><br><span class="line">        <span class="keyword">this</span>.methodParameter = methodParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.methodParameter.getGenericParameterType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.methodParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.methodName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.methodParameter = <span class="keyword">new</span> MethodParameter(</span><br><span class="line">                        <span class="keyword">this</span>.declaringClass.getDeclaredMethod(<span class="keyword">this</span>.methodName, <span class="keyword">this</span>.parameterTypes), <span class="keyword">this</span>.parameterIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.methodParameter = <span class="keyword">new</span> MethodParameter(</span><br><span class="line">                        <span class="keyword">this</span>.declaringClass.getDeclaredConstructor(<span class="keyword">this</span>.parameterTypes), <span class="keyword">this</span>.parameterIndex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not find original class structure"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回参数包装器"><a href="#返回参数包装器" class="headerlink" title="返回参数包装器"></a>返回参数包装器</h3><p>方法返回类型代理类，注意这里的 provider 属性，它指向泛型实例对象。例如，获取 List<string> 字段的原始类型，即调用代理类的 getRawType() 方法，即最终调用 MethodInvokeTypeProvider.getType()，此时 provider 执行 List 的包装类。</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInvokeTypeProvider</span> <span class="keyword">implements</span> <span class="title">TypeProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String methodName; <span class="comment">//方法名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; declaringClass; <span class="comment">// 所在类对应的Class对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodInvokeTypeProvider</span><span class="params">(TypeProvider provider, Method method, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.provider = provider;</span><br><span class="line">        <span class="keyword">this</span>.methodName = method.getName();</span><br><span class="line">        <span class="keyword">this</span>.declaringClass = method.getDeclaringClass();</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object result = <span class="keyword">this</span>.result;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 延迟调用目标方法</span></span><br><span class="line">            result = ReflectionUtils.invokeMethod(<span class="keyword">this</span>.method, <span class="keyword">this</span>.provider.getType());</span><br><span class="line">            <span class="comment">// 缓存结果</span></span><br><span class="line">            <span class="keyword">this</span>.result = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (result <span class="keyword">instanceof</span> Type[] ? ((Type[]) result)[<span class="keyword">this</span>.index] : (Type) result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream inputStream)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        inputStream.defaultReadObject();</span><br><span class="line">        Method method = ReflectionUtils.findMethod(<span class="keyword">this</span>.declaringClass, <span class="keyword">this</span>.methodName);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot find method on deserialization: "</span> + <span class="keyword">this</span>.methodName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.getReturnType() != Type.class &amp;&amp; method.getReturnType() != Type[].class) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"Invalid return type on deserialized method - needs to be Type or Type[]: "</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下 SerializableTypeWrapper 类的类属性常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] SUPPORTED_SERIALIZABLE_TYPES = &#123;</span><br><span class="line">GenericArrayType.class, ParameterizedType.class, TypeVariable.class, WildcardType.class&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ConcurrentReferenceHashMap&lt;Type, Type&gt; cache = <span class="keyword">new</span> ConcurrentReferenceHashMap&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出：</p><p>定义了一个 Class 类型的数组，其元素分别为 GenericArrayType、ParameterizedType、TypeVariable、WildcardType，也就是为不同的泛型代理实现的接口。<br>使用 cache 缓存已创建的代理</p><p>获取类型对外暴露的静态方法，该方法在类型的代理类中也会被调用，在代理类中调用是为了获取泛型的相关类型信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">static Type forTypeProvider(TypeProvider provider) &#123;</span><br><span class="line">    Type providedType = provider.getType();</span><br><span class="line">    if (providedType == null || providedType instanceof Serializable) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 作为获取原始类型还是与泛型相关的信息(泛型原始类型、参数类型)入口</span><br><span class="line">         * 注意：</span><br><span class="line">         *  1、原始类型，对应 Class，Class实现Serializable接口，直接返回</span><br><span class="line">         *  2、泛型类型如List&lt;String&gt;，返回其代理类</span><br><span class="line">         */</span><br><span class="line">        return providedType;</span><br><span class="line">    &#125;</span><br><span class="line">    if (GraalDetector.inImageCode() || !Serializable.class.isAssignableFrom(Class.class)) &#123;</span><br><span class="line">        // 如果类型在当前运行时环境中通常不可序列化，那么跳过任何包装尝试</span><br><span class="line">        return providedType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取给定提供者的可序列化类型代理</span><br><span class="line">    Type cached = cache.get(providedType);</span><br><span class="line">    if (cached != null) &#123;</span><br><span class="line">        return cached;</span><br><span class="line">    &#125;</span><br><span class="line">    for (Class&lt;?&gt; type : SUPPORTED_SERIALIZABLE_TYPES) &#123;</span><br><span class="line">        if (type.isInstance(providedType)) &#123;</span><br><span class="line">            ClassLoader classLoader = provider.getClass().getClassLoader();</span><br><span class="line">            Class&lt;?&gt;[] interfaces = new Class&lt;?&gt;[] &#123;type, SerializableTypeProxy.class, Serializable.class&#125;;</span><br><span class="line">            InvocationHandler handler = new TypeProxyInvocationHandler(provider);</span><br><span class="line">            cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">            cache.put(providedType, cached);</span><br><span class="line">            return cached;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new IllegalArgumentException(&quot;Unsupported Type class: &quot; + providedType.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型代理类实现的接口"><a href="#泛型代理类实现的接口" class="headerlink" title="泛型代理类实现的接口"></a>泛型代理类实现的接口</h3><p>定义获取类型包装器 TypeProvider 对象协议：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SerializableTypeProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回基础类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">TypeProvider <span class="title">getTypeProvider</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关联的调用处理程序，当在代理实例上调用方法时，方法调用将被编码并分派到其调用处理程序的invoke方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类型包装类，例如List&lt;String&gt;的包装类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TypeProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeProxyInvocationHandler</span><span class="params">(TypeProvider provider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.provider = provider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, @Nullable Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写equals方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">"equals"</span>) &amp;&amp; args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object other = args[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// Unwrap proxies for speed</span></span><br><span class="line">            <span class="keyword">if</span> (other <span class="keyword">instanceof</span> Type) &#123;</span><br><span class="line">                other = unwrap((Type) other);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 确定给定的对象是否相等</span></span><br><span class="line">            <span class="keyword">return</span> ObjectUtils.nullSafeEquals(<span class="keyword">this</span>.provider.getType(), other);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 重写hashCode方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 返回给定对象的哈希码</span></span><br><span class="line">            <span class="keyword">return</span> ObjectUtils.nullSafeHashCode(<span class="keyword">this</span>.provider.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现SerializableTypeProxy.getTypeProvider()方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (method.getName().equals(<span class="string">"getTypeProvider"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 执行getTypeProvider方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.provider;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现Type子接口返回Type类型的方法：</span></span><br><span class="line"><span class="comment">         *   GenericArrayType.getGenericComponentType()</span></span><br><span class="line"><span class="comment">         *   ParameterizedType.getRawType()/getOwnerType()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (Type.class == method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, -<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实现Type子接口返回Type[]类型的方法：</span></span><br><span class="line"><span class="comment">         *   ParameterizedType.getActualTypeArguments()</span></span><br><span class="line"><span class="comment">         *   TypeVariable.getBounds()</span></span><br><span class="line"><span class="comment">         *   WildcardType.getUpperBounds()/getLowerBounds()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Type[].class == method.getReturnType() &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1: ParameterizedType.getActualTypeArguments()</span></span><br><span class="line"><span class="comment">             *    返回一个表示此类型的实际类型参数的Type数组,eg: Hash&lt;String, String&gt;返回[class java.lang.String, class java.lang.String]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Type[] result = <span class="keyword">new</span> Type[((Type[]) method.invoke(<span class="keyword">this</span>.provider.getType())).length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">                result[i] = forTypeProvider(<span class="keyword">new</span> MethodInvokeTypeProvider(<span class="keyword">this</span>.provider, method, i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>.provider.getType(), args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.getTargetException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看下 SerializableTypeWrapper 对外暴露的其他方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 返回泛型类型的可序列化变体</span><br><span class="line">@Nullable</span><br><span class="line">public static Type forField(Field field) &#123;</span><br><span class="line">    return forTypeProvider(new FieldTypeProvider(field));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回方法参数泛型类型的可序列化变体</span><br><span class="line">@Nullable</span><br><span class="line">public static Type forMethodParameter(MethodParameter methodParameter) &#123;</span><br><span class="line">    return forTypeProvider(new MethodParameterTypeProvider(methodParameter));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回原始类型</span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">public static &lt;T extends Type&gt; T unwrap(T type) &#123;</span><br><span class="line">    Type unwrapped = type;</span><br><span class="line">    while (unwrapped instanceof SerializableTypeProxy) &#123;</span><br><span class="line">        unwrapped = ((SerializableTypeProxy) type).getTypeProvider().getType();</span><br><span class="line">    &#125;</span><br><span class="line">    return (unwrapped != null ? (T) unwrapped : type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 Type 实例的调用过程：</p><p>总结：通过使用代理类的方式来获取具体的类型信息，特别是想要获取泛型相关的信息时，很直观。</p><p>接下来看下参数化类型 ParameterizedType 代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">ParameterizedType</span>, <span class="title">SerializableTypeProxy</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m6;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m5;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m7;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// public final boolean equals(Object var1) &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// public final String toString() &#123;...&#125;</span></span><br><span class="line">    <span class="comment">// public final int hashCode() &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getTypeName</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m6, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Type <span class="title">getOwnerType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m5, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TypeProvider <span class="title">getTypeProvider</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (TypeProvider)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m7, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Type[] getActualTypeArguments() <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type[])<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Type <span class="title">getRawType</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Type)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m6 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getTypeName"</span>);</span><br><span class="line">            m5 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getOwnerType"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m7 = Class.forName(<span class="string">"com.wiket.proxy.Client$SerializableTypeProxy"</span>).getMethod(<span class="string">"getTypeProvider"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getActualTypeArguments"</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">"java.lang.reflect.ParameterizedType"</span>).getMethod(<span class="string">"getRawType"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Type-来历&quot;&gt;&lt;a href=&quot;#Type-来历&quot; class=&quot;headerlink&quot; title=&quot;Type 来历&quot;&gt;&lt;/a&gt;Type 来历&lt;/h2&gt;&lt;p&gt;来历我们知道，Type 是 JDK5 开始引入的，其引入主要是为了泛型，没有泛型的之前， 只有所谓的
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="反射" scheme="http://www.throne4j.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>netty权威指南学习（二）</title>
    <link href="http://www.throne4j.com/qsk/netty/netty_user_guide_2.html"/>
    <id>http://www.throne4j.com/qsk/netty/netty_user_guide_2.html</id>
    <published>2019-06-02T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:30.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-NIO-入门"><a href="#第二章-NIO-入门" class="headerlink" title="第二章 NIO 入门"></a>第二章 NIO 入门</h1><p>在本章中，我们会分别对JDK的BIO、NIO、NIO2.0的使用进行详细说明。本章主要内容包括：</p><ul><li>传统的同步阻塞式IO编程</li><li>基于NIO的非阻塞编程</li><li>基于NIO2.0的异步非阻塞(AIO)编程</li><li>为什么使用NIO编程</li><li>为什么使用Netty</li></ul><h2 id="2-1传统的BIO编程"><a href="#2-1传统的BIO编程" class="headerlink" title="2.1传统的BIO编程"></a>2.1传统的BIO编程</h2><p>　　网络编程的基本模型是client/server，也就是client进程与server进程通过3次握手之后建立连接，进而实现相互通信。</p><h3 id="2-1-1-BIO通信模型"><a href="#2-1-1-BIO通信模型" class="headerlink" title="2.1.1 BIO通信模型"></a>2.1.1 BIO通信模型</h3><p>　　BIO服务端通信模型（见下图）通常由一个Acceptor 负责接收客户端的请求，它接收到客户端请求之后，为每一个请求新建一个新的线程进行链路处理，处理完成之后，将处理结果数据，以流的方式发送给客户端，然后销毁线程。这就是典型的一请求一应答的通信模式。<br>　　该模型最大的问题就是缺乏弹性伸缩能力，当客户端并发访问量上来之后，服务端的线程和客户访问量呈1:1的关系增加，当服务端线程过多消耗java虚拟机的资源后，导致性能急剧下降，甚至将导致服务端宕机、僵死而无法提供服务。</p><p><img src="/qsk/netty/netty_user_guide_2/BIO%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.jpg" alt="BIO通信模型">　　</p><h3 id="2-1-2-同步阻塞式IO创建的TimeServer源码分析"><a href="#2-1-2-同步阻塞式IO创建的TimeServer源码分析" class="headerlink" title="2.1.2 同步阻塞式IO创建的TimeServer源码分析"></a>2.1.2 同步阻塞式IO创建的TimeServer源码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.shengke.netty.bio;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author qinshengke</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @date 2016-06-02 21:40</span><br><span class="line"> */</span><br><span class="line">public class TimeServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        int port = 8080;</span><br><span class="line">        if (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">            port = Integer.valueOf(args[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        ServerSocket server = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            server = new ServerSocket(port);</span><br><span class="line">            System.out.println(&quot;The server is started in port:&quot; + port);</span><br><span class="line">            // 获取server接待的socket</span><br><span class="line">            Socket socket = null;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                socket = server.accept();</span><br><span class="line">                new Thread(new TimeServerHandler(socket)).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (server != null) &#123;</span><br><span class="line">                System.out.println(&quot;The time server close&quot;);</span><br><span class="line">                server.close();</span><br><span class="line">                server = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">package com.shengke.netty.bio;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author qinshengke</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @date 2016-06-02 22:03</span><br><span class="line"> */</span><br><span class="line">public class TimeServerHandler implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private Socket socket;</span><br><span class="line"></span><br><span class="line">    public TimeServerHandler(Socket socket) &#123;</span><br><span class="line">        this.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        BufferedReader in = null;</span><br><span class="line">        PrintWriter out = null;</span><br><span class="line">        // 获取socket 输入流</span><br><span class="line">        try &#123;</span><br><span class="line">            in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));</span><br><span class="line">            out = new PrintWriter(this.socket.getOutputStream(), true);</span><br><span class="line">            String currentTime = null;</span><br><span class="line">            String body = null;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                body = in.readLine();</span><br><span class="line">                if (body == null) break;</span><br><span class="line">                System.out.println(&quot;The time server receive order :&quot; + body);</span><br><span class="line">                currentTime = &quot;QUERY TIME ORDER&quot;.equalsIgnoreCase(body) ? new Date(System.currentTimeMillis()).toString() : &quot;BAD ORDER&quot;;</span><br><span class="line">                out.println(currentTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            if (in != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; catch (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (out != null) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = null;</span><br><span class="line">            &#125;</span><br><span class="line">            if (this.socket != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    this.socket.close();</span><br><span class="line">                &#125; catch (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                this.socket = null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.shengke.netty.bio;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author qinshengke</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @date 2019-06-02 22:19</span><br><span class="line"> */</span><br><span class="line">public class TimeClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        int port = 8080;</span><br><span class="line">        if (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">            port = Integer.valueOf(args[0]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Socket socket = null;</span><br><span class="line">        BufferedReader in = null;</span><br><span class="line">        PrintWriter out = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            socket = new Socket(&quot;127.0.0.1&quot;, port);</span><br><span class="line">            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">            out = new PrintWriter(socket.getOutputStream(), true);</span><br><span class="line">            out.println(&quot;QUERY TIME ORDER&quot;);</span><br><span class="line">            System.out.println(&quot;Send order 2 server succeed.&quot;);</span><br><span class="line">            String resp = in.readLine();</span><br><span class="line">            System.out.println(&quot;Now is :&quot; + resp);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (in != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; catch (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (out != null) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">                out = null;</span><br><span class="line">            &#125;</span><br><span class="line">            if (socket != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; catch (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                socket = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　BIO主要问题在于每当有一个新的客户端请求接入时，服务端都必须创建一个新的线程处理新接入的客户端链路，一个线程只能处理一个客户端连接。试想一下，当成千上万甚至百万的客户端请求接入时，对服务器来说无异于灾难来临。　　</p><h2 id="2-2-伪异步IO编程"><a href="#2-2-伪异步IO编程" class="headerlink" title="2.2  伪异步IO编程"></a>2.2  伪异步IO编程</h2><p>为了解决同步阻塞IO面临的一个链路需要一个线程处理的问题，后来有人对他的线程模型进行了优化–后端通过线程池来处理多个客户端的请求接入，形成客户端个数M:线程池最大线程数N的比例关系，其中M可以远远大于N。</p><h3 id="2-2-1伪异步IO模型"><a href="#2-2-1伪异步IO模型" class="headerlink" title="2.2.1伪异步IO模型"></a>2.2.1伪异步IO模型</h3><p>　　采用线程池或者任务队列实现一种伪异步的IO通信框架，它的模型如下图所示:<br><img src="/qsk/netty/netty_user_guide_2/%E4%BC%AA%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.jpg" alt><br>　　当有新的客户请求接入的时候，将客户端的socket封装为一个task投递到后端的线程池中进行处理,java线程池维护一个任务队列和N个活跃的线程，因此它消耗资源是可控的，不会造成资源的耗尽。由于伪异步通信模型底层实现依然使用BIO，无法从根本上解决同步阻塞IO的问题。</p><p>下面我们结合代码，了解一下伪异步通信模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.shengke.netty.bio.fake;</span><br><span class="line"></span><br><span class="line">import com.shengke.netty.bio.TimeServerHandler;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author qinshengke</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @date 2016-06-02 21:40</span><br><span class="line"> */</span><br><span class="line">public class TimeServer &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        int port = 8080;</span><br><span class="line">        if (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class="line">            port = Integer.valueOf(args[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        ServerSocket server = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            server = new ServerSocket(port);</span><br><span class="line">            System.out.println(&quot;The server is started in port:&quot; + port);</span><br><span class="line">            // 获取server接待的socket</span><br><span class="line">            Socket socket = null;</span><br><span class="line">            TimeServerHandlerExecutePool executePool = new TimeServerHandlerExecutePool(50, 10000);</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                socket = server.accept();</span><br><span class="line">                executePool.execute(new TimeServerHandler(socket));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (server != null) &#123;</span><br><span class="line">                System.out.println(&quot;The time server close&quot;);</span><br><span class="line">                server.close();</span><br><span class="line">                server = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.shengke.netty.bio.fake;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author qinshengke</span><br><span class="line"> * @description TODO</span><br><span class="line"> * @date 2016-06-02 22:03</span><br><span class="line"> */</span><br><span class="line">public class TimeServerHandlerExecutePool &#123;</span><br><span class="line"></span><br><span class="line">    private ExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    public TimeServerHandlerExecutePool(int maxPoolSize, int queueSize) &#123;</span><br><span class="line">        executorService = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(), maxPoolSize,</span><br><span class="line">                120L, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(queueSize));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void execute(Runnable task) &#123;</span><br><span class="line">        executorService.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码没有什么变化，使用2.1.2章节中的 TimeClient。</p><h3 id="2-2-3-伪异步通信模型的弊端"><a href="#2-2-3-伪异步通信模型的弊端" class="headerlink" title="2.2.3 伪异步通信模型的弊端"></a>2.2.3 伪异步通信模型的弊端</h3><p>首先我们看下InputStream的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public abstract class InputStream implements Closeable &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Reads some number of bytes from the input stream and stores them into</span><br><span class="line">     * the buffer array &lt;code&gt;b&lt;/code&gt;. The number of bytes actually read is</span><br><span class="line">     * returned as an integer.  This method blocks until input data is</span><br><span class="line">     * available, end of file is detected, or an exception is thrown.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt; If the length of &lt;code&gt;b&lt;/code&gt; is zero, then no bytes are read and</span><br><span class="line">     * &lt;code&gt;0&lt;/code&gt; is returned; otherwise, there is an attempt to read at</span><br><span class="line">     * least one byte. If no byte is available because the stream is at the</span><br><span class="line">     * end of the file, the value &lt;code&gt;-1&lt;/code&gt; is returned; otherwise, at</span><br><span class="line">     * least one byte is read and stored into &lt;code&gt;b&lt;/code&gt;.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt; The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the</span><br><span class="line">     * next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read is,</span><br><span class="line">     * at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let &lt;i&gt;k&lt;/i&gt; be the</span><br><span class="line">     * number of bytes actually read; these bytes will be stored in elements</span><br><span class="line">     * &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1]&lt;/code&gt;,</span><br><span class="line">     * leaving elements &lt;code&gt;b[&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; through</span><br><span class="line">     * &lt;code&gt;b[b.length-1]&lt;/code&gt; unaffected.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt; The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt;</span><br><span class="line">     * has the same effect as: &lt;pre&gt;&lt;code&gt; read(b, 0, b.length) &lt;/code&gt;&lt;/pre&gt;</span><br><span class="line">     *</span><br><span class="line">     * @param      b   the buffer into which the data is read.</span><br><span class="line">     * @return     the total number of bytes read into the buffer, or</span><br><span class="line">     *             &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of</span><br><span class="line">     *             the stream has been reached.</span><br><span class="line">     * @exception  IOException  If the first byte cannot be read for any reason</span><br><span class="line">     * other than the end of the file, if the input stream has been closed, or</span><br><span class="line">     * if some other I/O error occurs.</span><br><span class="line">     * @exception  NullPointerException  if &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</span><br><span class="line">     * @see        java.io.InputStream#read(byte[], int, int)</span><br><span class="line">     */</span><br><span class="line">    public int read(byte b[]) throws IOException &#123;</span><br><span class="line">        return read(b, 0, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>InputStream的API中有一段是这样描述<br><strong><em>This method blocks until input data is available, end of file is detected, or an exception is thrown</em></strong><br>当对socket的输入流进行读取的时候，它会一直阻塞下去，知道发生以下三件事：</p><ul><li>有数据可读</li><li>可用数据已经读取完毕</li><li>发生空指针或者IO异常</li></ul><p>这意味着当对方发送请求或者响应比较慢，或者网络延迟，读取输入流的一方的通信线程将会一直阻塞，在此期间，其他接入消息只能在任务队列中排队等待</p><p>下面我们对输出流OutputStream进行分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public abstract class OutputStream implements Closeable, Flushable &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Writes &lt;code&gt;b.length&lt;/code&gt; bytes from the specified byte array</span><br><span class="line">     * to this output stream. The general contract for &lt;code&gt;write(b)&lt;/code&gt;</span><br><span class="line">     * is that it should have exactly the same effect as the call</span><br><span class="line">     * &lt;code&gt;write(b, 0, b.length)&lt;/code&gt;.</span><br><span class="line">     *</span><br><span class="line">     * @param      b   the data.</span><br><span class="line">     * @exception  IOException  if an I/O error occurs.</span><br><span class="line">     * @see        java.io.OutputStream#write(byte[], int, int)</span><br><span class="line">     */</span><br><span class="line">    public void write(byte b[]) throws IOException &#123;</span><br><span class="line">        write(b, 0, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用OutputStream的write方法写入输出流的时候，它将被阻塞，知道所有要发送的数据发送完毕，或发生异常。当数据的接收方数据处理能力低下时，将不能及时的从TCP缓冲区读取数据，这将会导致数据发送方的TCP windows size不断变小，直到为0，双方处于Keep-Alive状态，数据发送方将不能再向TCP缓冲区写入数据，这是如果采用同步阻塞IO，write操作将会被无限期阻塞，知道TCP windows size大于 0 或者发生异常为止。</p><p>下面我们就简单分析下通信对方返回应答时间过长引起的级联故障：<br>（1） 服务端处理缓慢，宴会应答消息消耗60s，平均只需要10ms<br>（2）采用伪异步IO的线程正在读取故障服务节点的响应，由于读取输入流是阻塞的，它将会被同步阻塞60s<br>（3）假设所有线程被阻塞在故障服务器，name后续所有的IO消息都将在任务队列中排队<br>（4）由于线程池采用阻塞队列实现，当队列积压满之后，后续如队列操作将被阻塞，进而acceptor将会拒绝接收客户端请求，导致大量的连接超时。</p><h2 id="2-3-NIO编程"><a href="#2-3-NIO编程" class="headerlink" title="2.3 NIO编程"></a>2.3 NIO编程</h2><p>在开始NIO之前我们首先需要弄明白NIO的概念，什么才是NIO？由于NIO的目标是使Java支持非阻塞IO，所以很多人喜欢称NIO为非阻塞IO（Non-block IO）</p><p>与Socket类和ServerSocket类相对应，NIO也童工了SocketChannel和ServerSocketChannel两种不同的套接字通道实现。这两种新增加的通道都支持阻塞和非阻塞两种模式。阻塞模式使用非常简单但是性能和可靠性不好，非阻塞模式正好相反。</p><h3 id="2-3-1-NIO类库简介"><a href="#2-3-1-NIO类库简介" class="headerlink" title="2.3.1  NIO类库简介"></a>2.3.1  NIO类库简介</h3><p>NIO弥补了原来同步阻塞IO的不足，它在标准Java代码中提供了高速的、面向块的IO。通过定义包含数据的类，以及通过以块的形式处理这些数据，NIO不用使用本机代码就可以利用低级优化，这是原来IO锁无法做到的。下面我们对NIO的一些概念和功能坐下简单介绍，以便大家能够快速地了解NIO类库和相关概念。</p><h4 id="（1）缓冲区Buffer"><a href="#（1）缓冲区Buffer" class="headerlink" title="（1）缓冲区Buffer"></a>（1）缓冲区Buffer</h4><p>Buffer是一个对象，它包含一些要写入或者要读出的数据。在NIO类库中加入Buffer对象，踢向了新库与原IO的一个重要区别。在面向流的IO中，可以将数据直接写入或者将数据直接读到Stream对象中。</p><p>在NIO库中所有数据都是用缓冲区吃力的。在读取数据时，他是直接读到缓冲区中的，在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。</p><p>缓冲区实质上一个数组。通常它是一个字节数组（ByteBuffer），也可以使用其他种类的数组。但是一个缓冲区不仅仅是一个数组，缓冲区提供了对数据的结构化访问以及维护读写位置等信息。</p><p>最常用的缓冲区是ByteBuffer，一个ByteBuffer提供了一组功能用于操作byte数组。除了ByteBuffer，还有其他的一些缓冲区（每种Java基本类型都有对应的缓冲区 boolean除外）</p><ul><li>ByteBuffer 字节缓冲区</li><li>CharBuffer 字符缓冲区</li><li>ShortBuffer  短整型缓冲区</li><li>IntBuffer  整形缓冲区</li><li>LongBuffer 长整型缓冲区</li><li>FloatBuffer  浮点型缓冲区</li><li>DoubleBuffer 双精度浮点型缓冲区</li></ul><h4 id="（2）通道-Channel"><a href="#（2）通道-Channel" class="headerlink" title="（2）通道 Channel"></a>（2）通道 Channel</h4><p>Channel是一个通道，他就像自来水管一样，网络数据通过Channel读取和写入。通道与流的不同之处在于通道是双向的，流只是在一个方向上移动，而通道可以用于读、写或者两者同时进行。<br>因为Channel是全双工的，所以他可以比流更好的映射底层操作系统的API。</p><p>Channel的类图继承关系如下图所示：<br><img src="/qsk/netty/netty_user_guide_2/Channel.jpg" alt="NIO channel接口继承图"></p><p>自顶向下看，前三层主要是channel接口，用于定义它的功能，后面是一些具体功能类（抽象类）。从类图可以看出，实际上Channel可以分为两大类：用于网络读写的SelectableChannel和用于文件操作的FileChannel</p><p>本文设计到的SocketChannel、ServerSocketChannel都是SelectableChannel的子类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">ReadableByteChannel (java.nio.channels)</span><br><span class="line">    ReadableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    ScatteringByteChannel (java.nio.channels)</span><br><span class="line">    ByteChannel (java.nio.channels)</span><br><span class="line">        SeekableByteChannel (java.nio.channels)</span><br><span class="line">        SocketChannel (java.nio.channels)</span><br><span class="line">        DatagramChannel (java.nio.channels)</span><br><span class="line">    SourceChannel in Pipe (java.nio.channels)</span><br><span class="line">InterruptibleChannel (java.nio.channels)</span><br><span class="line">    AbstractInterruptibleChannel (java.nio.channels.spi)</span><br><span class="line">        ReadableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">        SelectableChannel (java.nio.channels)</span><br><span class="line">        WritableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">        FileChannel (java.nio.channels)</span><br><span class="line">SelectableChannel (java.nio.channels)</span><br><span class="line">    AbstractSelectableChannel (java.nio.channels.spi)</span><br><span class="line">        SocketChannel (java.nio.channels)</span><br><span class="line">        SinkChannel in Pipe (java.nio.channels)</span><br><span class="line">        DatagramChannel (java.nio.channels)</span><br><span class="line">        SourceChannel in Pipe (java.nio.channels)</span><br><span class="line">        ServerSocketChannel (java.nio.channels)</span><br><span class="line">NetworkChannel (java.nio.channels)</span><br><span class="line">    AsynchronousServerSocketChannel (java.nio.channels)</span><br><span class="line">    SocketChannel (java.nio.channels)</span><br><span class="line">    MulticastChannel (java.nio.channels)</span><br><span class="line">    ServerSocketChannel (java.nio.channels)</span><br><span class="line">    AsynchronousSocketChannel (java.nio.channels)</span><br><span class="line">WritableByteChannel (java.nio.channels)</span><br><span class="line">    SinkChannel in Pipe (java.nio.channels)</span><br><span class="line">    WritableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    ByteChannel (java.nio.channels)</span><br><span class="line">    GatheringByteChannel (java.nio.channels)</span><br><span class="line">AbstractInterruptibleChannel (java.nio.channels.spi)</span><br><span class="line">    ReadableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    SelectableChannel (java.nio.channels)</span><br><span class="line">    WritableByteChannelImpl in Channels (java.nio.channels)</span><br><span class="line">    FileChannel (java.nio.channels)</span><br><span class="line">AsynchronousChannel (java.nio.channels)</span><br><span class="line">    AsynchronousServerSocketChannel (java.nio.channels)</span><br><span class="line">    AsynchronousFileChannel (java.nio.channels)</span><br><span class="line">    AsynchronousByteChannel (java.nio.channels)</span><br></pre></td></tr></table></figure><h4 id="（3）多路复用器Selector"><a href="#（3）多路复用器Selector" class="headerlink" title="（3）多路复用器Selector"></a>（3）多路复用器Selector</h4><p>我们探索下多路复用器Selector，它是Java NIO编程的基础，熟练地掌握Selector对NIO编程至关重要。多路复用器提供选择已经就绪的任务的能力。简单来说Selector会不断的轮询注册在其上的Channel，如果某个Chennel上面发生读或者写事件，这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的IO操作。<br>一个多路复用器Selector可以轮询多个Channel，由于JKD使用epoll代替传统的select，所以它并没有最大句柄 1024/2048的限制。也就是一个Selector就可以负责成千上万的客户端。</p><h3 id="2-3-2-NIO服务端通信序列图分析"><a href="#2-3-2-NIO服务端通信序列图分析" class="headerlink" title="2.3.2 NIO服务端通信序列图分析"></a>2.3.2 NIO服务端通信序列图分析</h3><p><img src="/qsk/netty/netty_user_guide_2/NIO%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%80%9A%E4%BF%A1%E5%BA%8F%E5%88%97%E5%9B%BE.png" alt="NIO服务端通信序列图"></p><p>下面，我们对NIO服务端的主要创建过程进行讲解和说明，作为NI的基础入门，这里忽略掉一些在生产环境部署所需的特性和功能。<br>步骤一： <strong>打开ServerSocketChannel</strong>，用于监听客户端的连接，它是所有客户端连接的父管道，伪代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerSocketChannel acceptor = ServerSocketChannel.open();</span><br></pre></td></tr></table></figure><p>步骤二： 绑定监听端口，设置连接为非阻塞模式，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acceptor.socket().bind(new InetSocketAddress(InetAddress.getByName(&quot;IP&quot;), port));</span><br><span class="line">acceptor.configureBlooking(false);</span><br></pre></td></tr></table></figure><p>步骤三： 创建Reactor线程，创建多路复用器并启动线程，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Selector selector = Selector.open();</span><br><span class="line">new Thread(new ReactorTask()).start();</span><br></pre></td></tr></table></figure><p>步骤四： 将ServerSocketChannel 注册到Reactor线程的多路复用器Selector上，监听ACCEPT事件，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = acceptor.register(selector, SelectionKey.OP_ACCEPT, ioHandler);</span><br></pre></td></tr></table></figure><p>步骤五： 多路复用器在线程run方法的无限循环体内轮询准备就绪的Key，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int num = selector.select();</span><br><span class="line">Set selectedKeys = selector.selectedKeys();</span><br><span class="line">Iterator it = selectedKeys.iterator();</span><br><span class="line">while (it.hasNext()) &#123;</span><br><span class="line">    SelectionKey key = (SelectionKey) it.next();</span><br><span class="line">    // do with IO event</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤六： 多路复用器监听到有新的客接入，处理新的接入请求，完成TCP三次握手，建立物理链路，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SocketChannel channel = acceptor.accept();</span><br></pre></td></tr></table></figure><p>步骤七： 设置客户端链路为非阻塞模式，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(false);</span><br><span class="line">channel.socket().setReuseAddress(true);</span><br></pre></td></tr></table></figure><p>步骤八： 将新接入的客户端连接注册到Reactor线程的多路复用器上，监听读操作，读取客户端发送的网络消息，伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SelectionKey key = socketChannel.register(selector, SelectionKey.OP_READ, ioOHandler);</span><br></pre></td></tr></table></figure><p>步骤九： 异步读取客户端请求消息到缓冲区，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int radNumber = channel.read(receivedBuffer);</span><br></pre></td></tr></table></figure><p>步骤十： 对ByteBuffer进行编解码，如果有半包消息指针reset，继续读取后续的报文，将解码成功的消息封装成Task，投递到业务线程池中，进行业务逻辑的编排，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Object message = null;</span><br><span class="line">while(buffer.hasRemain()) &#123;</span><br><span class="line">    byteBuffer.mark();</span><br><span class="line">    message = decode(byteBuffer);</span><br><span class="line">    if (message == null) &#123;</span><br><span class="line">        byteBuffer.reset();</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    messageList.add(message);</span><br><span class="line">&#125;</span><br><span class="line">if (!byteBuffer.hasRemain())</span><br><span class="line">    byteBuffer.clear()</span><br><span class="line">else</span><br><span class="line">    byteBuffer.compact();</span><br><span class="line">if (messageList !=null &amp;&amp; messageList.size()&gt;0) &#123;</span><br><span class="line">    for(Object msg : messageList) &#123;</span><br><span class="line">        handlerTask(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤十一： 将POJO对象encode成Buffer，调用SocketChannel 的异步write接口，将消息异步发送给客户端，伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socketChannel.write(buffer);</span><br></pre></td></tr></table></figure><p>注意： 如果发送去TCP 缓冲区满，会导致写半包，此时，需要注册到监听写操作位，循环写，直到整包消息写入到TCP缓冲区，对于这些内容此处暂不赘述。</p><h3 id="2-3-3-NIO创建的TimeServer源码分析"><a href="#2-3-3-NIO创建的TimeServer源码分析" class="headerlink" title="2.3.3 NIO创建的TimeServer源码分析"></a>2.3.3 NIO创建的TimeServer源码分析</h3><p>我们将在TimeServer例程中给出完整的NIO创建的时间服务器源码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章-NIO-入门&quot;&gt;&lt;a href=&quot;#第二章-NIO-入门&quot; class=&quot;headerlink&quot; title=&quot;第二章 NIO 入门&quot;&gt;&lt;/a&gt;第二章 NIO 入门&lt;/h1&gt;&lt;p&gt;在本章中，我们会分别对JDK的BIO、NIO、NIO2.0的使用进行详细说明
      
    
    </summary>
    
      <category term="netty" scheme="http://www.throne4j.com/categories/netty/"/>
    
    
      <category term="netty" scheme="http://www.throne4j.com/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>spring-core包阅读记录</title>
    <link href="http://www.throne4j.com/qsk/spring/undefined.html"/>
    <id>http://www.throne4j.com/qsk/spring/undefined.html</id>
    <published>2019-06-02T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:01.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-core-学习记录"><a href="#spring-core-学习记录" class="headerlink" title="spring-core 学习记录"></a>spring-core 学习记录</h1><h2 id="org-springframework-util类作用记录"><a href="#org-springframework-util类作用记录" class="headerlink" title="org.springframework.util类作用记录"></a>org.springframework.util类作用记录</h2><ul><li>AutoPopulatingList  <blockquote><p>对list的一个简单包装</p></blockquote></li><li>DigestUtils <blockquote><p>计算摘要的各种方法工具</p></blockquote></li><li>Base64Utils  <blockquote><p>一个用于Base64编码和解码的简单实用程序类</p></blockquote></li><li>ErrorHandler(函数接口)  <blockquote><p>处理异常的策略接口</p></blockquote></li><li>InstanceFilter <blockquote><p>一个简单的实例过滤器，它根据包含和排除元素的集合检查给定的实例是否匹配。</p></blockquote></li><li>ClassUtils</li><li>ReflectionUtils</li><li>CollectionUtils</li><li>ConcurrentReferenceHashMap</li><li>CustomizableThreadCreator  <blockquote><p>用于创建新的{@link Thread}实例的简单可自定义助手类。提供各种bean属性:线程名称前缀、线程优先级等。</p></blockquote></li><li>PropertiesPersister  <blockquote><p>用于持久化{@code java.util的策略接口。属性}，允许可插入的解析策略。 实现有 DefaultPropertiesPersister</p></blockquote></li><li>FastByteArrayOutputStream</li><li>FileCopyUtils <blockquote><p>用于文件和流复制的简单实用程序方法</p></blockquote></li><li>FileSystemUtils  <blockquote><p>处理文件系统的实用方法。</p></blockquote></li><li>InstanceFilter  <blockquote><p>一个简单的实例过滤器，它根据包含和排除元素的集合检查给定的实例是否匹配。ExceptionTypeFilter</p></blockquote></li><li>LinkedCaseInsensitiveMap</li><li>LinkedMultiValueMap</li><li>PatternMatchUtils  <blockquote><p>用于简单模式匹配的实用方法，特别是对于Spring的典型“xxx<em>”、“</em>xxx”和“<em>xxx</em>”模式样式。</p></blockquote></li><li>PropertyPlaceholderHelper <blockquote><p>用于处理具有占位符值的字符串的实用程序类</p></blockquote></li><li>SystemPropertyUtils <blockquote><p>用于解析文本中的占位符的Helper类。通常应用于文件路径。</p></blockquote></li><li>MethodInvoker <blockquote><p>Helper类，它允许指定以声明方式调用的方法，无论是静态的还是非静态的。</p></blockquote></li><li>NumberUtils</li><li>ObjectUtils </li><li>ResourceUtils <blockquote><p>可处理jar包内的路径资源</p></blockquote></li><li>SerializationUtils</li><li>SocketUtils <blockquote><p>处理网络套接字的简单实用方法，例如：用于查找{@code localhost}上的可用端口。</p></blockquote></li><li>StreamUtils <blockquote><p>处理流的实用程序</p></blockquote></li><li>StringUtils <blockquote><p>字符串的实用方法</p></blockquote></li><li>StringValueResolver(函数接口) <blockquote><p>用于解析字符串值的简单策略接口。</p></blockquote></li><li>TypeUtils <blockquote><p>用于处理Java 5泛型类型参数的实用程序。</p></blockquote><h2 id="org-springframework-util-concurrent-并发包类说明"><a href="#org-springframework-util-concurrent-并发包类说明" class="headerlink" title="org.springframework.util.concurrent 并发包类说明"></a>org.springframework.util.concurrent 并发包类说明</h2></li><li>ListenableFuture (接口)<blockquote><p>扩展{@link Future}，使其能够接受完成回调。如果在添加回调时未来已完成，则立即触发回调。</p></blockquote></li><li>CompletableToListenableFutureAdapter  <blockquote><p>将{@link CompletableFuture}或{@link CompletionStage}调整为Spring {@link ListenableFuture}。</p></blockquote></li><li>DelegatingCompletableFuture <blockquote><p>扩展的{@link CompletableFuture}，允许取消委托 连同{@link CompletableFuture}本身。</p></blockquote></li><li>FailureCallback (函数接口) <blockquote><p>Failure callback for a {@link ListenableFuture}.</p></blockquote></li><li>SuccessCallback(函数接口) <blockquote><p>Success callback for a {@link ListenableFuture}.</p></blockquote></li><li>FutureAdapter <blockquote><p>一个抽象类，它将在S上参数化的{@link Future}调整为在T上参数化的{@code Future}。所有方法都委托给适配器，其中{@link #get()}和{@link #get(long, TimeUnit)}对适配器的结果调用{@link #adapt(Object)}。</p></blockquote></li><li>ListenableFutureAdapter<blockquote><p>extends FutureAdapter implements ListenableFuture</p></blockquote></li><li>ListenableFutureCallback (接口)<blockquote><p>结果(成功或失败)的回调机制，来自{@link ListenableFuture}。<br>  extends SuccessCallback， FailureCallback</p></blockquote></li><li>ListenableFutureCallbackRegistry <blockquote><p>用于维护成功和失败回调并帮助通知它们的{@link ListenableFuture}实现的Helper类。</p></blockquote></li><li>ListenableFutureTask <blockquote><p>实现{@link ListenableFuture}的{@link FutureTask}的扩展。<br>  ListenableFutureTask extends FutureTask<t> implements ListenableFuture<br>  其实现类有 SettableTask</t></p></blockquote></li></ul><h2 id="org-springframework-core-task-任务执行"><a href="#org-springframework-core-task-任务执行" class="headerlink" title="org.springframework.core.task 任务执行"></a>org.springframework.core.task 任务执行</h2><ul><li><p>TaskExecutor</p><blockquote><p>简单的任务执行器接口，抽象了{@link Runnable}的执行。</p><ul><li>继承自java.util.concurrent.Executor<br>执行已提交的{@link Runnable}任务的对象。<br>  在java中Executor的实现类 均实现了{@link ExecutorService}这个更加广泛的接口，具体实现类可由Executors类生产。</li></ul></blockquote></li><li><p>AsyncTaskExecutor</p><blockquote><p>继承自TaskExecutor，实现了异步扩展功能。</p></blockquote></li><li><p>SimpleAsyncTaskExecutor</p><blockquote><p>为每个任务触发一个新线程的实现，异步地执行。</p></blockquote></li><li><p>SyncTaskExecutor</p></li><li><p>TaskDecorator(函数接口)</p><blockquote><p>一个回调接口，用于将装饰器应用于将要执行的任何{@link Runnable}。</p></blockquote></li><li><p>ExecutorServiceAdapter</p><blockquote><p>适配器，它接受一个Spring {@link org.springframework.core.TaskExecutor}, 并公开一个完整的{@code java.util.concurrent。ExecutorService}</p></blockquote></li><li><p>TaskExecutorAdapter</p><blockquote><p>适配器，它接受JDK {@code java.util.concurrent。并公开一个Spring {@link org.springframework.core.task。TaskExecutor}。</p></blockquote><h2 id="org-springframework-core-包类解析"><a href="#org-springframework-core-包类解析" class="headerlink" title="org.springframework.core 包类解析"></a>org.springframework.core 包类解析</h2></li><li><p>AliasRegistry </p><blockquote><p>用于管理别名的通用接口。作为超级接口</p><ul><li>SimpleAliasRegistry</li><li>BeanDefinitionRegistry</li></ul></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring-core-学习记录&quot;&gt;&lt;a href=&quot;#spring-core-学习记录&quot; class=&quot;headerlink&quot; title=&quot;spring-core 学习记录&quot;&gt;&lt;/a&gt;spring-core 学习记录&lt;/h1&gt;&lt;h2 id=&quot;org-sprin
      
    
    </summary>
    
      <category term="spring" scheme="http://www.throne4j.com/categories/spring/"/>
    
    
      <category term="spring-core" scheme="http://www.throne4j.com/tags/spring-core/"/>
    
  </entry>
  
  <entry>
    <title>netty权威指南学习（一）</title>
    <link href="http://www.throne4j.com/qsk/netty/netty_user_guide_1.html"/>
    <id>http://www.throne4j.com/qsk/netty/netty_user_guide_1.html</id>
    <published>2019-06-01T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:30.165Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先感谢作者李林锋给我们提供出这本关于异步非阻塞通信领域的经典之作，本书基于Netty 5.0编写。Netty如今已经在如下几个领域得到了大规模的商业应用:</p><ul><li>互联网领域</li><li>电信领域</li><li>大数据领域</li><li>银行、证券等金融领域</li><li>游戏行业</li><li>电力等企业市场</li></ul></blockquote><blockquote><p>看到Netty如火如荼的发展，有心能够深入学习，希望通过此书，站在前辈的肩膀上走出属于自己的路，猿类崛起！</p></blockquote><h1 id="netty-基础篇"><a href="#netty-基础篇" class="headerlink" title="netty 基础篇"></a>netty 基础篇</h1><pre><code>**走进Java  NIO**</code></pre><h2 id="第一章-java的I-O演进之路"><a href="#第一章-java的I-O演进之路" class="headerlink" title="第一章.java的I/O演进之路"></a><code>第一章.java的I/O演进之路</code></h2><p>在开始学习Netty之前，我们首先对UNIX系统常用的I/O模型进行介绍，然后对Java的I/O历史演进进行简单的说明。</p><h3 id="1-1-I-O基础入门"><a href="#1-1-I-O基础入门" class="headerlink" title="1.1  I/O基础入门"></a>1.1  I/O基础入门</h3><p>传统的BIO 在高性能领域一直被业界所诟病，主要有如下问题：</p><ul><li>没有数据缓冲区，I/O性能存在问题</li><li>没有C 或 C++中的Channel概念，只有输入和输出流</li><li>同步阻塞IO通常会导致通信或线程被长时间阻塞</li><li>支持的字符集有限，硬件可移植性不好</li></ul><h4 id="1-1-1-Linux-网络I-O模型简介"><a href="#1-1-1-Linux-网络I-O模型简介" class="headerlink" title="1.1.1  Linux 网络I/O模型简介"></a>1.1.1  Linux 网络I/O模型简介</h4><p>（1） 阻塞I/O 模型</p><p>　　最常用的I/O模型就是阻塞I/O模型，缺省情况下，所有的文件操作都是I/O阻塞的。在系统的进程空间中调用recvfrom，当访问文件系统的时候，其系统调用直到文件到达且被复制到系统的缓冲区或者发生错误异常的时候才会返回，在此期间，系统会一直等待，进程从开始到结束一直处于阻塞状态，因此被称为阻塞I/O模型。</p><p>（2） 非阻塞I/O 模型</p><p>　　recvfrom从应用层到内核，如果该缓冲区中没有数据的话，则直接返回一个EWOULDBLOCK错误，一般对非阻塞I/O模型进行轮询检查这个状态，看内核是否有数据到来.</p><p>（3） I/O复用模型</p><p>　　Linux 提供select/poll，进程通过一个或多个fd传递给select或者poll系统调用，阻塞在select操作上，这样select/poll可以帮助我们侦测多个fd是否处于就绪状态。select/poll 系统是瞬息扫描fd是否就绪，而且支持的fd数量有限，因此它的使用受到了一些限制。Linux系统还提供了一个epoll系统，它采用事件驱动方式来代替顺序扫描，因此性能更高，当fd就绪的时候，立即回调rollback函数</p><p>（4） 信号I/O复用模型</p><p>　　首先开启套接口信号驱动I/O功能,并通过系统调用sigaction执行一个信号处理函数(此操作是非阻塞的),当数据准备就绪的时候,就为该进程生成一个sigio信号，通过信号回调通知应用程序调用recvform来读取数据，并通知主循环函数处理数据。</p><p>（5） 异步IO</p><p>　　告知内核启动某个操作，并让内核在整个操作完成是通知我们。这种模型和信号I/O模型的区别是：信号I/O模型是告知我们和是可以开始I/O操作，异步I/O告知我们I/O操作何时已经完成。<br><img src="/qsk/netty/netty_user_guide_1/15590935389763.jpg" alt><br><img src="/qsk/netty/netty_user_guide_1/15590937479358.jpg" alt></p><h4 id="1-1-2-I-O-多路复用技术"><a href="#1-1-2-I-O-多路复用技术" class="headerlink" title="1.1.2   I/O 多路复用技术"></a>1.1.2   I/O 多路复用技术</h4><p>在IO编程过程中，当需要同事处理多个客户端接入请求时，可以利用多线程或者IO多路复用技术进行处理。IO多路复用技术通过把多个IO的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。与传统的多线程/多进程模型相比，IO多路复用的最大优势是系统开销小，IO多路复用技术的主要应用场景如下：</p><ul><li>服务器需要同时处理多个处于监听状态或多个连接状态的套接字；</li><li>服务器需要同时处理多种网络协议的套接字。</li></ul><p>目前支持IO多路复用的系统调用有select、pselect、poll、epoll，在linux网络编程过程中，很长时间都在使用select做<strong><em>轮询和网络事件通知</em></strong>，然而select的固有缺陷迫使Linux寻找替代方案，最终Linux选择了epoll，epoll与select的原理类似，单做了很大改进，总结如下：</p><p>（1） 支持一个进程打开的socket描述符（FD）不受限制（金受限于操作系统的最大文件句柄数）</p><pre><code>select的最大缺陷就是单个进程打开的FD是有一定限制的，它由FD_SETSIZE设置，默认值是1024。我们可以通过修改这个宏修改并重新编译内核，但这样也给操作系统造成性能的损耗，另外进程间的数据交换非常麻烦，由于java没有共享内存，需要通过Socket通信或者其他方式进行数据同步，这样带来了额外的性能损耗，增加了程序的复杂度，也不是一种很好的解决方案。epoll并没有这个最大文件句柄数的限制，epoll的处理能力和内存的关系比较大，内存越大，epoll的处理能力越强。</code></pre><p>（2） IO效率不会随着FD数目的增加而线性下降</p><pre><code>epoll只会对活跃的socket进行操作，这是因为在内核实现中epoll是根据每个fd上面的额callback函数实现的。</code></pre><p>（3） 使用mmap加速内核与用户控件的消息传递</p><pre><code>无论是select、poll还是epoll都需要内核把FD消息通知给用户空间，如何避免不必要的内存复制就显得非常重要，epoll是通过内核和用户空间mmap同一块内存实现的</code></pre><p>（4） epoll的API更加简单</p><h3 id="1-2-Java的IO演进"><a href="#1-2-Java的IO演进" class="headerlink" title="1.2 Java的IO演进"></a>1.2 Java的IO演进</h3><p>在JDK 1.4 推出Java  NIO 之前，java的所有socket通信都采用了同步阻塞模式（BIO），这种已请求一应答的通信模型简化了上层的应用开发，但是在性能可可靠性方面却存在这巨大的瓶颈。Java 1.4 NIO以 JSR-51 的身份正式随JDK 发布，它新增了java.nio包，同乐很多进行异步IO开发的API和类库，主要的类和接口如下：</p><ul><li>进行异步IO操作的缓冲区 <em>ByteBuffer</em> 等</li><li>进行异步IO操作的管道Pipe</li><li>进行各种IO操作（异步或同步）的<em>Channel</em>，包括<em>ServerSocketChannel</em>和<em>SocketChannel</em></li><li>多种字符集的编码和解码能力</li><li>实现非阻塞IO操作的多路复用器<em>Selector</em></li><li>基于流行的Perl实现的额正则表达式类库</li><li>文件通道<em>FileChannel</em></li></ul><p>新的NIO类库促进了Java 异步非阻塞编程的发展和应用，但是他还有不完善的地方，特别是对文件系统的处理能力不足，主要问题如下</p><ul><li>没有同意的文件属性（例如读写权限）</li><li>API能力较弱，例如目录的级联创建和递归遍历，往往需要自己实现</li><li>所有的文件操作都是同步阻塞调用，不支持异步文件读写操作</li><li>底层存储系统的一些高级API无法使用</li></ul><p>2017年7月28日JDK1.7发布，将原来的NIO类库进行了升级，被称为NIO2.0，NIO2.0由JSR-203演进而来，它主要提供了如下三个方面的改进：</p><ul><li>提供能够批量获取文件属性的API，这些API具有平台无关性，不与特性的文件系统耦合，另外它还提供了标准文件系统的SPI，供各个服务提供商扩展实现</li><li>提供AIO功能，支持基于文件的异步IO操作和针对网络套接字的异步操作</li><li>完成JSR-51 定义的通道功能，包括对配置和多波数据报的支持</li></ul><h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h3><p>通过此章了解了UNIX 的网络编程的5种IO模型，学习IO多路复用的基础知识。对java IO 的演进有了一些直观认识，下章对阻塞IO和非阻塞IO进行详细讲解。</p><p>下回分解：<a href="/qsk/netty/netty_user_guide_2.html">netty权威指南学习（二）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先感谢作者李林锋给我们提供出这本关于异步非阻塞通信领域的经典之作，本书基于Netty 5.0编写。Netty如今已经在如下几个领域得到了大规模的商业应用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互联网领域&lt;/li&gt;
&lt;li&gt;电信领域&lt;/li&gt;
&lt;li&gt;大数据
      
    
    </summary>
    
      <category term="netty" scheme="http://www.throne4j.com/categories/netty/"/>
    
    
      <category term="netty" scheme="http://www.throne4j.com/tags/netty/"/>
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="http://www.throne4j.com/qsk/design-pattern/bridge-pattern.html"/>
    <id>http://www.throne4j.com/qsk/design-pattern/bridge-pattern.html</id>
    <published>2018-07-01T13:38:43.000Z</published>
    <updated>2019-09-13T19:16:30.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="桥接模式的定义"><a href="#桥接模式的定义" class="headerlink" title="桥接模式的定义"></a>桥接模式的定义</h2><p>桥接模式（Bridge Pattern），将抽象部分与它的实现部分分离，使它们都可以独立地变化。这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>桥接模式包含如下角色：</p><p>Abstraction：抽象类 （Shape）<br>RefinedAbstraction：扩充抽象类(Circle)<br>Implementor：实现类接口 (DrawAPI)<br>ConcreteImplementor：具体实现类 (RedCircle、GreenCircle)</p><h3 id="uml图解"><a href="#uml图解" class="headerlink" title="uml图解"></a>uml图解</h3><p><img src="/qsk/design-pattern/bridge-pattern/bridge_pattern_uml_diagram.jpg" alt="桥接模式"></p><h2 id="桥接模式使用场景"><a href="#桥接模式使用场景" class="headerlink" title="桥接模式使用场景"></a>桥接模式使用场景</h2><ul><li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，<br>避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li><li>抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合。</li><li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li><li>虽然在系统中使用继承是没有问题的，但是由于抽象化角色和具体化角色需要独立变化，设计要求需要独立管理这两者。<br>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: red, radius: "</span> + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCircle</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Drawing Circle[ color: green, radius: "</span></span><br><span class="line">         + radius +<span class="string">", x: "</span> +x+<span class="string">", "</span>+ y +<span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 DrawAPI 接口创建抽象类 Shape。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> x, y, radius;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> radius, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(drawAPI);</span><br><span class="line">      <span class="keyword">this</span>.x = x;  </span><br><span class="line">      <span class="keyword">this</span>.y = y;  </span><br><span class="line">      <span class="keyword">this</span>.radius = radius;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      drawAPI.drawCircle(radius,x,y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> RedCircle());</span><br><span class="line">      Shape greenCircle = <span class="keyword">new</span> Circle(<span class="number">100</span>,<span class="number">100</span>, <span class="number">10</span>, <span class="keyword">new</span> GreenCircle());</span><br><span class="line"> </span><br><span class="line">      redCircle.draw();</span><br><span class="line">      greenCircle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h1&gt;&lt;h2 id=&quot;桥接模式的定义&quot;&gt;&lt;a href=&quot;#桥接模式的定义&quot; class=&quot;headerlink&quot; title=&quot;桥接模
      
    
    </summary>
    
      <category term="design-pattern" scheme="http://www.throne4j.com/categories/design-pattern/"/>
    
    
      <category term="结构型模式" scheme="http://www.throne4j.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>collection集合记录</title>
    <link href="http://www.throne4j.com/qsk/java/collection_record.html"/>
    <id>http://www.throne4j.com/qsk/java/collection_record.html</id>
    <published>2016-07-03T06:20:14.000Z</published>
    <updated>2019-09-16T12:22:40.750Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><a href="/qsk/java/collection_record.html">Collection集合</a></p></li><li><p><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</p></li><li><p><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值，</p></li><li><p><a href="/qsk/java/set.html">Queue队列</a></p></li></ul><h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h1><p>集合表示了一组对象，而Collection是集合层次结构的根接口。一些集合可以存在重复的元素，而有些则不允许，一些是有序的，而又有一些是无序的。jdk并没有提供此接口的直接实现，并且又通过具体的子接口分别来定义不同的实现，例如List、Set接口来定义集合的实现。</p><h2 id="collection快速预览"><a href="#collection快速预览" class="headerlink" title="collection快速预览"></a>collection快速预览</h2><p>我们看下Collection的UML<br><img src="/qsk/java/collection_record/Collection.png" alt="Collection"></p><p>我们在看下Collection所定义的集合的基本行为</p><ul><li>size()  返回此集合中的元素数量。</li><li>contains(Object o) 是否包含o元素</li><li>toArray() 返回的数组将是“安全的”，因为这个集合不维护对它的引用。</li><li><strong>add(E e)</strong> 确保此集合包含指定的元素。</li><li>remove(Object o) 移除元素o</li><li>clear() 清空所有元素</li><li>isEmpty() 是否为空</li><li>iterator() 迭代器</li><li>containsAll(Collection&lt;?&gt; c)</li><li>addAll(Collection&lt;? extends E&gt; c)</li><li>removeAll(Collection&lt;?&gt; c)</li><li>removeIf(Predicate&lt;? super E&gt; filter) 符合条件则删除</li><li>retainAll(Collection&lt;?&gt; c) 仅保留此集合中包含在指定集合中的元素(可选操作)。</li><li>stream()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//省略其它方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliterator(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a><a href="/qsk/java/list.html">List集合</a> 继承Collection接口，<strong><em>集合有序、允许重复值、可插入null</em></strong>。</h3><h3 id="-1"><a href="#-1" class="headerlink" title></a><a href="/qsk/java/set.html">Set集合</a> 集合无序，不允许重复值</h3><h3 id="-2"><a href="#-2" class="headerlink" title></a><a href="/qsk/java/queue.html">Queue队列</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/collection_record.html&quot;&gt;Collection集合&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/qsk/java/list.html&quot;&gt;List集合&lt;/a&gt; 继承Collecti
      
    
    </summary>
    
      <category term="java" scheme="http://www.throne4j.com/categories/java/"/>
    
    
      <category term="集合" scheme="http://www.throne4j.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
</feed>
